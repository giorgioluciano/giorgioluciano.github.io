{
  "hash": "03397ce5c328442c77ba3eba1bb24018",
  "result": {
    "markdown": "---\ntitle: \"Tip 3: Functions for simulating data\"\nauthor: \"Giorgio Luciano\"\ndate: \"2023-03-4\"\ncategories: \n  - R\n  - tutorials\nbibliography: references.bib\n---\n\n\n**Summary**\n\n1.  Example of creating variables using runif and rnorm\n2.  Writing a function that wraps all\n\nFirst of all we use the `runif` and `rnorm` to have a look how they work.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nx_min   <- 0\nx_max   <- 10   \nx_step  <- 0.01\n\ny_mean  <- 0.5\ny_sd    <- 0.25\ny_min   <- -1\ny_max   <- 1   \n\nx       <- seq(x_min,x_max,x_step)\nvar_random  <- runif(x,y_min,y_max)\nvar_norm    <- rnorm(x,y_mean,y_sd) \n\ndf  <- data.frame (x,var_random,var_norm)\ndt  <- data.table(df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpleDataset <- function(number_of_rows,means,sds)\n{\nl <- length(means)\nres <- lapply(seq(1:l),function(x) \n\t   eval(\n\t   parse(\n\t   text=paste(\"rnorm(\",number_of_rows,\",\",means[x],\",\",sds[x],\")\",sep=\"\"))\n\t   )\n\t   ) \ndat <- data.frame((sapply(res,c)))\nid <- rownames(dat)\ndat <-  cbind(id=id,dat)\ndt <- data.table(dat)\nreturn(dt)\n}\n```\n:::\n\n\nExample: We simulate the values of the LDL cholesterol of *2* patients in *3* different times. The first one patient (X1) has an average value of *200* of LDL with a standard variation of *2* while the second (X2) has an average of *150* with a standard deviation of *10. Note: All values are expressed in mg/dL*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset1 <- simpleDataset(3,c(200,180),c(2,10))\ndataset1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id       X1       X2\n1:  1 200.6442 196.5358\n2:  2 200.6801 166.5065\n3:  3 200.4200 196.2089\n```\n:::\n:::\n\n\nExample: this time we combine `runif` and `simpleDataset`. We simulate the values of the LDL cholesterol of *5* patients in *7* different times. The values for each patient are between a *min = 100* and a *max = 150*\nwith a standard deviation between a min sd = 10 and max sd = 40. We also simulate two time that presents outliers values between a *min = 180* and *max = 200* and an *min sd = 10* and *max sd = 40 .* We merge the values for each patient (*7* times + *2* outliers times) and finally we use the function melt to reshape the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- simpleDataset(number_of_rows=7,\n\t\t\t\t\t  means=runif(5,100,150),\n\t\t\t\t      sds=runif(5,10,40))\noutliers <- simpleDataset(number_of_rows=2,\n\t\t\t\t\t  means=runif(5,180,200),\n\t\t\t\t      sds=runif(5,10,40))\t\t\t\t  \n\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id        X1       X2        X3        X4       X5\n1:  1  97.92524 105.5036 110.66623  34.45252 108.1226\n2:  2 169.96962 136.5666  97.62086 -11.68481 135.7269\n3:  3  77.46899 135.7573  93.37948 133.03592 129.4088\n4:  4 197.75026 168.3904 132.91647 154.98579 164.1461\n5:  5 121.99923 140.2879 127.80267 165.29857 158.9153\n6:  6 176.63684 127.6318 107.84311 138.62779 157.1849\n7:  7 117.90619 176.1431  99.01017 166.91662 219.9138\n```\n:::\n\n```{.r .cell-code}\noutliers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id       X1       X2       X3       X4       X5\n1:  1 202.0947 191.3382 138.8483 194.0729 207.0543\n2:  2 194.0590 196.3606 209.5827 248.9402 175.0254\n```\n:::\n\n```{.r .cell-code}\ndato     <-rbind(dat1,outliers) \ndt.melt <- melt(dat1, id.vars=\"id\")\ncolnames(dt.melt) <- c(\"id\",\"category\",\"var1\")\ndt.melt$ncat <- as.numeric(dt.melt$category)\n\ndt.melt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    id category      var1 ncat\n 1:  1       X1  97.92524    1\n 2:  2       X1 169.96962    1\n 3:  3       X1  77.46899    1\n 4:  4       X1 197.75026    1\n 5:  5       X1 121.99923    1\n 6:  6       X1 176.63684    1\n 7:  7       X1 117.90619    1\n 8:  1       X2 105.50360    2\n 9:  2       X2 136.56661    2\n10:  3       X2 135.75728    2\n11:  4       X2 168.39042    2\n12:  5       X2 140.28791    2\n13:  6       X2 127.63183    2\n14:  7       X2 176.14312    2\n15:  1       X3 110.66623    3\n16:  2       X3  97.62086    3\n17:  3       X3  93.37948    3\n18:  4       X3 132.91647    3\n19:  5       X3 127.80267    3\n20:  6       X3 107.84311    3\n21:  7       X3  99.01017    3\n22:  1       X4  34.45252    4\n23:  2       X4 -11.68481    4\n24:  3       X4 133.03592    4\n25:  4       X4 154.98579    4\n26:  5       X4 165.29857    4\n27:  6       X4 138.62779    4\n28:  7       X4 166.91662    4\n29:  1       X5 108.12259    5\n30:  2       X5 135.72688    5\n31:  3       X5 129.40880    5\n32:  4       X5 164.14611    5\n33:  5       X5 158.91531    5\n34:  6       X5 157.18490    5\n35:  7       X5 219.91383    5\n    id category      var1 ncat\n```\n:::\n\n```{.r .cell-code}\nstr(dt.melt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'data.table' and 'data.frame':\t35 obs. of  4 variables:\n $ id      : chr  \"1\" \"2\" \"3\" \"4\" ...\n $ category: Factor w/ 5 levels \"X1\",\"X2\",\"X3\",..: 1 1 1 1 1 1 1 2 2 2 ...\n $ var1    : num  97.9 170 77.5 197.8 122 ...\n $ ncat    : num  1 1 1 1 1 1 1 2 2 2 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}