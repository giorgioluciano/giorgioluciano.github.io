{
  "hash": "b3a9a72e670d3802efa598014d72ab40",
  "result": {
    "markdown": "---\ntitle: \"Tip 3: Functions for simulating data\"\nauthor: \"Giorgio Luciano\"\ndate: \"2023-02-19\"\ncategories: \n  - R\n  - tutorials\nbibliography: references.bib\n---\n\n\n**Summary**\n\n1.  Example create variables using runif and rnorm\n2.  Writing a function that wraps all\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nx_min   <- 0\nx_max   <- 10   \nx_step  <- 0.01\n\ny_mean  <- 0.5\ny_sd    <- 0.25\ny_min   <- -1\ny_max   <- 1   \n\nx       <- seq(x_min,x_max,x_step)\nvar_random  <- runif(x,y_min,y_max)\nvar_norm    <- rnorm(x,y_mean,y_sd) \n\ndf  <- data.frame (x,var_random,var_norm)\ndt  <- data.table(df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpleDataset <- function(number_of_rows,means,sds)\n{\nl <- length(means)\nres <- lapply(seq(1:l),function(x) \n\t   eval(\n\t   parse(\n\t   text=paste(\"rnorm(\",number_of_rows,\",\",means[x],\",\",sds[x],\")\",sep=\"\"))\n\t   )\n\t   ) \ndat <- data.frame((sapply(res,c)))\nid <- rownames(dat)\ndat <-  cbind(id=id,dat)\ndt <- data.table(dat)\nreturn(dt)\n}\n```\n:::\n\n\nTesting if everything works\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- simpleDataset(number_of_rows=10,\n\t\t\t\t\t  means=runif(10,100,150),\n\t\t\t\t      sds=runif(10,10,40))\noutliers <- simpleDataset(number_of_rows=5,\n\t\t\t\t\t  means=runif(10,60,80),\n\t\t\t\t      sds=runif(10,10,10))\t\t\t\t  \n\ndato     <-rbind(dat1,outliers) \ndt.melt <- melt(dat1, id.vars=\"id\")\ncolnames(dt.melt) <- c(\"id\",\"category\",\"var1\")\ndt.melt$ncat <- as.numeric(dt.melt$category)\n\ndt.melt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     id category      var1 ncat\n  1:  1       X1  74.39231    1\n  2:  2       X1  54.89311    1\n  3:  3       X1  93.17208    1\n  4:  4       X1  56.06004    1\n  5:  5       X1  74.48994    1\n  6:  6       X1 128.91638    1\n  7:  7       X1  95.15370    1\n  8:  8       X1  50.60740    1\n  9:  9       X1  91.99015    1\n 10: 10       X1 168.63821    1\n 11:  1       X2 131.75983    2\n 12:  2       X2 129.19879    2\n 13:  3       X2 160.83106    2\n 14:  4       X2 191.87018    2\n 15:  5       X2 134.71822    2\n 16:  6       X2 137.23484    2\n 17:  7       X2 154.64628    2\n 18:  8       X2 136.14291    2\n 19:  9       X2 142.92192    2\n 20: 10       X2 185.15586    2\n 21:  1       X3 128.65590    3\n 22:  2       X3 158.57558    3\n 23:  3       X3 145.06635    3\n 24:  4       X3 154.76408    3\n 25:  5       X3 175.01052    3\n 26:  6       X3 158.86990    3\n 27:  7       X3 156.98053    3\n 28:  8       X3 112.85410    3\n 29:  9       X3 160.62038    3\n 30: 10       X3 123.61147    3\n 31:  1       X4 116.43949    4\n 32:  2       X4 142.89717    4\n 33:  3       X4 144.95822    4\n 34:  4       X4 146.91130    4\n 35:  5       X4 132.53560    4\n 36:  6       X4 144.17873    4\n 37:  7       X4 129.24362    4\n 38:  8       X4 116.25579    4\n 39:  9       X4 135.32632    4\n 40: 10       X4 138.14404    4\n 41:  1       X5 131.61755    5\n 42:  2       X5 192.99750    5\n 43:  3       X5 109.95452    5\n 44:  4       X5  95.90348    5\n 45:  5       X5 137.68585    5\n 46:  6       X5  93.48270    5\n 47:  7       X5  84.37616    5\n 48:  8       X5 183.71147    5\n 49:  9       X5  94.31590    5\n 50: 10       X5  88.50769    5\n 51:  1       X6 128.99316    6\n 52:  2       X6  68.62243    6\n 53:  3       X6 114.15024    6\n 54:  4       X6 138.06998    6\n 55:  5       X6  73.48317    6\n 56:  6       X6 137.25025    6\n 57:  7       X6 144.00045    6\n 58:  8       X6 143.21929    6\n 59:  9       X6 165.88342    6\n 60: 10       X6  98.99500    6\n 61:  1       X7  79.50793    7\n 62:  2       X7 109.62849    7\n 63:  3       X7 100.84248    7\n 64:  4       X7 165.70947    7\n 65:  5       X7 100.77382    7\n 66:  6       X7 171.06238    7\n 67:  7       X7  96.44302    7\n 68:  8       X7  94.72572    7\n 69:  9       X7  92.94301    7\n 70: 10       X7  93.70864    7\n 71:  1       X8  90.27163    8\n 72:  2       X8 104.03191    8\n 73:  3       X8 112.39087    8\n 74:  4       X8 145.72284    8\n 75:  5       X8 211.58983    8\n 76:  6       X8 119.11803    8\n 77:  7       X8 164.13207    8\n 78:  8       X8  92.02501    8\n 79:  9       X8  73.32060    8\n 80: 10       X8 101.51259    8\n 81:  1       X9 109.82141    9\n 82:  2       X9  81.72587    9\n 83:  3       X9 104.52673    9\n 84:  4       X9 129.11777    9\n 85:  5       X9 127.70598    9\n 86:  6       X9  98.03027    9\n 87:  7       X9  89.97345    9\n 88:  8       X9 117.43034    9\n 89:  9       X9 105.82762    9\n 90: 10       X9  99.07221    9\n 91:  1      X10 161.19151   10\n 92:  2      X10 162.70163   10\n 93:  3      X10 117.32705   10\n 94:  4      X10 133.28892   10\n 95:  5      X10 134.88246   10\n 96:  6      X10 135.32623   10\n 97:  7      X10 157.71774   10\n 98:  8      X10  92.04062   10\n 99:  9      X10 108.99557   10\n100: 10      X10 110.71801   10\n     id category      var1 ncat\n```\n:::\n\n```{.r .cell-code}\nstr(dt.melt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'data.table' and 'data.frame':\t100 obs. of  4 variables:\n $ id      : chr  \"1\" \"2\" \"3\" \"4\" ...\n $ category: Factor w/ 10 levels \"X1\",\"X2\",\"X3\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ var1    : num  74.4 54.9 93.2 56.1 74.5 ...\n $ ncat    : num  1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}