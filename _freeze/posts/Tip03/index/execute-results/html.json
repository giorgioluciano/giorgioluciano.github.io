{
  "hash": "3fd983bb5696fe996945209bd7f63f98",
  "result": {
    "markdown": "---\ntitle: \"Tip 3: Functions for simulating data\"\nauthor: \"Giorgio Luciano\"\ndate: \"2023-03-4\"\ncategories: \n  - R\n  - tutorials\nbibliography: references.bib\n---\n\n\n**Summary**\n\n1.  Example of creating variables using runif and rnorm\n2.  Writing a function that wraps all\n\nFirst of all we use the `runif` and `rnorm` to have a look how they work.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nx_min   <- 0\nx_max   <- 10   \nx_step  <- 0.01\n\ny_mean  <- 0.5\ny_sd    <- 0.25\ny_min   <- -1\ny_max   <- 1   \n\nx       <- seq(x_min,x_max,x_step)\nvar_random  <- runif(x,y_min,y_max)\nvar_norm    <- rnorm(x,y_mean,y_sd) \n\ndf  <- data.frame (x,var_random,var_norm)\ndt  <- data.table(df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpleDataset <- function(number_of_rows,means,sds)\n{\nl <- length(means)\nres <- lapply(seq(1:l),function(x) \n\t   eval(\n\t   parse(\n\t   text=paste(\"rnorm(\",number_of_rows,\",\",means[x],\",\",sds[x],\")\",sep=\"\"))\n\t   )\n\t   ) \ndat <- data.frame((sapply(res,c)))\nid <- rownames(dat)\ndat <-  cbind(id=id,dat)\ndt <- data.table(dat)\nreturn(dt)\n}\n```\n:::\n\n\nExample: We simulate the values of the LDL cholesterol of *2* patients in *3* different times. The first one patient (X1) has an average value of *200 mg/dL* of LDL with a standard variation of *2 mg/dL* while the second (X2) has an average of *150 mg/dL* with a standard deviation of *10 mg/dL*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset1 <- simpleDataset(3,c(200,180),c(2,10))\ndataset1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id       X1       X2\n1:  1 198.0813 189.6443\n2:  2 197.5427 177.4529\n3:  3 202.2449 188.7187\n```\n:::\n:::\n\n\nExample: this time we combine `runif` and `simpleDataset`. We simulate the values of the LDL cholesterol of *5* patients in *7* different times. The values for each patient are between a *min = 100* *mg/dL* and a *max = 150* *mg/dL*\nwith a standard deviation between a min sd = 10 *mg/dL* and max sd = 40 *mg/dL*. We also simulate two time that presents ourliers values between a *min = 180* *mg/dL* and *max = 200* *mg/dL* and an *min sd = 10* *mg/dL* and *max sd = 40 mg/dL .* We merge the values for each patient (*7* times + *2* outliers times) and finally we use the function melt to reshape the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- simpleDataset(number_of_rows=7,\n\t\t\t\t\t  means=runif(5,100,150),\n\t\t\t\t      sds=runif(5,10,40))\noutliers <- simpleDataset(number_of_rows=2,\n\t\t\t\t\t  means=runif(5,180,200),\n\t\t\t\t      sds=runif(5,10,40))\t\t\t\t  \n\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id        X1       X2        X3       X4       X5\n1:  1 132.03001 136.4971  82.61889 144.2500 124.1188\n2:  2 138.74945 137.8538 137.18915 144.9297 145.8580\n3:  3  99.69864 134.5675 157.26092 142.1462 121.7636\n4:  4 129.00175 138.8236 145.01499 148.5486 161.6693\n5:  5 127.19500 146.4817 102.29406 150.2974 144.3260\n6:  6  76.06510 108.3464 133.09583 144.2361 162.6873\n7:  7 131.13105 115.2623  91.32576 136.3950 126.5014\n```\n:::\n\n```{.r .cell-code}\noutliers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id       X1       X2       X3       X4       X5\n1:  1 193.8398 188.1711 250.1287 204.4611 172.4346\n2:  2 182.7892 167.2008 151.7861 202.1595 132.4593\n```\n:::\n\n```{.r .cell-code}\ndato     <-rbind(dat1,outliers) \ndt.melt <- melt(dat1, id.vars=\"id\")\ncolnames(dt.melt) <- c(\"id\",\"category\",\"var1\")\ndt.melt$ncat <- as.numeric(dt.melt$category)\n\ndt.melt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    id category      var1 ncat\n 1:  1       X1 132.03001    1\n 2:  2       X1 138.74945    1\n 3:  3       X1  99.69864    1\n 4:  4       X1 129.00175    1\n 5:  5       X1 127.19500    1\n 6:  6       X1  76.06510    1\n 7:  7       X1 131.13105    1\n 8:  1       X2 136.49713    2\n 9:  2       X2 137.85384    2\n10:  3       X2 134.56754    2\n11:  4       X2 138.82357    2\n12:  5       X2 146.48169    2\n13:  6       X2 108.34635    2\n14:  7       X2 115.26229    2\n15:  1       X3  82.61889    3\n16:  2       X3 137.18915    3\n17:  3       X3 157.26092    3\n18:  4       X3 145.01499    3\n19:  5       X3 102.29406    3\n20:  6       X3 133.09583    3\n21:  7       X3  91.32576    3\n22:  1       X4 144.24998    4\n23:  2       X4 144.92965    4\n24:  3       X4 142.14616    4\n25:  4       X4 148.54861    4\n26:  5       X4 150.29739    4\n27:  6       X4 144.23614    4\n28:  7       X4 136.39496    4\n29:  1       X5 124.11877    5\n30:  2       X5 145.85802    5\n31:  3       X5 121.76364    5\n32:  4       X5 161.66931    5\n33:  5       X5 144.32598    5\n34:  6       X5 162.68733    5\n35:  7       X5 126.50142    5\n    id category      var1 ncat\n```\n:::\n\n```{.r .cell-code}\nstr(dt.melt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'data.table' and 'data.frame':\t35 obs. of  4 variables:\n $ id      : chr  \"1\" \"2\" \"3\" \"4\" ...\n $ category: Factor w/ 5 levels \"X1\",\"X2\",\"X3\",..: 1 1 1 1 1 1 1 2 2 2 ...\n $ var1    : num  132 138.7 99.7 129 127.2 ...\n $ ncat    : num  1 1 1 1 1 1 1 2 2 2 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}