{
  "hash": "5ed755bc5a36fe7897d0358bd4e0af6d",
  "result": {
    "markdown": "---\ntitle: \"Tip 3: Functions for simulating data\"\nauthor: \"Giorgio Luciano\"\ndate: \"2023-03-4\"\ncategories: \n  - R\n  - tutorials\nbibliography: references.bib\n---\n\n\n**Summary**\n\n1.  Example of creating variables using runif and rnorm\n2.  Writing a function that wraps all\n\nFirst of all we use the `runif` and `rnorm` to have a look how they work.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nx_min   <- 0\nx_max   <- 10   \nx_step  <- 0.01\n\ny_mean  <- 0.5\ny_sd    <- 0.25\ny_min   <- -1\ny_max   <- 1   \n\nx       <- seq(x_min,x_max,x_step)\nvar_random  <- runif(x,y_min,y_max)\nvar_norm    <- rnorm(x,y_mean,y_sd) \n\ndf  <- data.frame (x,var_random,var_norm)\ndt  <- data.table(df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpleDataset <- function(number_of_rows,means,sds)\n{\nl <- length(means)\nres <- lapply(seq(1:l),function(x) \n\t   eval(\n\t   parse(\n\t   text=paste(\"rnorm(\",number_of_rows,\",\",means[x],\",\",sds[x],\")\",sep=\"\"))\n\t   )\n\t   ) \ndat <- data.frame((sapply(res,c)))\nid <- rownames(dat)\ndat <-  cbind(id=id,dat)\ndt <- data.table(dat)\nreturn(dt)\n}\n```\n:::\n\n\nExample: We simulate the values of the LDL cholesterol of 2 patients in 3 different times. The first one patient (X1) has an average value of 200 mg/dL of LDL with a standard variation of 2 mg/dL while the second (X2) has an average of 150 mg/dL with a standard deviation of 10 mg/dL\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset1 <- simpleDataset(3,c(200,180),c(2,10))\ndataset1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id       X1       X2\n1:  1 198.1747 195.5669\n2:  2 201.1713 177.5784\n3:  3 199.8042 184.3825\n```\n:::\n:::\n\n\nExample: this time we combine `runif` and `simpleDataset`. We simulate the values of the LDL cholesterol of 5 patients in 7 different times. The values for each patient are between a *min = 100* and a *max = 150* with a standard deviation between a min sd = 10 and max sd = 40. We also simulate two time that presents ourliers values between a *min = 180* and *max = 200* and an *min sd = 10* and *max sd = 40.* We merge the values for each patient (7 times + 2 outliers times) and finally we use the function melt to reshape the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- simpleDataset(number_of_rows=7,\n\t\t\t\t\t  means=runif(5,100,150),\n\t\t\t\t      sds=runif(5,10,40))\noutliers <- simpleDataset(number_of_rows=2,\n\t\t\t\t\t  means=runif(5,180,200),\n\t\t\t\t      sds=runif(5,10,40))\t\t\t\t  \n\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id       X1       X2        X3        X4       X5\n1:  1 108.6109 116.2917 126.88147 109.26230 123.5030\n2:  2 137.3538 142.8822 149.10778 152.60028 120.7715\n3:  3 153.7459 102.2387 122.72285 121.80463 139.8666\n4:  4 134.1601 107.0855 126.54292 122.52488 120.5775\n5:  5 144.2806 109.6417 161.98912 133.29072 127.4142\n6:  6 120.4289 126.1179  78.35913  48.49290 116.7575\n7:  7 113.2920 169.5742 135.43825 -10.35451 136.0967\n```\n:::\n\n```{.r .cell-code}\noutliers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id       X1       X2       X3       X4       X5\n1:  1 215.8769 140.5563 178.6784 220.6831 201.2225\n2:  2 177.4662 190.4997 197.9400 176.2208 201.9227\n```\n:::\n\n```{.r .cell-code}\ndato     <-rbind(dat1,outliers) \ndt.melt <- melt(dat1, id.vars=\"id\")\ncolnames(dt.melt) <- c(\"id\",\"category\",\"var1\")\ndt.melt$ncat <- as.numeric(dt.melt$category)\n\ndt.melt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    id category      var1 ncat\n 1:  1       X1 108.61090    1\n 2:  2       X1 137.35382    1\n 3:  3       X1 153.74586    1\n 4:  4       X1 134.16011    1\n 5:  5       X1 144.28063    1\n 6:  6       X1 120.42890    1\n 7:  7       X1 113.29204    1\n 8:  1       X2 116.29167    2\n 9:  2       X2 142.88221    2\n10:  3       X2 102.23870    2\n11:  4       X2 107.08545    2\n12:  5       X2 109.64172    2\n13:  6       X2 126.11793    2\n14:  7       X2 169.57416    2\n15:  1       X3 126.88147    3\n16:  2       X3 149.10778    3\n17:  3       X3 122.72285    3\n18:  4       X3 126.54292    3\n19:  5       X3 161.98912    3\n20:  6       X3  78.35913    3\n21:  7       X3 135.43825    3\n22:  1       X4 109.26230    4\n23:  2       X4 152.60028    4\n24:  3       X4 121.80463    4\n25:  4       X4 122.52488    4\n26:  5       X4 133.29072    4\n27:  6       X4  48.49290    4\n28:  7       X4 -10.35451    4\n29:  1       X5 123.50298    5\n30:  2       X5 120.77153    5\n31:  3       X5 139.86655    5\n32:  4       X5 120.57748    5\n33:  5       X5 127.41415    5\n34:  6       X5 116.75753    5\n35:  7       X5 136.09673    5\n    id category      var1 ncat\n```\n:::\n\n```{.r .cell-code}\nstr(dt.melt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'data.table' and 'data.frame':\t35 obs. of  4 variables:\n $ id      : chr  \"1\" \"2\" \"3\" \"4\" ...\n $ category: Factor w/ 5 levels \"X1\",\"X2\",\"X3\",..: 1 1 1 1 1 1 1 2 2 2 ...\n $ var1    : num  109 137 154 134 144 ...\n $ ncat    : num  1 1 1 1 1 1 1 2 2 2 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}