{
  "hash": "a23c1331850e7289a5a5ef84890805d3",
  "result": {
    "markdown": "---\ntitle: \"Tip 3: Functions for simulating data\"\nauthor: \"Giorgio Luciano\"\ndate: \"2023-02-19\"\ncategories: \n  - R\n  - tutorials\nbibliography: references.bib\n---\n\n\n**Summary**\n\n1.  Example create variables using runif and rnorm\n2.  Writing a function that wraps all\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nx_min   <- 0\nx_max   <- 10   \nx_step  <- 0.01\n\ny_mean  <- 0.5\ny_sd    <- 0.25\ny_min   <- -1\ny_max   <- 1   \n\nx       <- seq(x_min,x_max,x_step)\nvar_random  <- runif(x,y_min,y_max)\nvar_norm    <- rnorm(x,y_mean,y_sd) \n\ndf  <- data.frame (x,var_random,var_norm)\ndt  <- data.table(df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpleDataset <- function(number_of_rows,means,sds)\n{\nl <- length(means)\nres <- lapply(seq(1:l),function(x) \n\t   eval(\n\t   parse(\n\t   text=paste(\"rnorm(\",number_of_rows,\",\",means[x],\",\",sds[x],\")\",sep=\"\"))\n\t   )\n\t   ) \ndat <- data.frame((sapply(res,c)))\nid <- rownames(dat)\ndat <-  cbind(id=id,dat)\ndt <- data.table(dat)\nreturn(dt)\n}\n```\n:::\n\n\nTesting if everything works\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- simpleDataset(number_of_rows=3,\n\t\t\t\t\t  means=runif(10,100,150),\n\t\t\t\t      sds=runif(10,10,40))\noutliers <- simpleDataset(number_of_rows=5,\n\t\t\t\t\t  means=runif(10,60,80),\n\t\t\t\t      sds=runif(10,10,10))\t\t\t\t  \n\ndato     <-rbind(dat1,outliers) \ndt.melt <- melt(dat1, id.vars=\"id\")\ncolnames(dt.melt) <- c(\"id\",\"category\",\"var1\")\ndt.melt$ncat <- as.numeric(dt.melt$category)\n\ndt.melt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    id category      var1 ncat\n 1:  1       X1  72.07506    1\n 2:  2       X1 103.73098    1\n 3:  3       X1  72.40991    1\n 4:  1       X2  57.58028    2\n 5:  2       X2 144.38541    2\n 6:  3       X2  85.26600    2\n 7:  1       X3 123.88294    3\n 8:  2       X3  78.06156    3\n 9:  3       X3  95.66231    3\n10:  1       X4 135.65458    4\n11:  2       X4  96.30685    4\n12:  3       X4 131.68645    4\n13:  1       X5 143.68235    5\n14:  2       X5 101.35852    5\n15:  3       X5 144.86713    5\n16:  1       X6 125.82881    6\n17:  2       X6 115.68316    6\n18:  3       X6 120.38878    6\n19:  1       X7 122.04890    7\n20:  2       X7 142.03068    7\n21:  3       X7 133.59321    7\n22:  1       X8 114.41969    8\n23:  2       X8 147.85265    8\n24:  3       X8 129.33107    8\n25:  1       X9 118.06088    9\n26:  2       X9 166.62412    9\n27:  3       X9  91.38896    9\n28:  1      X10 114.66048   10\n29:  2      X10  94.55178   10\n30:  3      X10 120.71949   10\n    id category      var1 ncat\n```\n:::\n\n```{.r .cell-code}\nstr(dt.melt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'data.table' and 'data.frame':\t30 obs. of  4 variables:\n $ id      : chr  \"1\" \"2\" \"3\" \"1\" ...\n $ category: Factor w/ 10 levels \"X1\",\"X2\",\"X3\",..: 1 1 1 2 2 2 3 3 3 4 ...\n $ var1    : num  72.1 103.7 72.4 57.6 144.4 ...\n $ ncat    : num  1 1 1 2 2 2 3 3 3 4 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}