{
  "hash": "17e3ffb741a6faf26e1419fac761846c",
  "result": {
    "markdown": "---\ntitle: \"Tip 3: Functions for simulating data\"\nauthor: \"Giorgio Luciano\"\ndate: \"2023-02-19\"\ncategories: \n  - R\n  - tutorials\nbibliography: references.bib\n---\n\n\n**Summary**\n\n1.  Example of creating variables using runif and rnorm\n2.  Writing a function that wraps all\n\nFirst of all we use the `runif` and `rnorm` to have a look how they work.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nx_min   <- 0\nx_max   <- 10   \nx_step  <- 0.01\n\ny_mean  <- 0.5\ny_sd    <- 0.25\ny_min   <- -1\ny_max   <- 1   \n\nx       <- seq(x_min,x_max,x_step)\nvar_random  <- runif(x,y_min,y_max)\nvar_norm    <- rnorm(x,y_mean,y_sd) \n\ndf  <- data.frame (x,var_random,var_norm)\ndt  <- data.table(df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpleDataset <- function(number_of_rows,means,sds)\n{\nl <- length(means)\nres <- lapply(seq(1:l),function(x) \n\t   eval(\n\t   parse(\n\t   text=paste(\"rnorm(\",number_of_rows,\",\",means[x],\",\",sds[x],\")\",sep=\"\"))\n\t   )\n\t   ) \ndat <- data.frame((sapply(res,c)))\nid <- rownames(dat)\ndat <-  cbind(id=id,dat)\ndt <- data.table(dat)\nreturn(dt)\n}\n```\n:::\n\n\nExample 1 We simulate the values of the LDL cholesterol of 2 patients in 3 different times. The first one patient (X1) has an average value of 200 mg/dL of LDL with a standard variation of 2 mg/dL while the second (X2) has an average of 150 mg/dL with a standard deviation of 10 mg/dL\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset1 <- simpleDataset(3,c(200,180),c(2,10))\ndataset1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id       X1       X2\n1:  1 197.4183 187.6301\n2:  2 203.9110 194.3946\n3:  3 202.4979 186.1578\n```\n:::\n:::\n\n\nExample 2 this time we combine `runif` and `simpleDataset.` We simulate the values of the LDL cholesterol of 5 patients in 7 different times. The values for each patient are between a `min = 100` and a `max = 150` with a standard deviation between a minsd = 10 and maxsd = 40. We also simulate two time that presents ourliers values between a `min = 180` and `max = 200` and an `min sd = 10` and `max sd =40`. We merge the values for each patient (7 times  + 2 outliers times) and finally we use the function melt to reshape the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- simpleDataset(number_of_rows=7,\n\t\t\t\t\t  means=runif(5,100,150),\n\t\t\t\t      sds=runif(5,10,40))\noutliers <- simpleDataset(number_of_rows=2,\n\t\t\t\t\t  means=runif(5,180,200),\n\t\t\t\t      sds=runif(5,10,40))\t\t\t\t  \n\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id        X1        X2        X3        X4        X5\n1:  1 130.12051  88.35887  86.85725 133.16570 106.39373\n2:  2 109.07129  58.81695 166.56253 125.54637 120.41272\n3:  3 125.30736 137.78125 101.92671  45.40031 144.39831\n4:  4 104.01005  72.69238 114.45796 170.33651  66.13816\n5:  5  97.15998 103.93026 184.23701 119.32614  55.03438\n6:  6 102.52802 103.38935 156.45450 135.36248  90.74564\n7:  7 110.49553  73.70051 143.42869 149.90491 101.59312\n```\n:::\n\n```{.r .cell-code}\noutliers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id       X1       X2       X3       X4       X5\n1:  1 210.8973 214.1763 180.1504 199.6072 246.8635\n2:  2 209.6593 190.2164 173.1779 197.5695 220.4252\n```\n:::\n\n```{.r .cell-code}\ndato     <-rbind(dat1,outliers) \ndt.melt <- melt(dat1, id.vars=\"id\")\ncolnames(dt.melt) <- c(\"id\",\"category\",\"var1\")\ndt.melt$ncat <- as.numeric(dt.melt$category)\n\ndt.melt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    id category      var1 ncat\n 1:  1       X1 130.12051    1\n 2:  2       X1 109.07129    1\n 3:  3       X1 125.30736    1\n 4:  4       X1 104.01005    1\n 5:  5       X1  97.15998    1\n 6:  6       X1 102.52802    1\n 7:  7       X1 110.49553    1\n 8:  1       X2  88.35887    2\n 9:  2       X2  58.81695    2\n10:  3       X2 137.78125    2\n11:  4       X2  72.69238    2\n12:  5       X2 103.93026    2\n13:  6       X2 103.38935    2\n14:  7       X2  73.70051    2\n15:  1       X3  86.85725    3\n16:  2       X3 166.56253    3\n17:  3       X3 101.92671    3\n18:  4       X3 114.45796    3\n19:  5       X3 184.23701    3\n20:  6       X3 156.45450    3\n21:  7       X3 143.42869    3\n22:  1       X4 133.16570    4\n23:  2       X4 125.54637    4\n24:  3       X4  45.40031    4\n25:  4       X4 170.33651    4\n26:  5       X4 119.32614    4\n27:  6       X4 135.36248    4\n28:  7       X4 149.90491    4\n29:  1       X5 106.39373    5\n30:  2       X5 120.41272    5\n31:  3       X5 144.39831    5\n32:  4       X5  66.13816    5\n33:  5       X5  55.03438    5\n34:  6       X5  90.74564    5\n35:  7       X5 101.59312    5\n    id category      var1 ncat\n```\n:::\n\n```{.r .cell-code}\nstr(dt.melt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'data.table' and 'data.frame':\t35 obs. of  4 variables:\n $ id      : chr  \"1\" \"2\" \"3\" \"4\" ...\n $ category: Factor w/ 5 levels \"X1\",\"X2\",\"X3\",..: 1 1 1 1 1 1 1 2 2 2 ...\n $ var1    : num  130.1 109.1 125.3 104 97.2 ...\n $ ncat    : num  1 1 1 1 1 1 1 2 2 2 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}