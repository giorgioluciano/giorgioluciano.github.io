{
  "hash": "665d3e43f9116a0ee13f16c45733a014",
  "result": {
    "markdown": "---\ntitle: \"Title: Unraveling the DnD Dice Duel Riddle with Monte Carlo Simulation in R\"\nauthor: \"Giorgio Luciano and ChatGPT\"\ndate: \"2024-1-14\"\ncategories: \n  - R\n  - Fun\nbibliography: references.bib\n---\n\n\n# **Unraveling the DnD Dice Duel Riddle with Monte Carlo Simulation in R**\n\n## ***Introduction***\n\nEmbark on a journey into the realm of Dungeons & Dragons as we unravel a captivating fiddle riddle involving a dice duel. Using the power of the R programming language and the Monte Carlo simulation method, we'll simulate the outcomes of duels between two players, each armed with a bag containing six distinct DnD dice. Prepare to explore the fascinating world of probability and randomness! See the riddle posted [here](https://open.substack.com/pub/thefiddler/p/can-you-roll-the-dungeon-masters?r=2xmwww&utm_campaign=post&utm_medium=web \"Can You Roll the Dungeon Masterâ€™s Dice?\") by [Fiddler on the Proof](https://thefiddler.substack.com/)\n\nAt a table sit two individuals, each equipped with a bag housing six DnD dice: a d4, a d6, a d8, a d10, a d12, and a d20. The challenge is to randomly select one die from each bag and roll them simultaneously. For example, if a d4 and a d12 are chosen, both players roll their respective dice, hoping for fortuitous results.\nMonte Carlo Simulation in R:\n\nTo confront this enigma, we turn to the Monte Carlo method. The following R code snippet initiates a simulation of multiple dice duels, offering a glimpse into the complexities of DnD dice outcomes.\n\nwe can break down the analysis into different cases:\n\n1.  **Case 1: Both players take the same type of dice.**\n\n2.  **Case 2: Both players take different types of dice (without repetition of the same combination).**\n\nWe'll generate plots for each case and then provide a summary of the results. Let's proceed with the updated code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n# Function to simulate a single dice duel with both players taking the same type of dice\nsimulate_same_dice_duel <- function() {\n  dice_type <- sample(c(4, 6, 8, 10, 12,20,40,64,80,120,128), 1)\n  roll_player1 <- sample(1:dice_type, 1)\n  roll_player2 <- sample(1:dice_type, 1)\n  return(c(dice_type, roll_player1, dice_type, roll_player2))\n}\n\n# Function to simulate a single dice duel with both players taking different types of dice\nsimulate_different_dice_duel <- function() {\n  dice_types <- sample(c(4, 6, 8, 10, 12,20,40,64,80,120,128), 2, replace = FALSE)\n  roll_player1 <- sample(1:dice_types[1], 1)\n  roll_player2 <- sample(1:dice_types[2], 1)\n  return(c(dice_types[1], roll_player1, dice_types[2], roll_player2))\n}\n\n# Monte Carlo simulation for both cases\nnum_trials <- 10000\n\n# Case 1: Both players take the same type of dice\nsame_dice_simulation_results <- replicate(num_trials, simulate_same_dice_duel())\nsame_dice_data <- data.frame(Player = rep(c(\"Player 1\", \"Player 2\"), each = ncol(same_dice_simulation_results)),\n                             Dice_Type = rep(same_dice_simulation_results[1, ], 2),\n                             Roll_Value = as.integer(c(same_dice_simulation_results[2, ], same_dice_simulation_results[4, ])))\n\n# Visualize the results for Case 1 using ggplot2\nggplot(same_dice_data, aes(x = factor(Dice_Type), y = Roll_Value, fill = Player)) +\n  geom_boxplot() +\n  labs(title = paste(\"Case 1: Both Players Take the Same Dice (\", num_trials, \"trials)\"),\n       x = \"Dice Type\",\n       y = \"Roll Value\",\n       fill = \"Player\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Case 2: Both players take different types of dice\ndifferent_dice_simulation_results <- replicate(num_trials, simulate_different_dice_duel())\ndifferent_dice_data <- data.frame(Player = rep(c(\"Player 1\", \"Player 2\"), each = ncol(different_dice_simulation_results)),\n                                  Dice_Type_Player1 = rep(different_dice_simulation_results[1, ], 2),\n                                  Roll_Value_Player1 = as.integer(c(different_dice_simulation_results[2, ])),\n                                  Dice_Type_Player2 = rep(different_dice_simulation_results[3, ], 2),\n                                  Roll_Value_Player2 = as.integer(c(different_dice_simulation_results[4, ])))\n\n# Visualize the results for Case 2 - Player 1 (Dice 4 vs. Dice 20)\nggplot(subset(different_dice_data, Dice_Type_Player1 %in% c(4, 20)), aes(x = factor(Dice_Type_Player2), y = Roll_Value_Player1)) +\n  geom_boxplot() +\n  labs(title = paste(\"Case 2 - Player 1: Dice 4 vs. Dice 20 (\", num_trials, \"trials)\"),\n       x = \"Dice Type Player 2\",\n       y = \"Roll Value Player 1\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Visualize the results for Case 2 - Player 2 (Dice 4 vs. Dice 20)\nggplot(subset(different_dice_data, Dice_Type_Player2 %in% c(4, 20)), aes(x = factor(Dice_Type_Player1), y = Roll_Value_Player2)) +\n  geom_boxplot() +\n  labs(title = paste(\"Case 2 - Player 2: Dice 4 vs. Dice 20 (\", num_trials, \"trials)\"),\n       x = \"Dice Type Player 1\",\n       y = \"Roll Value Player 2\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# Visualize the results for Case 2 - Player 1 (Dice 4 vs. Dice 12)\nggplot(subset(different_dice_data, Dice_Type_Player1 %in% c(4, 12)), aes(x = factor(Dice_Type_Player2), y = Roll_Value_Player1)) +\n  geom_boxplot() +\n  labs(title = paste(\"Case 2 - Player 1: Dice 4 vs. Dice 12 (\", num_trials, \"trials)\"),\n       x = \"Dice Type Player 2\",\n       y = \"Roll Value Player 1\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# Visualize the results for Case 2 - Player 2 (Dice 4 vs. Dice 12)\nggplot(subset(different_dice_data, Dice_Type_Player2 %in% c(4, 12)), aes(x = factor(Dice_Type_Player1), y = Roll_Value_Player2)) +\n  geom_boxplot() +\n  labs(title = paste(\"Case 2 - Player 2: Dice 4 vs. Dice 12 (\", num_trials, \"trials)\"),\n       x = \"Dice Type Player 1\",\n       y = \"Roll Value Player 2\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-5.png){width=672}\n:::\n\n```{.r .cell-code}\n# Visualize the results for Case 2 - Player 2 (Dice 4 vs. Dice 128)\nggplot(subset(different_dice_data, Dice_Type_Player2 %in% c(4, 128)), aes(x = factor(Dice_Type_Player1), y = Roll_Value_Player2)) +\n  geom_boxplot() +\n  labs(title = paste(\"Case 2 - Player 2: Dice 4 vs. Dice 128 (\", num_trials, \"trials)\"),\n       x = \"Dice Type Player 1\",\n       y = \"Roll Value Player 2\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-6.png){width=672}\n:::\n\n```{.r .cell-code}\n# Summarize the results for Case 1 (Same Dice)\nsummary_case1 <- table(same_dice_data$Roll_Value)\n\n# Summarize the results for Case 2 (Different Dice)\nsummary_case2 <- table(different_dice_data$Roll_Value_Player1 == different_dice_data$Roll_Value_Player2)\n\n# Display summaries\ncat(\"\\nSummary of Case 1 - Same Dice:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nSummary of Case 1 - Same Dice:\n```\n:::\n\n```{.r .cell-code}\nprint(summary_case1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n1644 1573 1506 1560 1116 1073  841  775  523  545  385  396  182  200  183  201 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n 214  225  216  225  110  133  106  109  121  107  123  126  122  137  115  129 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n  80  132  137  106  113  137  114  114   77   85   84   95   88   72   84   82 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n  83   81   85   94   73   86   89   70   72   89   88   77   84   62   71   98 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n  58   52   44   47   47   66   59   52   57   57   54   50   46   55   55   54 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n  22   35   27   28   35   38   32   31   33   35   22   27   29   23   16   25 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n  25   21   31   22   28   27   23   42   25   32   32   23   17   30   31   29 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n  31   40   27   23   30   28   22   20   12   10   16   15   13   13   15   13 \n```\n:::\n\n```{.r .cell-code}\ncat(\"\\nSummary of Case 2 - Different Dice:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nSummary of Case 2 - Different Dice:\n```\n:::\n\n```{.r .cell-code}\nprint(summary_case2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFALSE  TRUE \n19378   622 \n```\n:::\n:::\n\n## Analyzing the Duel Results\n\nThrough the marriage of R programming and Monte Carlo simulation, we've successfully deciphered the intricacies of the DnD dice duel riddle. Whether you're a seasoned tabletop gamer or a data science enthusiast, this approach serves as a versatile tool for exploring and comprehending complex scenarios governed by chance. As you embark on your own coding adventures, may the rolls be ever in your favor! Happy coding!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}