{
  "hash": "144497a5a223e568a9b05cf88e371591",
  "result": {
    "markdown": "---\ntitle: \"Tip 3: Functions for simulating data\"\nauthor: \"Giorgio Luciano\"\ndate: \"2023-03-4\"\ncategories: \n  - R\n  - tutorials\nbibliography: references.bib\n---\n\n\n**Summary**\n\n1.  Example of creating variables using `runif` and `rnorm`\n2.  Writing a function that wraps all\n\nFirst of all we use the `runif` and `rnorm` to have a look how they work.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nx_min   <- 0\nx_max   <- 10   \nx_step  <- 0.01\n\ny_mean  <- 0.5\ny_sd    <- 0.25\ny_min   <- -1\ny_max   <- 1   \n\nx       <- seq(x_min,x_max,x_step)\nvar_random  <- runif(x,y_min,y_max)\nvar_norm    <- rnorm(x,y_mean,y_sd) \n\ndf  <- data.frame (x,var_random,var_norm)\ndt  <- data.table(df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpleDataset <- function(number_of_rows,means,sds)\n{\nl <- length(means)\nres <- lapply(seq(1:l),function(x) \n\t   eval(\n\t   parse(\n\t   text=paste(\"rnorm(\",number_of_rows,\",\",means[x],\",\",sds[x],\")\",sep=\"\"))\n\t   )\n\t   ) \ndat <- data.frame((sapply(res,c)))\nid <- rownames(dat)\ndat <-  cbind(id=id,dat)\ndt <- data.table(dat)\nreturn(dt)\n}\n```\n:::\n\n\nExample 1: We simulate the values of the LDL cholesterol of *2* patients in *3* different times. The first one patient (X1) has an average value of *200* of LDL with a standard variation of *2* while the second (X2) has an average of *150* with a standard deviation of *10. Note: All values are expressed in mg/dL*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset1 <- simpleDataset(3,c(200,180),c(2,10))\ndataset1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id       X1       X2\n1:  1 204.3145 178.4421\n2:  2 199.1834 171.2649\n3:  3 199.9155 178.7384\n```\n:::\n:::\n\n\nExample 2: this time we combine `runif` and `simpleDataset`. We simulate the values of the LDL cholesterol of *5* patients in *7* different times. The values for each patient are between a *min = 100* and a *max = 150* with a standard deviation between a min sd = 10 and max sd = 40. We also simulate two time that presents outliers values between a *min = 180* and *max = 200* and an *min sd = 10* and *max sd = 40 .* We merge the values for each patient (*7* times + *2* outliers times) and finally we use the function melt to reshape the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- simpleDataset(number_of_rows=7,\n\t\t\t\t\t  means=runif(5,100,150),\n\t\t\t\t      sds=runif(5,10,40))\noutliers <- simpleDataset(number_of_rows=2,\n\t\t\t\t\t  means=runif(5,180,200),\n\t\t\t\t      sds=runif(5,10,40))\t\t\t\t  \n\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id        X1        X2       X3        X4        X5\n1:  1 117.59261 107.40190 107.0587 115.83311 117.18850\n2:  2  89.06212  99.46896 131.0495 136.37290 126.45233\n3:  3 127.03899 114.04480 162.0236 137.53429  89.50593\n4:  4 133.36898 136.26173 142.7966 125.84509 118.90806\n5:  5  83.69833 114.24400 113.8036 106.70153  97.66876\n6:  6 114.78685  87.25041 157.0341  85.15342 114.10684\n7:  7 123.53685 117.38970 131.1965 122.51675 123.38179\n```\n:::\n\n```{.r .cell-code}\noutliers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id       X1       X2       X3       X4       X5\n1:  1 160.5410 234.0097 197.2470 150.6875 177.5027\n2:  2 120.5312 197.2437 163.1016 190.7907 188.3518\n```\n:::\n\n```{.r .cell-code}\ndato     <-rbind(dat1,outliers) \ndt.melt <- melt(dat1, id.vars=\"id\")\ncolnames(dt.melt) <- c(\"id\",\"category\",\"var1\")\ndt.melt$ncat <- as.numeric(dt.melt$category)\n\ndt.melt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    id category      var1 ncat\n 1:  1       X1 117.59261    1\n 2:  2       X1  89.06212    1\n 3:  3       X1 127.03899    1\n 4:  4       X1 133.36898    1\n 5:  5       X1  83.69833    1\n 6:  6       X1 114.78685    1\n 7:  7       X1 123.53685    1\n 8:  1       X2 107.40190    2\n 9:  2       X2  99.46896    2\n10:  3       X2 114.04480    2\n11:  4       X2 136.26173    2\n12:  5       X2 114.24400    2\n13:  6       X2  87.25041    2\n14:  7       X2 117.38970    2\n15:  1       X3 107.05867    3\n16:  2       X3 131.04952    3\n17:  3       X3 162.02356    3\n18:  4       X3 142.79661    3\n19:  5       X3 113.80359    3\n20:  6       X3 157.03406    3\n21:  7       X3 131.19651    3\n22:  1       X4 115.83311    4\n23:  2       X4 136.37290    4\n24:  3       X4 137.53429    4\n25:  4       X4 125.84509    4\n26:  5       X4 106.70153    4\n27:  6       X4  85.15342    4\n28:  7       X4 122.51675    4\n29:  1       X5 117.18850    5\n30:  2       X5 126.45233    5\n31:  3       X5  89.50593    5\n32:  4       X5 118.90806    5\n33:  5       X5  97.66876    5\n34:  6       X5 114.10684    5\n35:  7       X5 123.38179    5\n    id category      var1 ncat\n```\n:::\n\n```{.r .cell-code}\nstr(dt.melt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'data.table' and 'data.frame':\t35 obs. of  4 variables:\n $ id      : chr  \"1\" \"2\" \"3\" \"4\" ...\n $ category: Factor w/ 5 levels \"X1\",\"X2\",\"X3\",..: 1 1 1 1 1 1 1 2 2 2 ...\n $ var1    : num  117.6 89.1 127 133.4 83.7 ...\n $ ncat    : num  1 1 1 1 1 1 1 2 2 2 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}