{
  "hash": "c221447b7f25b5192296fda531f0a222",
  "result": {
    "markdown": "---\ntitle: \"Monty Hall simulation\"\nauthor: \"Giorgio Luciano and ChatGPT\"\ndate: \"2023-09-16\"\ncategories: \n  - R\n  - fun\n  - Monty Hall problem\n  \n---\n\n\nMonty Hall Problem\nThe Monty Hall problem is a famous probability puzzle. In this scenario, a contestant on a game show is presented with three doors. Behind one door, there is a car, while behind the other two, there are goats. The contestant chooses one door, and then the host, Monty Hall, who knows what is behind each door, opens one of the remaining two doors to reveal a goat.\n\nThe contestant is then faced with a choice: stick with their initial choice or switch to the other unopened door. What should the contestant do to maximize their chances of winning the car?\n##Simulation in R\n\nLet's use R to simulate this problem and analyze the results.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the number of simulations\nnum_simulations <- 10000\n\n# Initialize variables to keep track of wins when switching and staying\nswitch_wins <- 0\nstay_wins <- 0\n\n# Perform the simulations\nfor (i in 1:num_simulations) {\n  # Create three doors with one car and two goats\n  doors <- sample(c(\"car\", \"goat\", \"goat\"))\n\n  # Player's initial choice\n  player_choice <- sample(1:3, 1)\n\n  # Monty Hall reveals a goat behind one of the unchosen doors\n  monty_reveals <- which(doors[-player_choice] == \"goat\")\n  monty_reveals <- monty_reveals[1]  # Monty reveals the first goat he encounters\n\n  # Determine the other unchosen door\n  other_door <- setdiff(1:3, c(player_choice, monty_reveals))\n\n  # Simulate switching doors\n  switch_choice <- other_door[1]\n\n  # Check if the player wins when switching\n  if (doors[switch_choice] == \"car\") {\n    switch_wins <- switch_wins + 1\n  }\n\n  # Check if the player wins when staying\n  if (doors[player_choice] == \"car\") {\n    stay_wins <- stay_wins + 1\n  }\n}\n\n# Calculate win percentages\nswitch_win_percent <- (switch_wins / num_simulations) * 100\nstay_win_percent <- (stay_wins / num_simulations) * 100\n\n# Print results\ncat(\"When switching doors, the win percentage is:\", switch_win_percent, \"%\\n\")\ncat(\"When staying with the initial choice, the win percentage is:\", stay_win_percent, \"%\\n\")\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}