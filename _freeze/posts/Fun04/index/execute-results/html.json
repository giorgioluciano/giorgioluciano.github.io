{
  "hash": "6991420e9d6c7e1a5e62a5c630df657b",
  "result": {
    "markdown": "---\ntitle: \"Analyzing Coin Flip Sequences with R\"\nauthor: \"Giorgio Luciano and ChatGPT\"\ndate: \"2023-11-2\"\ncategories: \n  - R\n  - Fun\nbibliography: references.bib\n---\n\n\nAnalyzing Coin Flip Sequences with R\n\nIn this blog post, we'll dive into a fun R code snippet that simulates a series of coin flips and analyzes the resulting sequences. We'll use the viridis and ggplot2 libraries to create visual representations of the sequences and gain insights into the outcomes. Let's break down the code step by step.\n\nSetting Up the Environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(viridis)  # Import the viridis color palette library\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: viridisLite\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nset.seed(123)  # Set a seed for reproducibility\nnum_flips <- 50000\nflips <- sample(c(\"Heads\", \"Tails\"), num_flips, replace = TRUE)\n```\n:::\n\n\nHere, we load the necessary libraries and set a seed for reproducibility. We simulate 50,000 coin flips, storing the results in the flips variable.\n\n## **Creating a Color Matrix**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Image aspect ratio\naspect_ratio <- 1  # You can customize the aspect ratio here\nn_col <- round(sqrt(num_flips) * aspect_ratio)\nn_row <- ceiling(num_flips / n_col)\n\n# Create a color matrix to represent coin flips\ncolors <- ifelse(flips == \"Heads\", \"red\", \"blue\")\n```\n:::\n\n\n## **Matrix Manipulation**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create matrices for Heads and Tails\nheads_matrix <- matrix(0, nrow = n_row, ncol = n_col)\ntails_matrix <- matrix(0, nrow = n_row, ncol = n_col)\n\nfor (i in 1:num_flips) {\n  if (flips[i] == \"Heads\") {\n    heads_matrix[(i - 1) %/% n_col + 1, (i - 1) %% n_col + 1] <- 1\n  } else {\n    tails_matrix[(i - 1) %/% n_col + 1, (i - 1) %% n_col + 1] <- 1\n  }\n}\n```\n:::\n\n\nWe create matrices **`heads_matrix`** and **`tails_matrix`** to represent the sequences of heads and tails. These matrices help us analyze the coin flip sequences.\n\n## **Analyzing Sequences**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to calculate the number of consecutive sequences\ncalculate_sequences <- function(matrix) {\n  sequences <- matrix(0, nrow = nrow(matrix), ncol = ncol(matrix))\n  for (i in 1:nrow(matrix)) {\n    count <- 0\n    for (j in 1:ncol(matrix)) {\n      if (matrix[i, j] == 1) {\n        count <- count + 1\n        sequences[i, j] <- count\n      } else {\n        count <- 0\n      }\n    }\n  }\n  return(sequences)\n}\n```\n:::\n\n\n\n## **Visualizing Sequences**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate sequences for Heads and Tails matrices\nsequences_heads <- calculate_sequences(heads_matrix)\nsequences_tails <- calculate_sequences(tails_matrix)\n\n# Find the longest sequence for Heads and Tails\nlongest_sequence_heads <- max(sequences_heads)\nlongest_sequence_tails <- max(sequences_tails)\n```\n:::\n\n\n\nWe define a function **`calculate_sequences`** that calculates the number of consecutive sequences in a matrix. This function is used to analyze the sequences of heads and tails.\n\n## **Creating Images**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create images with sequences and titles\npar(mfrow = c(1, 2))  # Display the two images side by side\nimage(t(sequences_heads), col = viridis(100), main = paste(\"Heads Sequences (Max:\", longest_sequence_heads, \")\"), xaxt = \"n\", yaxt = \"n\")\nimage(t(sequences_tails), col = inferno(100), main = paste(\"Tails Sequences (Max:\", longest_sequence_tails, \")\"), xaxt = \"n\", yaxt = \"n\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## **Table Generation**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\n\n# Calculate sequence lengths for Heads and Tails\nsequence_lengths_heads <- table(sequences_heads)\nsequence_lengths_tails <- table(sequences_tails)\n\n# Calculate the percentage of sequence lengths\npercentages_heads <- prop.table(sequence_lengths_heads) * 100\npercentages_tails <- prop.table(sequence_lengths_tails) * 100\n\n# Create data frames with lengths, absolute numbers, and percentages\ndataframe_heads <- data.frame(\n  Length = names(sequence_lengths_heads),\n  Absolute_Numbers = as.numeric(sequence_lengths_heads),\n  Percentage = percentages_heads\n)\ndataframe_tails <- data.frame(\n  Length = names(sequence_lengths_tails),\n  Absolute_Numbers = as.numeric(sequence_lengths_tails),\n  Percentage = percentages_tails\n)\n\n# Create formatted tables\nkable(dataframe_heads, caption = \"Table of Heads Sequence Lengths\")\n```\n\n::: {.cell-output-display}\nTable: Table of Heads Sequence Lengths\n\n|Length | Absolute_Numbers|Percentage.sequences_heads | Percentage.Freq|\n|:------|----------------:|:--------------------------|---------------:|\n|0      |            25107|0                          |      50.0378667|\n|1      |            12544|1                          |      25.0000000|\n|2      |             6269|2                          |      12.4940210|\n|3      |             3137|3                          |       6.2519930|\n|4      |             1570|4                          |       3.1289860|\n|5      |              789|5                          |       1.5724649|\n|6      |              368|6                          |       0.7334184|\n|7      |              191|7                          |       0.3806601|\n|8      |               95|8                          |       0.1893335|\n|9      |               55|9                          |       0.1096142|\n|10     |               27|10                         |       0.0538106|\n|11     |               12|11                         |       0.0239158|\n|12     |                6|12                         |       0.0119579|\n|13     |                2|13                         |       0.0039860|\n|14     |                2|14                         |       0.0039860|\n|15     |                1|15                         |       0.0019930|\n|16     |                1|16                         |       0.0019930|\n:::\n\n```{.r .cell-code}\nkable(dataframe_tails, caption = \"Table of Tails Sequence Lengths\")\n```\n\n::: {.cell-output-display}\nTable: Table of Tails Sequence Lengths\n\n|Length | Absolute_Numbers|Percentage.sequences_tails | Percentage.Freq|\n|:------|----------------:|:--------------------------|---------------:|\n|0      |            25245|0                          |      50.3128986|\n|1      |            12535|1                          |      24.9820631|\n|2      |             6143|2                          |      12.2429050|\n|3      |             3130|3                          |       6.2380421|\n|4      |             1570|4                          |       3.1289860|\n|5      |              779|5                          |       1.5525351|\n|6      |              376|6                          |       0.7493622|\n|7      |              188|7                          |       0.3746811|\n|8      |               98|8                          |       0.1953125|\n|9      |               53|9                          |       0.1056282|\n|10     |               28|10                         |       0.0558036|\n|11     |               13|11                         |       0.0259088|\n|12     |                7|12                         |       0.0139509|\n|13     |                4|13                         |       0.0079719|\n|14     |                3|14                         |       0.0059790|\n|15     |                2|15                         |       0.0039860|\n|16     |                2|16                         |       0.0039860|\n:::\n:::\n\n\nWe use the knitr library to generate tables that display the lengths, absolute numbers, and percentages of the sequences for both heads and tails.\n\n## **Conclusion**\nIn this blog post, we explored a fascinating R code snippet that simulates coin flips and analyzes the resulting sequences. We visualized the sequences and created tables to gain insights into the distribution of sequence lengths. This code is a great starting point for exploring and visualizing sequential data in R.\n\nFeel free to try this code on your own and customize it to suit your needs. Happy coding!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}