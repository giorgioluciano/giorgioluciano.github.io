{
  "hash": "bb47401fbab6f7ca4891f2a62980d09f",
  "result": {
    "markdown": "---\ntitle: \"Snippet #3: Functions for simulating data\"\nauthor: \"Giorgio Luciano\"\ndate: \"2023-03-4\"\ncategories: \n  - R\n  - tutorials\nbibliography: references.bib\n---\n\n\n1.  Example of creating variables using `runif` and `rnorm`\n2.  Writing a function that wraps all\n\nFirst of all we use the `runif` and `rnorm` to have a look how they work.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nx_min   <- 0\nx_max   <- 10   \nx_step  <- 0.01\n\ny_mean  <- 0.5\ny_sd    <- 0.25\ny_min   <- -1\ny_max   <- 1   \n\nx       <- seq(x_min,x_max,x_step)\nvar_random  <- runif(x,y_min,y_max)\nvar_norm    <- rnorm(x,y_mean,y_sd) \n\ndf  <- data.frame (x,var_random,var_norm)\ndt  <- data.table(df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpleDataset <- function(number_of_rows,means,sds)\n{\nl <- length(means)\nres <- lapply(seq(1:l),function(x) \n\t   eval(\n\t   parse(\n\t   text=paste(\"rnorm(\",number_of_rows,\",\",means[x],\",\",sds[x],\")\",sep=\"\"))\n\t   )\n\t   ) \ndat <- data.frame((sapply(res,c)))\nid <- rownames(dat)\ndat <-  cbind(id=id,dat)\ndt <- data.table(dat)\nreturn(dt)\n}\n```\n:::\n\n\nExample 1: We simulate the values of the LDL cholesterol of *2* patients in *3* different times. The first one patient (X1) has an average value of *200* of LDL with a standard variation of *2* while the second (X2) has an average of *150* with a standard deviation of *10. Note: All values are expressed in mg/dL*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset1 <- simpleDataset(3,c(200,180),c(2,10))\ndataset1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id       X1       X2\n   <char>    <num>    <num>\n1:      1 201.5684 183.3930\n2:      2 200.3544 185.7077\n3:      3 200.9371 165.1907\n```\n:::\n:::\n\n\nExample 2: this time we combine `runif` and `simpleDataset`. We simulate the values of the LDL cholesterol of *5* patients in *7* different times. The values for each patient are between a *min = 100* and a *max = 150* with a standard deviation between a min sd = 10 and max sd = 40. We also simulate two time that presents outliers values between a *min = 180* and *max = 200* and an *min sd = 10* and *max sd = 40 .* We merge the values for each patient (*7* times + *2* outliers times) and finally we use the function melt to reshape the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- simpleDataset(number_of_rows=7,\n\t\t\t\t\t  means=runif(5,100,150),\n\t\t\t\t      sds=runif(5,10,40))\noutliers <- simpleDataset(number_of_rows=2,\n\t\t\t\t\t  means=runif(5,180,200),\n\t\t\t\t      sds=runif(5,10,40))\t\t\t\t  \n\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id        X1        X2        X3        X4        X5\n   <char>     <num>     <num>     <num>     <num>     <num>\n1:      1 144.21445  95.43951  89.67723 106.83914 104.19131\n2:      2 119.81228  95.37633 102.00600 117.54736  99.52716\n3:      3 185.11243  81.94733  69.09184 106.58853  95.29962\n4:      4 131.05105  53.93576 104.12564  91.25222 143.54715\n5:      5 147.25589 124.25212  84.68835 171.42559  88.92418\n6:      6  84.53152 148.64440 170.06916 138.45285 125.73816\n7:      7 200.41127  97.66477 112.61022  96.29537 108.31970\n```\n:::\n\n```{.r .cell-code}\noutliers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id       X1       X2       X3       X4       X5\n   <char>    <num>    <num>    <num>    <num>    <num>\n1:      1 199.0397 192.4855 192.0797 215.6577 233.5173\n2:      2 190.2010 189.5826 196.5869 152.6835 172.9669\n```\n:::\n\n```{.r .cell-code}\ndato     <-rbind(dat1,outliers) \ndt.melt <- melt(dat1, id.vars=\"id\")\ncolnames(dt.melt) <- c(\"id\",\"category\",\"var1\")\ndt.melt$ncat <- as.numeric(dt.melt$category)\n\ndt.melt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        id category      var1  ncat\n    <char>   <fctr>     <num> <num>\n 1:      1       X1 144.21445     1\n 2:      2       X1 119.81228     1\n 3:      3       X1 185.11243     1\n 4:      4       X1 131.05105     1\n 5:      5       X1 147.25589     1\n 6:      6       X1  84.53152     1\n 7:      7       X1 200.41127     1\n 8:      1       X2  95.43951     2\n 9:      2       X2  95.37633     2\n10:      3       X2  81.94733     2\n11:      4       X2  53.93576     2\n12:      5       X2 124.25212     2\n13:      6       X2 148.64440     2\n14:      7       X2  97.66477     2\n15:      1       X3  89.67723     3\n16:      2       X3 102.00600     3\n17:      3       X3  69.09184     3\n18:      4       X3 104.12564     3\n19:      5       X3  84.68835     3\n20:      6       X3 170.06916     3\n21:      7       X3 112.61022     3\n22:      1       X4 106.83914     4\n23:      2       X4 117.54736     4\n24:      3       X4 106.58853     4\n25:      4       X4  91.25222     4\n26:      5       X4 171.42559     4\n27:      6       X4 138.45285     4\n28:      7       X4  96.29537     4\n29:      1       X5 104.19131     5\n30:      2       X5  99.52716     5\n31:      3       X5  95.29962     5\n32:      4       X5 143.54715     5\n33:      5       X5  88.92418     5\n34:      6       X5 125.73816     5\n35:      7       X5 108.31970     5\n        id category      var1  ncat\n```\n:::\n\n```{.r .cell-code}\nstr(dt.melt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'data.table' and 'data.frame':\t35 obs. of  4 variables:\n $ id      : chr  \"1\" \"2\" \"3\" \"4\" ...\n $ category: Factor w/ 5 levels \"X1\",\"X2\",\"X3\",..: 1 1 1 1 1 1 1 2 2 2 ...\n $ var1    : num  144 120 185 131 147 ...\n $ ncat    : num  1 1 1 1 1 1 1 2 2 2 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}