{
  "hash": "a49365e6cb2784635fe556a9dd0dd59a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Snippet #3: Functions for simulating data\"\nauthor: \"Giorgio Luciano\"\ndate: \"2023-03-4\"\ncategories: \n  - R\n  - tutorials\nbibliography: references.bib\n---\n\n\n1.  Example of creating variables using `runif` and `rnorm`\n2.  Writing a function that wraps all\n\nFirst of all we use the `runif` and `rnorm` to have a look how they work.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nx_min   <- 0\nx_max   <- 10   \nx_step  <- 0.01\n\ny_mean  <- 0.5\ny_sd    <- 0.25\ny_min   <- -1\ny_max   <- 1   \n\nx       <- seq(x_min,x_max,x_step)\nvar_random  <- runif(x,y_min,y_max)\nvar_norm    <- rnorm(x,y_mean,y_sd) \n\ndf  <- data.frame (x,var_random,var_norm)\ndt  <- data.table(df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpleDataset <- function(number_of_rows,means,sds)\n{\nl <- length(means)\nres <- lapply(seq(1:l),function(x) \n\t   eval(\n\t   parse(\n\t   text=paste(\"rnorm(\",number_of_rows,\",\",means[x],\",\",sds[x],\")\",sep=\"\"))\n\t   )\n\t   ) \ndat <- data.frame((sapply(res,c)))\nid <- rownames(dat)\ndat <-  cbind(id=id,dat)\ndt <- data.table(dat)\nreturn(dt)\n}\n```\n:::\n\n\nExample 1: We simulate the values of the LDL cholesterol of *2* patients in *3* different times. The first one patient (X1) has an average value of *200* of LDL with a standard variation of *2* while the second (X2) has an average of *150* with a standard deviation of *10. Note: All values are expressed in mg/dL*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset1 <- simpleDataset(3,c(200,180),c(2,10))\ndataset1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id       X1       X2\n1:  1 200.1841 167.1265\n2:  2 199.9952 200.8787\n3:  3 201.2486 187.5768\n```\n\n\n:::\n:::\n\n\nExample 2: this time we combine `runif` and `simpleDataset`. We simulate the values of the LDL cholesterol of *5* patients in *7* different times. The values for each patient are between a *min = 100* and a *max = 150* with a standard deviation between a min sd = 10 and max sd = 40. We also simulate two time that presents outliers values between a *min = 180* and *max = 200* and an *min sd = 10* and *max sd = 40 .* We merge the values for each patient (*7* times + *2* outliers times) and finally we use the function melt to reshape the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- simpleDataset(number_of_rows=7,\n\t\t\t\t\t  means=runif(5,100,150),\n\t\t\t\t      sds=runif(5,10,40))\noutliers <- simpleDataset(number_of_rows=2,\n\t\t\t\t\t  means=runif(5,180,200),\n\t\t\t\t      sds=runif(5,10,40))\t\t\t\t  \n\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id        X1       X2        X3        X4        X5\n1:  1 153.59476 150.6474 119.10800 169.21507 111.45022\n2:  2 136.25580 197.2160 109.72680 103.96251 103.52508\n3:  3  88.40632 127.6134  94.28173  96.85567 152.28825\n4:  4 114.22804 144.0820 169.41607 132.85758 124.59658\n5:  5 147.04467 140.8414  75.96130  92.81705 107.48489\n6:  6 130.92207 137.8937 130.39466  83.80787 119.87301\n7:  7 125.79370 114.3462  56.15695  97.22265  62.44163\n```\n\n\n:::\n\n```{.r .cell-code}\noutliers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id       X1       X2       X3       X4       X5\n1:  1 192.4697 146.3098 155.0556 179.5488 151.9553\n2:  2 195.1163 163.9017 183.5246 189.1330 163.9440\n```\n\n\n:::\n\n```{.r .cell-code}\ndato     <-rbind(dat1,outliers) \ndt.melt <- melt(dat1, id.vars=\"id\")\ncolnames(dt.melt) <- c(\"id\",\"category\",\"var1\")\ndt.melt$ncat <- as.numeric(dt.melt$category)\n\ndt.melt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    id category      var1 ncat\n 1:  1       X1 153.59476    1\n 2:  2       X1 136.25580    1\n 3:  3       X1  88.40632    1\n 4:  4       X1 114.22804    1\n 5:  5       X1 147.04467    1\n 6:  6       X1 130.92207    1\n 7:  7       X1 125.79370    1\n 8:  1       X2 150.64741    2\n 9:  2       X2 197.21595    2\n10:  3       X2 127.61337    2\n11:  4       X2 144.08198    2\n12:  5       X2 140.84145    2\n13:  6       X2 137.89369    2\n14:  7       X2 114.34618    2\n15:  1       X3 119.10800    3\n16:  2       X3 109.72680    3\n17:  3       X3  94.28173    3\n18:  4       X3 169.41607    3\n19:  5       X3  75.96130    3\n20:  6       X3 130.39466    3\n21:  7       X3  56.15695    3\n22:  1       X4 169.21507    4\n23:  2       X4 103.96251    4\n24:  3       X4  96.85567    4\n25:  4       X4 132.85758    4\n26:  5       X4  92.81705    4\n27:  6       X4  83.80787    4\n28:  7       X4  97.22265    4\n29:  1       X5 111.45022    5\n30:  2       X5 103.52508    5\n31:  3       X5 152.28825    5\n32:  4       X5 124.59658    5\n33:  5       X5 107.48489    5\n34:  6       X5 119.87301    5\n35:  7       X5  62.44163    5\n    id category      var1 ncat\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(dt.melt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nClasses 'data.table' and 'data.frame':\t35 obs. of  4 variables:\n $ id      : chr  \"1\" \"2\" \"3\" \"4\" ...\n $ category: Factor w/ 5 levels \"X1\",\"X2\",\"X3\",..: 1 1 1 1 1 1 1 2 2 2 ...\n $ var1    : num  153.6 136.3 88.4 114.2 147 ...\n $ ncat    : num  1 1 1 1 1 1 1 2 2 2 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}