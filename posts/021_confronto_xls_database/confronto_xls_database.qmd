---
title: "Confronto tra Excel e Database nella Gestione Clinica dei Dati: Errori E Sicurezza"
author: "Giorgio Luciano & AI"
date: "2024-09-24"
categories: 
  - Essential
  - Tutorial
---

### **Confronto tra Excel e Database nella Gestione Clinica dei Dati: Errori e Sicurezza**

#### **Caso Excel: Errore nel Valore di una Glicemia**

Un errore comune in Excel è l'inserimento di valori non corretti a causa di formati non standardizzati. Supponiamo di avere una tabella in cui si registrano i valori di glicemia dei pazienti. Il formato corretto richiede l'uso del punto come separatore decimale (ad esempio, **5.8** mmol/L), ma un utente inserisce erroneamente un valore con la virgola (**5,8**).

Esempio di tabella:

| Paziente   | Valore di glicemia (mmol/L) |
|------------|-----------------------------|
| Paziente A | 5.6                         |
| Paziente B | 6.2                         |
| Paziente C | 5,8                         |
| Paziente D | 7.1                         |

In questo caso, Excel potrebbe trattare **5,8** come testo, non come numero, perché la virgola è interpretata come un separatore non numerico. Di conseguenza, il valore **5,8** verrebbe ignorato durante i calcoli. Per esempio, se si tenta di calcolare la media dei valori con la formula `=MEDIA(B2:B5)`, Excel considererà solo i valori numerici (5.6, 6.2 e 7.1), restituendo una media non corretta.

-   **Media calcolata da Excel (ignorando 5,8)**:\
    (5.6+6.2+7.1)/3=6.3(5.6 + 6.2 + 7.1) / 3 = 6.3(5.6+6.2+7.1)/3=6.3

-   **Media corretta (includendo 5.8)**:\
    (5.6+6.2+5.8+7.1)/4=6.175(5.6 + 6.2 + 5.8 + 7.1) / 4 = 6.175(5.6+6.2+5.8+7.1)/4=6.175

Questo errore può facilmente passare inosservato, portando a conclusioni cliniche sbagliate.

#### **Caso Database: Prevenzione dell'Errore**

In un database, l'inserimento di dati con formato errato viene automaticamente bloccato. Supponiamo che la colonna dei valori glicemici sia definita come **DECIMAL** o **FLOAT**, dove è richiesto l'uso del punto decimale. Se si tenta di inserire un valore con la virgola, il database restituirà un errore, impedendo l'inserimento errato.

``` sql
CREATE TABLE glicemia (
      paziente VARCHAR(50), 
      valore_glicemia DECIMAL(4,1) );

INSERT INTO glicemia (paziente, valore_glicemia) VALUES ('Paziente C', '5,8');
```

Questo comando genererebbe un errore simile a:

**`ERROR: invalid input syntax for type numeric: "5,8"`**

Il database obbliga l'utente a correggere l'errore prima di continuare, prevenendo errori nei calcoli successivi.

#### **Caso Excel: Mancanza di Controllo sugli Accessi**

Excel non offre un sistema avanzato di controllo sugli accessi e tracciamento delle modifiche. Supponiamo che un file Excel venga utilizzato per gestire i dati clinici di pazienti, con il rischio che qualsiasi utente con accesso possa modificare i dati (intenzionalmente o accidentalmente) senza lasciare traccia.

Esempio:

| ID Paziente | Nome        | Diagnosi               | Terapia       | Medico        |
|--------------|--------------|-----------------|--------------|--------------|
| 001         | Mario Rossi | Ipertensione           | ACE Inibitori | Dott. Bianchi |
| 002         | Anna Verdi  | Diabete Tipo 2         | Insulina      | Dott. Neri    |
| 003         | Luca Blu    | Insufficienza cardiaca | Betabloccanti | Dott. Verdi   |

Un operatore sanitario potrebbe per errore modificare la terapia di un paziente, sostituendo "Insulina" con "Metformina" per Anna Verdi. In questo scenario, non ci sarebbe alcun modo di risalire a chi ha apportato la modifica, poiché Excel non tiene traccia delle modifiche, esponendo i dati clinici a gravi rischi.

#### **Caso Database: Robustezza nella Gestione della Sicurezza**

Un database offre robusti meccanismi di controllo degli accessi, con permessi specifici per ogni ruolo. Ad esempio, solo determinati utenti possono modificare i dati sensibili, mentre altri hanno accesso in sola lettura. Inoltre, ogni modifica viene tracciata automaticamente, registrando chi ha fatto la modifica e quando.

Esempio di gestione degli accessi:

``` sql
GRANT SELECT ON cartella_clinica TO infermiera;
GRANT UPDATE ON terapia TO medico;
```

Ogni modifica viene registrata, e se qualcuno cambia la terapia, è possibile risalire all'operatore e correggere l'errore.\
Esempio di log delle modifiche:

| ID Paziente | Operatore   | Campo Modificato | Valore Precedente | Valore Nuovo | Data Modifica    |
|------------|------------|------------|------------|------------|------------|
| 002         | infermiera1 | Terapia          | Insulina          | Metformina   | 2024-09-24 10:30 |

#### **Caso Excel: Duplicazione dei Dati**

Un altro rischio comune in Excel è la duplicazione accidentale dei dati. Supponiamo che durante l'inserimento di nuovi pazienti, un utente copi e incolli una riga esistente invece di crearne una nuova, modificando solo alcune informazioni e lasciando altri campi inalterati.

Esempio di tabella:

| ID Paziente | Nome        | Diagnosi               | Terapia       | Medico        |
|-------------|-------------|------------------------|---------------|---------------|
| 001         | Mario Rossi | Ipertensione           | ACE Inibitori | Dott. Bianchi |
| 002         | Anna Verdi  | Diabete Tipo 2         | Insulina      | Dott. Neri    |
| 003         | Mario Rossi | Insufficienza Cardiaca | Betabloccanti | Dott. Bianchi |

In questo caso, abbiamo due pazienti con lo stesso nome, ma terapie e diagnosi diverse. Questa duplicazione potrebbe non essere immediatamente evidente e potrebbe causare confusione clinica o errori nella gestione del paziente. Excel non dispone di controlli per rilevare automaticamente questi errori.

#### **Caso Database: Eliminazione delle Duplicazioni**

Un database può evitare questo tipo di errore utilizzando vincoli di unicità. Se la colonna "ID Paziente" è definita come chiave primaria, nessun duplicato sarà consentito.\
Sebbene Excel sia uno strumento potente e molto utilizzato per la gestione dei dati, può presentare alcune limitazioni, specialmente quando si tratta di gestire dati sensibili come quelli clinici. Un database strutturato offre un livello superiore di controllo e sicurezza, prevenendo errori comuni come quelli dovuti a formati non standardizzati o duplicazioni. La scelta dello strumento giusto dipende dalle esigenze specifiche e dalla complessità dei dati da gestire, con l'obiettivo di garantire sempre accuratezza e sicurezza.

Esempio:

``` sql
CREATE TABLE cartella_clinica (
    id_paziente INT PRIMARY KEY,
    nome VARCHAR(100),
    diagnosi VARCHAR(100),
    terapia VARCHAR(100),
    medico VARCHAR(100)
);
```

Se si tenta di inserire un nuovo paziente con un ID già esistente:

``` sql
INSERT INTO cartella_clinica (id_paziente, nome, diagnosi, terapia, medico)
VALUES (003, 'Mario Rossi', 'Ipertensione', 'ACE Inibitori', 'Dott. Bianchi');
```

Il database restituirebbe un errore simile a:

``` sql
ERROR: duplicate key value violates unique constraint "cartella_clinica_pkey"
```

Questo impedisce l’inserimento accidentale di dati duplicati, preservando l’integrità dei dati clinici.

------------------------------------------------------------------------

L'utilizzo di Excel per la gestione di dati clinici comporta rischi significativi di errori dovuti a formati incoerenti, duplicazioni e mancanza di tracciabilità. Al contrario, un database offre strumenti avanzati per prevenire questi problemi, garantendo una maggiore sicurezza, precisione e affidabilità nella gestione dei dati clinici.
