<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Giorgio Luciano</title>
<link>https://giorgioluciano.github.io/listing.html</link>
<atom:link href="https://giorgioluciano.github.io/listing.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.313</generator>
<lastBuildDate>Tue, 18 Jun 2024 22:00:00 GMT</lastBuildDate>
<item>
  <title>R Packages 2024 list so far</title>
  <dc:creator>Giorgio Luciano</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Packages Review 2024/index.html</link>
  <description><![CDATA[ 




<ol type="1">
<li>List of packages I’ve found useful in my workflow during 2024 (so far)</li>
</ol>
<section id="plot" class="level2">
<h2 class="anchored" data-anchor-id="plot">Plot</h2>
<section id="spiralize-visualize-data-on-spirals" class="level3">
<h3 class="anchored" data-anchor-id="spiralize-visualize-data-on-spirals"><strong>spiralize: Visualize Data on Spirals</strong></h3>
<p><em>tags</em>: #plot<br>
[cran package link] <a href="https://CRAN.R-project.org/package=spiralize" class="uri">https://CRAN.R-project.org/package=spiralize</a></p>
<p><em>description from the author/vignette</em><br>
</p>
<blockquote class="blockquote">
<p>It visualizes data along an Archimedean spiral <a href="https://en.wikipedia.org/wiki/Archimedean_spiral" class="uri">https://en.wikipedia.org/wiki/Archimedean_spiral</a>, makes so-called spiral graph or spiral chart. It has two major advantages for visualization: 1. It is able to &gt;visualize data with very long axis with high resolution. 2. It is efficient for time series data to reveal periodic patterns.</p>
</blockquote>
</section>
<section id="panelview-visualizing-panel-data" class="level3">
<h3 class="anchored" data-anchor-id="panelview-visualizing-panel-data"><strong>panelView: Visualizing Panel Data</strong></h3>
<p><em>tags</em>: #plot<br>
[cran package link] <a href="https://CRAN.R-project.org/package=panelView" class="uri">https://CRAN.R-project.org/package=panelView</a></p>
<p><em>description from the author/vignette</em><br>
</p>
<blockquote class="blockquote">
<p>Visualizes panel data. It has three main functionalities: (1) it plots the treatment status and missing values in a panel dataset; (2) it visualizes the temporal dynamics of a main variable of interest; (3) it depicts the bivariate relationships between a treatment variable and an outcome variable either by unit or in aggregate. For details, see <a href="doi:10.18637/jss.v107.i07" class="uri">doi:10.18637/jss.v107.i07</a>.</p>
</blockquote>
</section>
</section>
<section id="spectroscopy" class="level2">
<h2 class="anchored" data-anchor-id="spectroscopy">Spectroscopy</h2>
<section id="openspecy-analyze-process-identify-and-share-raman-and-ftir-spectra" class="level3">
<h3 class="anchored" data-anchor-id="openspecy-analyze-process-identify-and-share-raman-and-ftir-spectra"><strong>OpenSpecy: Analyze, Process, Identify, and Share Raman and (FT)IR Spectra</strong></h3>
<p><em>tags</em>: #spectroscopy<br>
[cran package link] <a href="https://CRAN.R-project.org/package=OpenSpecy" class="uri">https://CRAN.R-project.org/package=OpenSpecy</a></p>
<p><em>description from the author/vignette</em><br>
</p>
<blockquote class="blockquote">
<p>Raman and (FT)IR spectral analysis tool for plastic particles and other environmental samples (Cowger et al.&nbsp;2021, <a href="doi:10.1021/acs.analchem.1c00123" class="uri">doi:10.1021/acs.analchem.1c00123</a>). With read_any(), Open Specy provides a single function for reading individual, batch, or map spectral data files like .asp, .csv, .jdx, .spc, .spa, .0, and .zip. process_spec() simplifies processing spectra, including smoothing, baseline correction, range restriction and flattening, intensity conversions, wavenumber alignment, and min-max normalization. Spectra can be identified in batch using an onboard reference library (Cowger et al.&nbsp;2020, <a href="doi:10.1177/0003702820929064" class="uri">doi:10.1177/0003702820929064</a>) using match_spec(). A Shiny app is available via run_app() or online at&gt; <a href="https://openanalysis.org/openspecy/" class="uri">https://openanalysis.org/openspecy/</a>.</p>
</blockquote>
</section>
<section id="plsvarsel-variable-selection-in-partial-least-squares" class="level3">
<h3 class="anchored" data-anchor-id="plsvarsel-variable-selection-in-partial-least-squares"><strong>plsVarSel: Variable Selection in Partial Least Squares</strong></h3>
<p><em>tags</em>: #pls&nbsp;#partial least squares&nbsp;#regression<br>
[cran package link] <a href="https://CRAN.R-project.org/package=plsVarSel" class="uri">https://CRAN.R-project.org/package=plsVarSel</a></p>
<p><em>description from the author/vignette</em><br>
</p>
<blockquote class="blockquote">
<p>Interfaces and methods for variable selection in Partial Least Squares. The methods include filter methods, wrapper methods and embedded methods. Both regression and classification is supported.</p>
</blockquote>
</section>
</section>
<section id="statistics" class="level2">
<h2 class="anchored" data-anchor-id="statistics">Statistics</h2>
<section id="qreport-statistical-reporting-with-quarto" class="level3">
<h3 class="anchored" data-anchor-id="qreport-statistical-reporting-with-quarto"><strong>qreport: Statistical Reporting with ‘Quarto’</strong></h3>
<p><em>tags</em>: #statistics<br>
[cran package link] <a href="https://CRAN.R-project.org/package=qreport" class="uri">https://CRAN.R-project.org/package=qreport</a></p>
<p><em>description from the author/vignette</em><br>
</p>
<blockquote class="blockquote">
<p>Provides statistical components, tables, and graphs that are useful in ‘Quarto’ and ‘RMarkdown’ reports and that produce ‘Quarto’ elements for special formatting such as tabs and marginal notes and graphs. Some of the functions produce entire report sections with tabs, e.g., the missing data report created by missChk(). Functions for inserting variables and tables inside ‘graphviz’ and ‘mermaid’ diagrams are included, and so are special clinical trial graphics for adverse event reporting.</p>
</blockquote>
</section>
<section id="sjplot-data-visualization-for-statistics-in-social-science" class="level3">
<h3 class="anchored" data-anchor-id="sjplot-data-visualization-for-statistics-in-social-science"><strong>sjPlot: Data Visualization for Statistics in Social Science</strong></h3>
<p><em>tags</em>: #statistics&nbsp;#social science [cran package link] <a href="https://CRAN.R-project.org/package=sjPlot" class="uri">https://CRAN.R-project.org/package=sjPlot</a></p>
<p><em>description from the author/vignette</em><br>
</p>
<blockquote class="blockquote">
<p>Collection of plotting and table output functions for data visualization. Results of various statistical analyses (that are commonly used in social sciences) can be visualized using this package, including simple and cross tabulated frequencies, histograms, box plots, (generalized) linear models, mixed effects models, principal component analysis and correlation matrices, cluster analyses, scatter plots, stacked scales, effects plots of regression models (including interaction terms) and much more. This package supports labelled data.</p>
</blockquote>
</section>
<section id="mvet-multivariate-estimates-and-tests" class="level3">
<h3 class="anchored" data-anchor-id="mvet-multivariate-estimates-and-tests"><strong>MVET: Multivariate Estimates and Tests</strong></h3>
<p><em>tags</em>: #statistics<br>
[cran package link] <a href="https://CRAN.R-project.org/package=MVET" class="uri">https://CRAN.R-project.org/package=MVET</a></p>
<p><em>description from the author/vignette</em><br>
</p>
<blockquote class="blockquote">
<p>Multivariate estimation and testing, currently a package for testing parametric data. To deal with parametric data, various multivariate normality tests and outlier detection are performed and visualized using the ‘ggplot2’ package. Homogeneity tests for covariance matrices are also possible, as well as the Hotelling’s T-square test and the multivariate analysis of variance test. We are exploring additional tests and visualization techniques, such as profile analysis and randomized complete block design, to be made available in the future and making them easily accessible to users.</p>
</blockquote>
</section>
<section id="pbox-exploring-multivariate-spaces-with-probability-boxes" class="level3">
<h3 class="anchored" data-anchor-id="pbox-exploring-multivariate-spaces-with-probability-boxes"><strong>pbox: Exploring Multivariate Spaces with Probability Boxes</strong></h3>
<p><em>tags</em>: #statistics<br>
[cran package link] <a href="https://CRAN.R-project.org/package=pbox" class="uri">https://CRAN.R-project.org/package=pbox</a></p>
<p><em>description from the author/vignette</em><br>
</p>
<blockquote class="blockquote">
<p>Advanced statistical library offering a method to encapsulate and query the probability space of a dataset effortlessly using Probability Boxes (p-boxes). Its distinctive feature lies in the ease with which users can navigate and analyze marginal, joint, and conditional probabilities while taking into account the underlying correlation structure inherent in the data using copula theory and models. A comprehensive explanation is available in the paper “pbox: Exploring Multivariate Spaces with Probability Boxes” to be published in the Journal of Statistical Software.</p>
</blockquote>
</section>
<section id="equatiomatic-transform-models-into-latex-equations" class="level3">
<h3 class="anchored" data-anchor-id="equatiomatic-transform-models-into-latex-equations"><strong>equatiomatic: Transform Models into ‘LaTeX’ Equations</strong></h3>
<p><em>tags</em>: #statistics&nbsp;#latex&nbsp;#regression&nbsp;#models<br>
[cran package link] <a href="https://CRAN.R-project.org/package=equatiomatic" class="uri">https://CRAN.R-project.org/package=equatiomatic</a></p>
<p><em>description from the author/vignette</em><br>
</p>
<blockquote class="blockquote">
<p>The goal of ‘equatiomatic’ is to reduce the pain associated with writing ‘LaTeX’ formulas from fitted models. The primary function of the package, extract_eq(), takes a fitted model object as its input and returns the corresponding ‘LaTeX’ code for the model.</p>
</blockquote>
</section>
<section id="bulkreadr-the-ultimate-tool-for-reading-data-in-bulk" class="level3">
<h3 class="anchored" data-anchor-id="bulkreadr-the-ultimate-tool-for-reading-data-in-bulk"><strong>bulkreadr: The Ultimate Tool for Reading Data in Bulk</strong></h3>
<p><em>tags</em>: #bulk import<br>
[cran package link] <a href="https://CRAN.R-project.org/package=bulkreadr" class="uri">https://CRAN.R-project.org/package=bulkreadr</a></p>
<p><em>description from the author/vignette</em><br>
</p>
<blockquote class="blockquote">
<p>Designed to simplify and streamline the process of reading and processing large volumes of data in R, this package offers a collection of functions tailored for bulk data operations. It enables users to efficiently read multiple sheets from Microsoft Excel and Google Sheets workbooks, as well as various CSV files from a directory. The data is returned as organized data frames, facilitating further analysis and manipulation. Ideal for handling extensive data sets or batch processing tasks, bulkreadr empowers users to manage data in bulk effortlessly, saving time and effort in data preparation workflows. Additionally, the package seamlessly works with labelled data from SPSS and Stata.</p>
</blockquote>
</section>
</section>
<section id="simulated-data" class="level2">
<h2 class="anchored" data-anchor-id="simulated-data">Simulated data</h2>
<section id="rsurv-random-generation-of-survival-data" class="level3">
<h3 class="anchored" data-anchor-id="rsurv-random-generation-of-survival-data"><strong>rsurv: Random Generation of Survival Data</strong></h3>
<p><em>tags</em>: #rsurv<br>
[cran package link] <a href="https://CRAN.R-project.org/package=rsurv" class="uri">https://CRAN.R-project.org/package=rsurv</a></p>
<p><em>description from the author/vignette</em><br>
</p>
<blockquote class="blockquote">
<p>Random generation of survival data from a wide range of regression models, including accelerated failure time (AFT), proportional hazards (PH), proportional odds (PO), accelerated hazard (AH), Yang and Prentice (YP), and extended hazard (EH) models. The package ‘rsurv’ also stands out by its ability to generate survival data from an unlimited number of baseline distributions provided that an implementation of the quantile function of the chosen baseline distribution is available in R. Another nice feature of the package ‘rsurv’ lies in the fact that linear predictors are specified via a formula-based approach, facilitating the inclusion of categorical variables and interaction terms. The functions implemented in the package ‘rsurv’ can also be employed to simulate survival data with more complex structures, such as survival data with different types of censoring mechanisms, survival data with cure fraction, survival data with random effects (frailties), multivariate survival data, and competing risks survival data. Details about the R package ‘rsurv’ can be found in Demarqui (2024) <a href="doi:10.48550/arXiv.2406.01750" class="uri">doi:10.48550/arXiv.2406.01750</a>.</p>
</blockquote>
</section>
</section>
<section id="reporting-and-formatting" class="level2">
<h2 class="anchored" data-anchor-id="reporting-and-formatting">Reporting and Formatting</h2>
<section id="ftextra-extensions-for-flextable" class="level3">
<h3 class="anchored" data-anchor-id="ftextra-extensions-for-flextable"><strong>ftExtra: Extensions for ‘Flextable’</strong></h3>
<p><em>tags</em>: #tables&nbsp;#flextables<br>
[cran package link] <a href="https://CRAN.R-project.org/package=ftExtra" class="uri">https://CRAN.R-project.org/package=ftExtra</a></p>
<p><em>description from the author/vignette</em><br>
</p>
<blockquote class="blockquote">
<p>Build display tables easily by extending the functionality of the ‘flextable’ package. Features include spanning header, grouping rows, parsing markdown and so on.</p>
</blockquote>
</section>
</section>
<section id="fun" class="level2">
<h2 class="anchored" data-anchor-id="fun">Fun</h2>
<section id="playerchart-generate-pizza-chart-player-stats-0-100" class="level3">
<h3 class="anchored" data-anchor-id="playerchart-generate-pizza-chart-player-stats-0-100"><strong>PlayerChart: Generate Pizza Chart: Player Stats 0-100</strong></h3>
<p><em>tags</em>: #statistics&nbsp; [cran package link] <a href="https://CRAN.R-project.org/package=PlayerChart" class="uri">https://CRAN.R-project.org/package=PlayerChart</a></p>
<p><em>description from the author/vignette</em><br>
</p>
<blockquote class="blockquote">
<p>Create an interactive pizza chart visualizing a specific player’s statistics across various attributes in a sports dataset. The chart is constructed based on input parameters: ‘data’, a dataframe containing player data for any sports; ‘player_stats_col’, a vector specifying the names of the columns from the dataframe that will be used to create slices in the pizza chart, with statistics ranging between 0 and 100; ‘name_col’, specifying the name of the column in the dataframe that contains the player names; and ‘player_name’, representing the specific player whose statistics will be visualized in the chart, serving as the chart title.</p>
</blockquote>
</section>
<section id="gamer-color-palettes-inspired-by-video-games" class="level3">
<h3 class="anchored" data-anchor-id="gamer-color-palettes-inspired-by-video-games"><strong>gameR: Color Palettes Inspired by Video Games</strong></h3>
<p><em>tags</em>: #statistics&nbsp; [cran package link] <a href="https://CRAN.R-project.org/package=gameR" class="uri">https://CRAN.R-project.org/package=gameR</a></p>
<p><em>description from the author/vignette</em><br>
</p>
<blockquote class="blockquote">
<p>Palettes based on video games.</p>
</blockquote>


</section>
</section>

 ]]></description>
  <category>R</category>
  <category>packages</category>
  <guid>https://giorgioluciano.github.io/posts/Packages Review 2024/index.html</guid>
  <pubDate>Tue, 18 Jun 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>A Mathematical Exploration of Pizza Sizes</title>
  <dc:creator>Giorgio Luciano and ChatGPT4o</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Fun10/pizza.html</link>
  <description><![CDATA[ 




<p>Pizza, a beloved culinary delight, comes in various sizes. To better understand the implications of pizza size on the amount of pizza consumed, we establish a new standard unit called the <em>standard pizza radius</em>, denoted by the letter <img src="https://latex.codecogs.com/png.latex?a">, which measures 6 inches. This article examines how the area of a pizza changes with size and demonstrates that one extra-large pizza can provide more pizza than two standard-sized pizzas.</p>
<p>The area of a pizza, approximated as a circle, with a radius of one standard pizza radius (<img src="https://latex.codecogs.com/png.latex?a">) is given by the formula:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BArea%7D_%7B%5Ctext%7Bstandard%7D%7D%20=%20%5Cpi%20a%5E2%0A"></p>
<p>For an extra-large pizza with a radius <img src="https://latex.codecogs.com/png.latex?r%20=%201.5a">, the area can be calculated as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BArea%7D_%7B%5Ctext%7Bextra-large%7D%7D%20=%20%5Cpi%20(1.5a)%5E2%20=%20%5Cpi%20%5Ccdot%201.5%5E2%20%5Ccdot%20a%5E2%20=%20%5Cpi%20%5Ccdot%202.25%20%5Ccdot%20a%5E2%0A"></p>
<p>The combined area of two standard pizzas with radius <img src="https://latex.codecogs.com/png.latex?a"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BArea%7D_%7B%5Ctext%7Btwo%20standard%7D%7D%20=%202%20%5Ccdot%20%5Cpi%20a%5E2%0A"></p>
<p>Comparing this to the area of one extra-large pizza:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cpi%20%5Ccdot%202.25%20%5Ccdot%20a%5E2%20%3E%202%20%5Ccdot%20%5Cpi%20a%5E2%0A"></p>
<p>Simplifying, we find:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A2.25%20%5Cpi%20a%5E2%20%3E%202%20%5Cpi%20a%5E2%0A"></p>
<p>Thus, the area of one extra-large pizza is greater than the combined area of two standard pizzas.</p>
<p>To determine the minimum radius <img src="https://latex.codecogs.com/png.latex?r%20=%20n%20%5Ccdot%20a"> for the extra-large pizza to always have a greater area than two standard pizzas, we start with the inequality:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cpi%20(n%20%5Ccdot%20a)%5E2%20%3E%202%20%5Ccdot%20%5Cpi%20a%5E2%0A"></p>
<p>Simplifying, we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0An%5E2%20%5Ccdot%20%5Cpi%20a%5E2%20%3E%202%20%5Ccdot%20%5Cpi%20a%5E2%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0An%5E2%20%3E%202%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0An%20%3E%20%5Csqrt%7B2%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0An%20%3E%201.4142%0A"></p>
<p>Therefore, the radius of the extra-large pizza must be at least <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B2%7D"> times the radius of a standard pizza to ensure its area is always greater than that of two standard pizzas.</p>
<p>In Italy, according to the <em>Disciplinare verace pizza napoletana</em> (guidelines for authentic Neapolitan pizza), the radius of a pizza ranges from 22 to 35 cm. Let’s compare the area of two pizzas with a 22 cm radius to one pizza with a 33 cm radius.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A2%20%5Ccdot%20%5Cpi%20%5Ccdot%2022%5E2%20=%202%20%5Ccdot%20%5Cpi%20%5Ccdot%20484%20=%202%20%5Ccdot%201520.56%20=%203039.52%20%5C,%20%5Ctext%7Bcm%7D%5E2%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cpi%20%5Ccdot%2033%5E2%20=%20%5Cpi%20%5Ccdot%201089%20=%203419.46%20%5C,%20%5Ctext%7Bcm%7D%5E2%0A"></p>
<p>This calculation confirms that one pizza with a 33 cm radius has a greater area than two pizzas with a 22 cm radius. Therefore, it is mathematically established that consuming one extra-large pizza results in more pizza than consuming two smaller ones.</p>



 ]]></description>
  <guid>https://giorgioluciano.github.io/posts/Fun10/pizza.html</guid>
  <pubDate>Tue, 11 Jun 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Unraveling the DnD Dice Duel Riddle with Monte Carlo Simulation in R</title>
  <dc:creator>Giorgio Luciano and ChatGPT 3.5</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Riddle01/index.html</link>
  <description><![CDATA[ 




<section id="unraveling-the-dnd-dice-duel-riddle-with-monte-carlo-simulation-in-r" class="level1">
<h1><strong>Unraveling the DnD Dice Duel Riddle with Monte Carlo Simulation in R</strong></h1>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction"><strong><em>Introduction</em></strong></h2>
<p>Embark on a journey into the realm of Dungeons &amp; Dragons as we unravel a captivating fiddle riddle involving a dice duel. Using the power of the R programming language and the Monte Carlo simulation method, we’ll simulate the outcomes of duels between two players, each armed with a bag containing six distinct DnD dice. Prepare to explore the fascinating world of probability and randomness! See the riddle posted <a href="https://open.substack.com/pub/thefiddler/p/can-you-roll-the-dungeon-masters?r=2xmwww&amp;utm_campaign=post&amp;utm_medium=web" title="Can You Roll the Dungeon Master’s Dice?">here</a> by <a href="https://thefiddler.substack.com/">Fiddler on the Proof</a></p>
<p>At a table sit two individuals, each equipped with a bag housing six DnD dice: a d4, a d6, a d8, a d10, a d12, and a d20. The challenge is to randomly select one die from each bag and roll them simultaneously. For example, if a d4 and a d12 are chosen, both players roll their respective dice, hoping for fortuitous results. Monte Carlo Simulation in R:</p>
<p>To confront this enigma, we turn to the Monte Carlo method. The following R code snippet initiates a simulation of multiple dice duels, offering a glimpse into the complexities of DnD dice outcomes.</p>
<p>we can break down the analysis into different cases:</p>
<ol type="1">
<li><p><strong>Case 1: Both players take the same type of dice.</strong></p></li>
<li><p><strong>Case 2: Both players take different types of dice (without repetition of the same combination).</strong></p></li>
</ol>
<p>We’ll generate plots for each case and then provide a summary of the results. Here’s the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># Function to simulate a single dice duel with both players taking the same type of dice</span></span>
<span id="cb1-3">simulate_same_dice_duel <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb1-4">  dice_type <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">12</span>,<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">40</span>,<span class="dv" style="color: #AD0000;">64</span>,<span class="dv" style="color: #AD0000;">80</span>,<span class="dv" style="color: #AD0000;">120</span>,<span class="dv" style="color: #AD0000;">128</span>), <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-5">  roll_player1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>dice_type, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-6">  roll_player2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>dice_type, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">c</span>(dice_type, roll_player1, dice_type, roll_player2))</span>
<span id="cb1-8">}</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;"># Function to simulate a single dice duel with both players taking different types of dice</span></span>
<span id="cb1-11">simulate_different_dice_duel <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb1-12">  dice_types <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">12</span>,<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">40</span>,<span class="dv" style="color: #AD0000;">64</span>,<span class="dv" style="color: #AD0000;">80</span>,<span class="dv" style="color: #AD0000;">120</span>,<span class="dv" style="color: #AD0000;">128</span>), <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb1-13">  roll_player1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>dice_types[<span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-14">  roll_player2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>dice_types[<span class="dv" style="color: #AD0000;">2</span>], <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-15">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">c</span>(dice_types[<span class="dv" style="color: #AD0000;">1</span>], roll_player1, dice_types[<span class="dv" style="color: #AD0000;">2</span>], roll_player2))</span>
<span id="cb1-16">}</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;"># Monte Carlo simulation for both cases</span></span>
<span id="cb1-19">num_trials <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">10000</span></span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;"># Case 1: Both players take the same type of dice</span></span>
<span id="cb1-22">same_dice_simulation_results <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">replicate</span>(num_trials, <span class="fu" style="color: #4758AB;">simulate_same_dice_duel</span>())</span>
<span id="cb1-23">same_dice_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">Player =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Player 1"</span>, <span class="st" style="color: #20794D;">"Player 2"</span>), <span class="at" style="color: #657422;">each =</span> <span class="fu" style="color: #4758AB;">ncol</span>(same_dice_simulation_results)),</span>
<span id="cb1-24">                             <span class="at" style="color: #657422;">Dice_Type =</span> <span class="fu" style="color: #4758AB;">rep</span>(same_dice_simulation_results[<span class="dv" style="color: #AD0000;">1</span>, ], <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb1-25">                             <span class="at" style="color: #657422;">Roll_Value =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">c</span>(same_dice_simulation_results[<span class="dv" style="color: #AD0000;">2</span>, ], same_dice_simulation_results[<span class="dv" style="color: #AD0000;">4</span>, ])))</span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;"># Visualize the results for Case 1 using ggplot2</span></span>
<span id="cb1-28"><span class="fu" style="color: #4758AB;">ggplot</span>(same_dice_data, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">factor</span>(Dice_Type), <span class="at" style="color: #657422;">y =</span> Roll_Value, <span class="at" style="color: #657422;">fill =</span> Player)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-29">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-30">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Case 1: Both Players Take the Same Dice ("</span>, num_trials, <span class="st" style="color: #20794D;">"trials)"</span>),</span>
<span id="cb1-31">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Dice Type"</span>,</span>
<span id="cb1-32">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Roll Value"</span>,</span>
<span id="cb1-33">       <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"Player"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-34">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Riddle01/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Case 2: Both players take different types of dice</span></span>
<span id="cb2-2">different_dice_simulation_results <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">replicate</span>(num_trials, <span class="fu" style="color: #4758AB;">simulate_different_dice_duel</span>())</span>
<span id="cb2-3">different_dice_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">Player =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Player 1"</span>, <span class="st" style="color: #20794D;">"Player 2"</span>), <span class="at" style="color: #657422;">each =</span> <span class="fu" style="color: #4758AB;">ncol</span>(different_dice_simulation_results)),</span>
<span id="cb2-4">                                  <span class="at" style="color: #657422;">Dice_Type_Player1 =</span> <span class="fu" style="color: #4758AB;">rep</span>(different_dice_simulation_results[<span class="dv" style="color: #AD0000;">1</span>, ], <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb2-5">                                  <span class="at" style="color: #657422;">Roll_Value_Player1 =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">c</span>(different_dice_simulation_results[<span class="dv" style="color: #AD0000;">2</span>, ])),</span>
<span id="cb2-6">                                  <span class="at" style="color: #657422;">Dice_Type_Player2 =</span> <span class="fu" style="color: #4758AB;">rep</span>(different_dice_simulation_results[<span class="dv" style="color: #AD0000;">3</span>, ], <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb2-7">                                  <span class="at" style="color: #657422;">Roll_Value_Player2 =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">c</span>(different_dice_simulation_results[<span class="dv" style="color: #AD0000;">4</span>, ])))</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;"># Visualize the results for Case 2 - Player 1 (Dice 4 vs. Dice 20)</span></span>
<span id="cb2-10"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">subset</span>(different_dice_data, Dice_Type_Player1 <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">20</span>)), <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">factor</span>(Dice_Type_Player2), <span class="at" style="color: #657422;">y =</span> Roll_Value_Player1)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-11">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-12">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Case 2 - Player 1: Dice 4 vs. Dice 20 ("</span>, num_trials, <span class="st" style="color: #20794D;">"trials)"</span>),</span>
<span id="cb2-13">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Dice Type Player 2"</span>,</span>
<span id="cb2-14">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Roll Value Player 1"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-15">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Riddle01/index_files/figure-html/unnamed-chunk-1-2.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Visualize the results for Case 2 - Player 2 (Dice 4 vs. Dice 20)</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">subset</span>(different_dice_data, Dice_Type_Player2 <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">20</span>)), <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">factor</span>(Dice_Type_Player1), <span class="at" style="color: #657422;">y =</span> Roll_Value_Player2)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Case 2 - Player 2: Dice 4 vs. Dice 20 ("</span>, num_trials, <span class="st" style="color: #20794D;">"trials)"</span>),</span>
<span id="cb3-5">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Dice Type Player 1"</span>,</span>
<span id="cb3-6">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Roll Value Player 2"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Riddle01/index_files/figure-html/unnamed-chunk-1-3.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Visualize the results for Case 2 - Player 1 (Dice 4 vs. Dice 12)</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">subset</span>(different_dice_data, Dice_Type_Player1 <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">12</span>)), <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">factor</span>(Dice_Type_Player2), <span class="at" style="color: #657422;">y =</span> Roll_Value_Player1)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Case 2 - Player 1: Dice 4 vs. Dice 12 ("</span>, num_trials, <span class="st" style="color: #20794D;">"trials)"</span>),</span>
<span id="cb4-5">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Dice Type Player 2"</span>,</span>
<span id="cb4-6">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Roll Value Player 1"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Riddle01/index_files/figure-html/unnamed-chunk-1-4.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Visualize the results for Case 2 - Player 2 (Dice 4 vs. Dice 12)</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">subset</span>(different_dice_data, Dice_Type_Player2 <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">12</span>)), <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">factor</span>(Dice_Type_Player1), <span class="at" style="color: #657422;">y =</span> Roll_Value_Player2)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Case 2 - Player 2: Dice 4 vs. Dice 12 ("</span>, num_trials, <span class="st" style="color: #20794D;">"trials)"</span>),</span>
<span id="cb5-5">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Dice Type Player 1"</span>,</span>
<span id="cb5-6">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Roll Value Player 2"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Riddle01/index_files/figure-html/unnamed-chunk-1-5.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Visualize the results for Case 2 - Player 2 (Dice 4 vs. Dice 128)</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">subset</span>(different_dice_data, Dice_Type_Player2 <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">128</span>)), <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">factor</span>(Dice_Type_Player1), <span class="at" style="color: #657422;">y =</span> Roll_Value_Player2)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Case 2 - Player 2: Dice 4 vs. Dice 128 ("</span>, num_trials, <span class="st" style="color: #20794D;">"trials)"</span>),</span>
<span id="cb6-5">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Dice Type Player 1"</span>,</span>
<span id="cb6-6">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Roll Value Player 2"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Riddle01/index_files/figure-html/unnamed-chunk-1-6.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Summarize the results for Case 1 (Same Dice)</span></span>
<span id="cb7-2">summary_case1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">table</span>(same_dice_data<span class="sc" style="color: #5E5E5E;">$</span>Roll_Value)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># Summarize the results for Case 2 (Different Dice)</span></span>
<span id="cb7-5">summary_case2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">table</span>(different_dice_data<span class="sc" style="color: #5E5E5E;">$</span>Roll_Value_Player1 <span class="sc" style="color: #5E5E5E;">==</span> different_dice_data<span class="sc" style="color: #5E5E5E;">$</span>Roll_Value_Player2)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;"># Display summaries</span></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;">cat</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">Summary of Case 1 - Same Dice:</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Summary of Case 1 - Same Dice:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">print</span>(summary_case1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 
1578 1522 1546 1538 1036 1080  752  779  580  548  362  394  214  228  210  227 
  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 
 228  191  230  207  103  124  126  145  115  120  113  113  135  119  140  126 
  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 
 121  139  144  118  105  107  134  132   73   69   78   81   85   97   82   92 
  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 
  90   89   83   78   66   71   76   91   87   84   75   66   85   78   79   85 
  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 
  56   52   53   46   53   63   53   35   55   58   57   47   54   48   43   71 
  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 
  27   41   26   28   33   28   31   30   34   35   32   28   32   23   26   34 
  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 
  29   35   37   27   28   25   26   23   26   28   28   24   31   26   34   35 
 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 
  33   25   21   34   31   36   25   37   12   14   10    9   15   12   14    9 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">cat</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">Summary of Case 2 - Different Dice:</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Summary of Case 2 - Different Dice:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">print</span>(summary_case2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
FALSE  TRUE 
19292   708 </code></pre>
</div>
</div>
</section>
<section id="analyzing-the-duel-results" class="level2">
<h2 class="anchored" data-anchor-id="analyzing-the-duel-results">Analyzing the Duel Results</h2>
<p>Through the marriage of R programming and Monte Carlo simulation, we’ve successfully deciphered the intricacies of the DnD dice duel riddle. Whether you’re a seasoned tabletop gamer or a data science enthusiast, this approach serves as a versatile tool for exploring and comprehending complex scenarios governed by chance. As you embark on your own coding adventures, may the rolls be ever in your favor! Happy coding!</p>


</section>
</section>

 ]]></description>
  <category>R</category>
  <category>Fun</category>
  <guid>https://giorgioluciano.github.io/posts/Riddle01/index.html</guid>
  <pubDate>Sat, 13 Jan 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring the Frequency of Number 0 in a Year of Roulette Spins: A Simulation in R</title>
  <dc:creator>Giorgio Luciano and ChatGPT</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Fun09/index.html</link>
  <description><![CDATA[ 




<p>In this blog post, we’ll delve into the realm of casino roulette and use R simulations to estimate the frequency of the number 0 appearing over the span of a year (40 spins per hour x 24 hours x 365 days) . Roulette, a classic casino game, is known for its unpredictability, making it an interesting subject for probability exploration.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Function to simulate roulette spins</span></span>
<span id="cb1-2">simulate_roulette_spins <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(n) {</span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">42</span>)  <span class="co" style="color: #5E5E5E;"># Set seed for reproducibility</span></span>
<span id="cb1-4">  numbers <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">0</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">36</span>, n, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">return</span>(numbers)</span>
<span id="cb1-6">}</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Simulate roulette spins for different scenarios</span></span>
<span id="cb1-9">spins_1000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simulate_roulette_spins</span>(<span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb1-10">spins_10000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simulate_roulette_spins</span>(<span class="dv" style="color: #AD0000;">10000</span>)</span>
<span id="cb1-11">spins_100000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simulate_roulette_spins</span>(<span class="dv" style="color: #AD0000;">100000</span>)</span>
<span id="cb1-12">spins_1_year <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simulate_roulette_spins</span>(<span class="dv" style="color: #AD0000;">365</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">24</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">40</span>)  <span class="co" style="color: #5E5E5E;"># One year of spins</span></span></code></pre></div>
</div>
<p>Moving on, let’s analyze the frequency of the number 0 in each simulation. We’ll count the occurrences to gain insights into its distribution.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Function to count occurrences of number 0</span></span>
<span id="cb2-2">count_zero_occurrences <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(spins) {</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">sum</span>(spins <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb2-4">}</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># Count occurrences for different scenarios</span></span>
<span id="cb2-7">zero_count_1000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">count_zero_occurrences</span>(spins_1000)</span>
<span id="cb2-8">zero_count_10000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">count_zero_occurrences</span>(spins_10000)</span>
<span id="cb2-9">zero_count_100000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">count_zero_occurrences</span>(spins_100000)</span>
<span id="cb2-10">zero_count_1_year <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">count_zero_occurrences</span>(spins_1_year)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Create a bar plot for zero occurrences</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb3-3"></span>
<span id="cb3-4">data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">Scenario =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"1000 spins"</span>, <span class="st" style="color: #20794D;">"10000 spins"</span>, <span class="st" style="color: #20794D;">"100000 spins"</span>, <span class="st" style="color: #20794D;">"1 year"</span>),</span>
<span id="cb3-5">                   <span class="at" style="color: #657422;">Zero_Count =</span> <span class="fu" style="color: #4758AB;">c</span>(zero_count_1000, zero_count_10000, zero_count_100000, zero_count_1_year))</span>
<span id="cb3-6"></span>
<span id="cb3-7">plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(data, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Scenario, <span class="at" style="color: #657422;">y =</span> Zero_Count)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">stat =</span> <span class="st" style="color: #20794D;">"identity"</span>, <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"skyblue"</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"black"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Frequency of Number 0 in Roulette Spins"</span>,</span>
<span id="cb3-10">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Simulation Scenario"</span>,</span>
<span id="cb3-11">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Number of 0 occurrences"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-12">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="fu" style="color: #4758AB;">print</span>(plot)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Fun09/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>After simulating roulette spins and analyzing the frequency of the number 0, we’ll gain valuable insights into the likelihood of encountering this specific outcome over different scenarios.</p>
<p>Exploring the probability of specific outcomes in casino games through simulation provides a fascinating glimpse into the world of chance. Whether you’re interested in statistics, data science, or simply curious, these simulations offer an engaging way to understand the dynamics of games of chance.</p>
<p>Feel free to experiment with different parameters, such as the number of spins or the distribution of numbers on the roulette wheel, and observe how the results change. Happy exploring!</p>
<p>Note: a fast search with bing about how many time does a roulette spin in a vegas casino : Explore</p>
<p><a href="https://www.casinoonline.tf/how-many-times-does-a-roulette-wheel-spin-in-an-hour/">The average roulette wheel spins around <strong>40-50 times per hour</strong> when playing roulette at a casino in Las Vegas<sup>1</sup></a>. <a href="https://www.casinoonline.tf/how-many-times-does-a-roulette-wheel-spin-in-an-hour/">However, this can vary depending on the type of wheel, the number of players at the table, and how quickly bets are placed<sup>1</sup></a>. If you want to know more about roulette and the game’s current standing around the world, you can check out this <a href="https://thecasinowizard.com/news/roulette-facts-figures-and-statistics/">guide which provides a list of the most relevant roulette wheel odds and stats about the game, where you’ll learn everything about one of the world’s most popular casino games and how some odds work in your favor<sup>2</sup></a>.</p>



 ]]></description>
  <category>R</category>
  <category>Fun</category>
  <guid>https://giorgioluciano.github.io/posts/Fun09/index.html</guid>
  <pubDate>Thu, 11 Jan 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring Coin Flip Sequences with Simulation in R</title>
  <dc:creator>Giorgio Luciano and ChatGPT</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Fun04/index.html</link>
  <description><![CDATA[ 




<ol type="1">
<li><p>Dive into the world of coin flip sequences using R simulations. Objective: Understand the probabilities of consecutive sequences of heads or tails. Simulating Coin Flips</p></li>
<li><p>Utilize R to simulate coin flips with varying numbers (100, 1000, 10000, 100000) for experimentation. simulate_tosses function generates sequences of “Heads” and “Tails.” Analyzing Consecutive Sequences</p></li>
<li><p>Define count_consecutive_sequences function to analyze lengths of consecutive sequences. Obtain counts for different scenarios: 100 tosses, 1000 tosses, 10000 tosses, and 100000 tosses. Visualizing the Results</p></li>
<li><p>Use ggplot2 to create line plots (create_plot function) illustrating consecutive sequence counts. Arrange plots with gridExtra to compare scenarios side by side. Results and Insights</p></li>
<li><p>Longer consecutive sequences are more likely with a larger number of tosses. Simulation provides valuable insights into the probability distribution of sequences. Conclusion</p></li>
<li><p>Probability exploration through simulation is a powerful tool. Whether a statistician, data scientist, or curious individual, simulations offer insights into chance. Encouragement to experiment with parameters and observe changes in results.</p></li>
</ol>
<p>In this blog post, we will dive into the fascinating world of coin flip sequences. Leveraging the capabilities of R, we will conduct simulations to gain insights into the probabilities of consecutive sequences of heads or tails.</p>
<p>Let’s kick things off by simulating coin flips using R. We’ll conduct experiments with varying numbers of flips to observe how the results evolve.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Function to simulate coin tosses</span></span>
<span id="cb1-2">simulate_tosses <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(n) {</span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">42</span>)  <span class="co" style="color: #5E5E5E;"># Set seed for reproducibility</span></span>
<span id="cb1-4">  flips <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Heads"</span>, <span class="st" style="color: #20794D;">"Tails"</span>), n, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">return</span>(flips)</span>
<span id="cb1-6">}</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Simulate coin flips for different scenarios</span></span>
<span id="cb1-9">flips_100 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simulate_tosses</span>(<span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb1-10">flips_1000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simulate_tosses</span>(<span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb1-11">flips_10000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simulate_tosses</span>(<span class="dv" style="color: #AD0000;">10000</span>)</span>
<span id="cb1-12">flips_100000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simulate_tosses</span>(<span class="dv" style="color: #AD0000;">100000</span>)</span></code></pre></div>
</div>
<p>Moving on, we’ll analyze the consecutive sequences of heads or tails in each simulation. We’ll count the length of these sequences to gain insights into their distribution.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Function to count consecutive sequences</span></span>
<span id="cb2-2">count_consecutive_sequences <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(flips) {</span>
<span id="cb2-3">  count <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="fu" style="color: #4758AB;">length</span>(flips))</span>
<span id="cb2-4">  counter <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-5"></span>
<span id="cb2-6">  <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(flips)) {</span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;">if</span> (flips[i] <span class="sc" style="color: #5E5E5E;">==</span> flips[i<span class="dv" style="color: #AD0000;">-1</span>]) {</span>
<span id="cb2-8">      counter <span class="ot" style="color: #003B4F;">&lt;-</span> counter <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-9">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb2-10">      counter <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-11">    }</span>
<span id="cb2-12">    count[i] <span class="ot" style="color: #003B4F;">&lt;-</span> counter</span>
<span id="cb2-13">  }</span>
<span id="cb2-14"></span>
<span id="cb2-15">  <span class="fu" style="color: #4758AB;">return</span>(count)</span>
<span id="cb2-16">}</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;"># Function to create a plot for consecutive sequences</span></span>
<span id="cb2-19">create_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(consecutive_counts, n) {</span>
<span id="cb2-20">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">Launch =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(consecutive_counts), <span class="at" style="color: #657422;">Consecutive =</span> consecutive_counts)</span>
<span id="cb2-21">  </span>
<span id="cb2-22">  <span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb2-23">  </span>
<span id="cb2-24">  plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(data, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Launch, <span class="at" style="color: #657422;">y =</span> Consecutive)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-25">    <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-26">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Consecutive Sequences -"</span>, n, <span class="st" style="color: #20794D;">"Tosses"</span>),</span>
<span id="cb2-27">         <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Toss Number"</span>,</span>
<span id="cb2-28">         <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Consecutive Count"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-29">    <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span>
<span id="cb2-30">  </span>
<span id="cb2-31">  <span class="fu" style="color: #4758AB;">return</span>(plot)</span>
<span id="cb2-32">}</span>
<span id="cb2-33"></span>
<span id="cb2-34"><span class="co" style="color: #5E5E5E;"># Analyze consecutive sequences for different scenarios</span></span>
<span id="cb2-35">consecutive_counts_100 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">count_consecutive_sequences</span>(flips_100)</span>
<span id="cb2-36">consecutive_counts_1000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">count_consecutive_sequences</span>(flips_1000)</span>
<span id="cb2-37">consecutive_counts_10000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">count_consecutive_sequences</span>(flips_10000)</span>
<span id="cb2-38">consecutive_counts_100000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">count_consecutive_sequences</span>(flips_100000)</span></code></pre></div>
</div>
<p>Now, let’s create visualizations to better understand the distribution of consecutive sequences. We’ll use the ggplot2 library to craft insightful graphs and gridExtra to arrange them together.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Create plots</span></span>
<span id="cb3-2">plot_100 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">create_plot</span>(consecutive_counts_100, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb3-3">plot_1000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">create_plot</span>(consecutive_counts_1000, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb3-4">plot_10000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">create_plot</span>(consecutive_counts_10000, <span class="dv" style="color: #AD0000;">10000</span>)</span>
<span id="cb3-5">plot_100000 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">create_plot</span>(consecutive_counts_100000, <span class="dv" style="color: #AD0000;">100000</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;"># Use gridExtra to arrange the plots</span></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;">library</span>(gridExtra)</span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;">grid.arrange</span>(plot_100, plot_1000, plot_10000, plot_100000, <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Fun04/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Function to simulate coin tosses and plot the maximum consecutive sequence</span></span>
<span id="cb4-2">simulate_and_plot_max_sequence <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(n) {</span>
<span id="cb4-3">  <span class="co" style="color: #5E5E5E;"># Simulate coin tosses</span></span>
<span id="cb4-4">  flips <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simulate_tosses</span>(n)</span>
<span id="cb4-5">  </span>
<span id="cb4-6">  <span class="co" style="color: #5E5E5E;"># Analyze consecutive sequences</span></span>
<span id="cb4-7">  consecutive_counts <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">count_consecutive_sequences</span>(flips)</span>
<span id="cb4-8">  </span>
<span id="cb4-9">  <span class="co" style="color: #5E5E5E;"># Return the maximum consecutive sequence</span></span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">max</span>(consecutive_counts))</span>
<span id="cb4-11">}</span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;"># Vector to store results</span></span>
<span id="cb4-14">max_sequences <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>()</span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;"># Perform simulations with increasing numbers of tosses</span></span>
<span id="cb4-17"><span class="cf" style="color: #003B4F;">for</span> (n_tosses <span class="cf" style="color: #003B4F;">in</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">2000</span>, <span class="dv" style="color: #AD0000;">10000</span>, <span class="dv" style="color: #AD0000;">100000</span>)) {</span>
<span id="cb4-18">  max_sequence <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simulate_and_plot_max_sequence</span>(n_tosses)</span>
<span id="cb4-19">  max_sequences <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(max_sequences, max_sequence)</span>
<span id="cb4-20">}</span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;"># Plot the results</span></span>
<span id="cb4-23"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb4-24"></span>
<span id="cb4-25">data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">Num_Tosses =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">2000</span>, <span class="dv" style="color: #AD0000;">10000</span>, <span class="dv" style="color: #AD0000;">100000</span>), <span class="at" style="color: #657422;">Max_Sequence =</span> max_sequences)</span>
<span id="cb4-26"></span>
<span id="cb4-27">plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(data, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Num_Tosses, <span class="at" style="color: #657422;">y =</span> Max_Sequence)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-28">  <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-29">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Maximum Consecutive Sequence vs. Number of Tosses"</span>,</span>
<span id="cb4-30">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Number of Tosses"</span>,</span>
<span id="cb4-31">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Max Consecutive Sequence"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-32">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span>
<span id="cb4-33"></span>
<span id="cb4-34"><span class="fu" style="color: #4758AB;">print</span>(plot)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Fun04/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>After simulating coin flips and analyzing consecutive sequences, we’ve gained valuable insights into the probability of encountering various sequences. As expected, with a larger number of flips, the likelihood of encountering longer consecutive sequences increases.</p>
<p>Conclusion Exploring probability through simulation is a powerful way to grasp the nuances of random processes. Whether you’re a statistician, data scientist, or simply curious, these simulations provide a fascinating glimpse into the world of chance.</p>
<p>Feel free to experiment with different parameters, such as the number of flips or the probability of getting heads or tails, and observe how the results change. Happy exploring!</p>



 ]]></description>
  <category>R</category>
  <category>Simulation</category>
  <guid>https://giorgioluciano.github.io/posts/Fun04/index.html</guid>
  <pubDate>Tue, 14 Nov 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring Card Shuffling: A Visual Journey</title>
  <dc:creator>Giorgio Luciano and ChatGPT</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Fun08/Card Shuffling.html</link>
  <description><![CDATA[ 




<ol type="1">
<li><p>The Faro Shuffle Unveiled: Introducing the Faro shuffle, a captivating technique that promises not only randomness but a mathematical symphony in the arrangement of cards, creating a dance that echoes with the precision of numbers.</p></li>
<li><p>Simulating the Faro Shuffle: into R code that simulates the Faro shuffle, using a function to emulate the interleaving of cards, allowing for the visualization of the ace of hearts’ position after multiple shuffles.</p></li>
<li><p>Simulation Parameters and Results:Parameters like the number of Faro shuffles to explore and the simulations to run are defined. The resulting data frame captures the positions of the ace of hearts, forming the basis for the subsequent visual representation.</p></li>
<li><p>Visual Exploration with ggplot2: The code utilizes ggplot2 to create a line plot with a ribbon, showcasing the dynamic journey of the ace of hearts through Faro shuffles. The visualization offers insights into the unpredictability introduced by this unique shuffling technique.</p></li>
</ol>
<p>This visual exploration not only provides a hands-on experience with the Faro shuffle but also invites readers to appreciate the art and science behind the mesmerizing world of card shuffling.</p>
<p>As a child, on days like today, when raindrops gently tapped against the window pane, my father, armed with a degree in economics and a love for statistics, would weave a world of numbers and cards to pass the time. His eyes would light up with enthusiasm as he shared the intricacies of card games, imparting not just the rules, but a deep appreciation for the unpredictable dance of shuffled decks.</p>
<p>Today, we embark on a visual exploration of card shuffling, delving into a captivating technique known as the Faro shuffle. Unlike conventional shuffling, the Faro shuffle promises not just randomness but a mathematical symphony that unfolds card by card, a dance that echoes with the precision of numbers.</p>
<p>In the quest to unravel the intricacies of card shuffling, we turn to the Faro shuffle, a technique that mimics the graceful dance of cards. The accompanying R code brings this technique to life, allowing us to simulate the position of the ace of hearts after multiple Faro shuffles.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Function to perform a faro shuffle on a deck of cards</span></span>
<span id="cb1-2">faro <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(deck, num_shuffles) {</span>
<span id="cb1-3">  <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_shuffles) {</span>
<span id="cb1-4">    half1 <span class="ot" style="color: #003B4F;">&lt;-</span> deck[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>(<span class="fu" style="color: #4758AB;">length</span>(deck)<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>)]</span>
<span id="cb1-5">    half2 <span class="ot" style="color: #003B4F;">&lt;-</span> deck[(<span class="fu" style="color: #4758AB;">length</span>(deck)<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)<span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(deck)]</span>
<span id="cb1-6">    deck <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>()</span>
<span id="cb1-7">    <span class="cf" style="color: #003B4F;">for</span> (j <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(half1)) {</span>
<span id="cb1-8">      deck <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(deck, half1[j], half2[j])</span>
<span id="cb1-9">    }</span>
<span id="cb1-10">  }</span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;">return</span>(deck)</span>
<span id="cb1-12">}</span></code></pre></div>
</div>
<p>Here, the <strong><code>faro</code></strong> function is defined to simulate the Faro shuffle. It takes a deck of cards (<strong><code>deck</code></strong>) and the number of shuffles to perform (<strong><code>num_shuffles</code></strong>). The function iterates through the halves of the deck, interleaving the cards to simulate the Faro shuffle. This process is repeated for the specified number of shuffles.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Install the required packages if not already installed</span></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">requireNamespace</span>(<span class="st" style="color: #20794D;">"ggplot2"</span>, <span class="at" style="color: #657422;">quietly =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)) {</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"ggplot2"</span>)</span>
<span id="cb2-4">}</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># Load the necessary packages</span></span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;"># Function to simulate the position of the ace of hearts after shuffling</span></span>
<span id="cb2-10">simulate_ace_of_hearts_position <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(num_shuffles, num_simulations) {</span>
<span id="cb2-11">  original_deck <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">52</span></span>
<span id="cb2-12">  ace_position <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">numeric</span>(num_simulations)</span>
<span id="cb2-13">  </span>
<span id="cb2-14">  <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_simulations) {</span>
<span id="cb2-15">    shuffled_deck <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">faro</span>(original_deck, num_shuffles)</span>
<span id="cb2-16">    ace_position[i] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">which</span>(shuffled_deck <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">12</span>)</span>
<span id="cb2-17">  }</span>
<span id="cb2-18">  </span>
<span id="cb2-19">  <span class="fu" style="color: #4758AB;">return</span>(ace_position)</span>
<span id="cb2-20">}</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;"># Simulation parameters</span></span>
<span id="cb2-23">num_shuffles_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">30</span>, <span class="at" style="color: #657422;">by =</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-24">num_simulations <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;"># Run the simulation</span></span>
<span id="cb2-27">ace_positions <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(num_shuffles_list, <span class="cf" style="color: #003B4F;">function</span>(num_shuffles) {</span>
<span id="cb2-28">  <span class="fu" style="color: #4758AB;">simulate_ace_of_hearts_position</span>(num_shuffles, num_simulations)</span>
<span id="cb2-29">})</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="co" style="color: #5E5E5E;"># Prepare data for the plot</span></span>
<span id="cb2-32">df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb2-33">  <span class="at" style="color: #657422;">Num_Shuffles =</span> <span class="fu" style="color: #4758AB;">rep</span>(num_shuffles_list, <span class="at" style="color: #657422;">each =</span> num_simulations),</span>
<span id="cb2-34">  <span class="at" style="color: #657422;">Ace_Position =</span> <span class="fu" style="color: #4758AB;">unlist</span>(ace_positions)</span>
<span id="cb2-35">)</span>
<span id="cb2-36"></span>
<span id="cb2-37"><span class="co" style="color: #5E5E5E;"># Create a line plot with a ribbon in ggplot2</span></span>
<span id="cb2-38"><span class="fu" style="color: #4758AB;">ggplot</span>(df, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Num_Shuffles, <span class="at" style="color: #657422;">y =</span> Ace_Position)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-39">  <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-40">  <span class="fu" style="color: #4758AB;">geom_ribbon</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin =</span> Ace_Position <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">ymax =</span> Ace_Position <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">5</span>), <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"lightblue"</span>, <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-41">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> Ace_Position), <span class="at" style="color: #657422;">vjust =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-42">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Ace of Hearts Position relative to Initial Position"</span>,</span>
<span id="cb2-43">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Number of Shuffles"</span>,</span>
<span id="cb2-44">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Ace of Hearts Position"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-45">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Fun08/Card-Shuffling_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>In the simulation parameters section, we define the number of Faro shuffles to explore (<strong><code>num_shuffles_list</code></strong>) and the number of simulations to run for each shuffle scenario (<strong><code>num_simulations</code></strong>). The resulting dataframe (’<strong>df’</strong>) contains the number of shuffles and the corresponding positions of the ace of hearts after simulation.Finallym the code utilizes ggplot2 to create a line plot with a ribbon that represents the range of possible ace of hearts positions after each Faro shuffle. The resulting visualization allows us to witness the mesmerizing journey of the ace of hearts through the rhytmic Faro shuffle.</p>
<p>Through this visual exploration, we gain insights into the inherent randomness of card shuffling. The fluctuating position of the ace of hearts highlights the complex interplay of probability and chance in card games.</p>
<p>Feel free to experiment with the provided R code, adjusting parameters and exploring different aspects of card shuffling. The visual representation serves as a captivating way to understand the nuances of this seemingly simple yet intriguing process.</p>
<p>!</p>



 ]]></description>
  <category>R</category>
  <category>fun</category>
  <category>cards</category>
  <guid>https://giorgioluciano.github.io/posts/Fun08/Card Shuffling.html</guid>
  <pubDate>Sat, 11 Nov 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>The Illusion of Luck: How the Number Zero Always Wins in the Casino</title>
  <dc:creator>Giorgio Luciano and ChatGPT</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Fun07/Illusion Of Luck.html</link>
  <description><![CDATA[ 




<ol type="1">
<li><p>Introduction:</p>
<ul>
<li>Explores the profitability of casinos and introduces a gambling paradox related to the number zero favoring the house.</li>
</ul></li>
<li><p>Roulette Dilemma and Simulating the Game:</p>
<ul>
<li><p>Describes the classic game of roulette and its subtle advantage for the house.</p></li>
<li><p>Introduces R programming for simulating roulette plays, focusing on predicting red or black outcomes.</p></li>
<li><p>Highlights the impact of the number zero on altering the game dynamics.</p></li>
</ul></li>
<li><p>play_roulette Function and Simulating Plays:</p>
<ul>
<li><p>Defines the <strong><code>play_roulette</code></strong> function to simulate roulette plays based on specified parameters.</p></li>
<li><p>Utilizes <strong><code>set.seed(123)</code></strong> for reproducibility and simulates plays both with and without a 5% house advantage.</p></li>
</ul></li>
<li><p>Comparing Results and Data Preparation:</p>
<ul>
<li><p>Compares total winnings for both scenarios using <strong><code>cat</code></strong> statements.</p></li>
<li><p>Prepares data for plotting, creating a data frame with scenarios and total winnings.</p></li>
</ul></li>
<li><p>Creating a Bar Plot, The House Edge, and Conclusion:</p>
<ul>
<li><p>Utilizes ggplot2 to create a bar plot, visually comparing total winnings for each scenario.</p></li>
<li><p>Discusses the house edge introduced by modifying payouts.</p></li>
<li><p>Concludes by emphasizing the illusion of luck in casinos, the role of zero, and why the house consistently wins.</p></li>
</ul></li>
</ol>
<p>Have you ever wondered why casinos seem to have a mysterious edge, making them consistently profitable? Let’s explore a paradox in the world of gambling, where the number zero takes center stage and helps the house always come out on top.</p>
<p>To illustrate this phenomenon, let’s simulate the game of roulette using the R programming language. We’ll focus on a simple bet: predicting whether the ball will land on red or black. In a fair game, the odds of winning such a bet would be 1 to 1. However, the introduction of the number zero alters the dynamics.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-2"></span>
<span id="cb1-3">play_roulette <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(bet, chosen_number, num_spins) {</span>
<span id="cb1-4">  roulette_numbers <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">36</span></span>
<span id="cb1-5">  results <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(roulette_numbers, num_spins, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-6">  winnings <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ifelse</span>(results <span class="sc" style="color: #5E5E5E;">==</span> chosen_number, <span class="dv" style="color: #AD0000;">36</span>, <span class="dv" style="color: #AD0000;">0</span>)  <span class="co" style="color: #5E5E5E;"># 35 to 1 payout</span></span>
<span id="cb1-7">  winnings[bet <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"red"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> results <span class="sc" style="color: #5E5E5E;">%%</span> <span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2</span>  <span class="co" style="color: #5E5E5E;"># win if the color is red</span></span>
<span id="cb1-8">  winnings[bet <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"black"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> results <span class="sc" style="color: #5E5E5E;">%%</span> <span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2</span>  <span class="co" style="color: #5E5E5E;"># win if the color is black</span></span>
<span id="cb1-9">  total_winnings <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(winnings)</span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;">return</span>(total_winnings)</span>
<span id="cb1-11">}</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># Simulating plays with and without the house advantage</span></span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)  <span class="co" style="color: #5E5E5E;"># Set the seed for reproducibility</span></span>
<span id="cb1-15">without_advantage <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">play_roulette</span>(<span class="st" style="color: #20794D;">"red"</span>, <span class="dv" style="color: #AD0000;">17</span>, <span class="dv" style="color: #AD0000;">5000</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)  <span class="co" style="color: #5E5E5E;"># Reset the same seed for comparison</span></span>
<span id="cb1-18">with_advantage <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">play_roulette</span>(<span class="st" style="color: #20794D;">"red"</span>, <span class="dv" style="color: #AD0000;">17</span>, <span class="dv" style="color: #AD0000;">5000</span>) <span class="sc" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.05</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">1000</span>  <span class="co" style="color: #5E5E5E;"># 5% house advantage</span></span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;"># Comparing results</span></span>
<span id="cb1-21"><span class="fu" style="color: #4758AB;">cat</span>(<span class="st" style="color: #20794D;">"Without the house advantage: "</span>, without_advantage, <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Without the house advantage:  10538 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">cat</span>(<span class="st" style="color: #20794D;">"With the house advantage: "</span>, with_advantage, <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>With the house advantage:  10488 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Data for plotting</span></span>
<span id="cb5-2">data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb5-3">  <span class="at" style="color: #657422;">Scenario =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Without Advantage"</span>, <span class="st" style="color: #20794D;">"With Advantage"</span>),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;">Total_Winnings =</span> <span class="fu" style="color: #4758AB;">c</span>(without_advantage, with_advantage)</span>
<span id="cb5-5">)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;"># Create a bar plot</span></span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;">ggplot</span>(data, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Scenario, <span class="at" style="color: #657422;">y =</span> Total_Winnings, <span class="at" style="color: #657422;">fill =</span> Scenario)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">stat =</span> <span class="st" style="color: #20794D;">"identity"</span>, <span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">"dodge"</span>,<span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"lightblue"</span>, <span class="st" style="color: #20794D;">"papayawhip"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Roulette Simulation: Comparing Outcomes"</span>,</span>
<span id="cb5-11">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Scenario"</span>,</span>
<span id="cb5-12">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Total Winnings"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-13">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Fun07/Illusion-Of-Luck_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<pre><code>-   This function simulates playing roulette based on specified parameters.

-   It generates random roulette numbers for a given number of spins.

-   Calculates winnings based on the chosen number and adjusts for bets on red or black, considering a 5% house advantage.


-   The code uses **`set.seed(123)`** to ensure reproducibility in random number generation.

-   It simulates roulette plays both with and without a house advantage (5% reduction in winnings for the scenario with the house advantage).


-   The **`cat`** statements print the total winnings for each scenario, allowing a direct comparison of outcomes.


-   Creates a data frame (**`data`**) containing scenarios ("Without Advantage" and "With Advantage") and their corresponding total winnings.


-   Utilizes ggplot2 to generate a bar plot.

-   **`geom_bar`** represents the data as bars, positioned side by side (**`position = "dodge"`**).

-   The plot is customized with a minimal theme, a title ("Roulette Simulation: Comparing Outcomes"), and axis labels ("Scenario" and "Total Winnings").

-   Different colors ("lightblue" and "papayawhip") are assigned to each scenario for clarity.</code></pre>
<p>In our simulation, we introduced a slight modification to the payouts, reducing them just enough to create a 5% advantage for the house. This mirrors the real-world scenario where the presence of zero in roulette gives the casino an edge.</p>
<p>Running our simulation both with and without the house advantage reveals a stark contrast. The casino consistently comes out ahead in the long run, showcasing how the number zero plays a crucial role in tipping the odds in favor of the house.</p>
<p>The illusion of luck in casinos often stems from subtle yet significant factors, such as the presence of zero in games like roulette. Understanding these nuances can provide valuable insights into the mechanics of gambling and why, ultimately, the house always wins.</p>
<p>As you ponder the next spin of the roulette wheel, remember that behind the excitement lies a carefully crafted system where even the seemingly neutral zero plays a pivotal role in ensuring the casino’s enduring success.</p>



 ]]></description>
  <category>R</category>
  <category>fun</category>
  <guid>https://giorgioluciano.github.io/posts/Fun07/Illusion Of Luck.html</guid>
  <pubDate>Sat, 11 Nov 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Central Limit Theorem with Dice Rolls</title>
  <dc:creator>Giorgio Luciano and ChatGPT</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Fun02/Dice rolls in shiny.html</link>
  <description><![CDATA[ 




<ol type="1">
<li><p>Dice rolls offer a fascinating insight into probability, especially when it comes to the sum of multiple dice rolls.</p></li>
<li><p>The Central Limit Theorem states that as the number of dice rolls increases, the distribution of sums approaches the Gaussian distribution.</p></li>
<li><p>In this blog post, we explore this intriguing concept, conduct real-world dice rolls, and use R to visualize the transformation from dice sums to Gaussian distribution.</p></li>
</ol>
<p>Dice rolling is a pastime enjoyed by many, whether in board games or games of chance. But have you ever wondered how the sum of multiple dice rolls behaves when you roll them repeatedly? In this blog post, we embark on a journey into the world of dice rolls and the fascinating Central Limit Theorem. We’ll uncover how the sum of dice rolls can transform into a Gaussian distribution as the number of rolls increases.</p>
<p>To fully grasp how the sum of dice rolls approaches a Gaussian distribution, let’s start with an overview of dice rolls. Imagine rolling a standard six-sided die, the kind commonly found in board games. Each roll yields a number between 1 and 6, with each outcome equally likely at 1/6.</p>
<p>Now, what happens when we roll two dice and sum the results? In this scenario, the range of possible sums expands. You could obtain a sum of 2 (when both dice show 1) or a sum of 12 (when both dice display 6), with all possible combinations in between. For instance, you could achieve a sum of 7 when one die shows 3 and the other shows 4, or a sum of 4 when one die shows 2 and the other shows 2.</p>
<p>Visualizing the sum of two dice rolls can be done using a bar chart. Notably, there are many more possible combinations resulting in a sum of 7 compared to combinations yielding sums of 2 or 12. This creates a triangular distribution, with a central peak at the most likely sum (in the case of two dice, that’s 7) and tails tapering off as you move away from the peak.</p>
<p>However, this triangular distribution will change as we increase the number of dice rolled and the total number of rolls. By continuing with our simulation, we will witness how this distribution transforms into a Gaussian distribution as we increase the value of n, as predicted by the Central Limit Theorem.</p>
<p>Let’s see the theory in action. We’ll use R to simulate multiple dice rolls and visualize how the distribution changes with an increasing value of n.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Load the necessary library</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># Number of dice rolls and number of dice</span></span>
<span id="cb1-5">n_rolls <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">10000</span></span>
<span id="cb1-6">n_dice <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>,<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">50</span>, <span class="dv" style="color: #AD0000;">100</span>)  <span class="co" style="color: #5E5E5E;"># You can add more values</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Function to simulate dice rolls and calculate the sum</span></span>
<span id="cb1-9">simulate_dice_rolls <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(n_rolls, n_dice) {</span>
<span id="cb1-10">  results <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">replicate</span>(n_rolls, <span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>, n_dice, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)))</span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;">return</span>(results)</span>
<span id="cb1-12">}</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;"># Simulate dice rolls for various values of n_dice</span></span>
<span id="cb1-15">results_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(n_dice, <span class="cf" style="color: #003B4F;">function</span>(n) <span class="fu" style="color: #4758AB;">simulate_dice_rolls</span>(n_rolls, n))</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># Create a data frame to store the results</span></span>
<span id="cb1-18">results_df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">N_Dice =</span> <span class="fu" style="color: #4758AB;">rep</span>(n_dice, <span class="at" style="color: #657422;">each =</span> n_rolls), <span class="at" style="color: #657422;">Sum =</span> <span class="fu" style="color: #4758AB;">unlist</span>(results_list))</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;"># Create a histogram to visualize the distributions</span></span>
<span id="cb1-21">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(results_df, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Sum)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-22">  <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="at" style="color: #657422;">binwidth =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"lightblue"</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"black"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-23">  <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;">~</span>N_Dice, <span class="at" style="color: #657422;">scales =</span> <span class="st" style="color: #20794D;">"free"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-24">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Sum of Dice Rolls vs. Number of Dice"</span>,</span>
<span id="cb1-25">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Sum of Dice Rolls"</span>,</span>
<span id="cb1-26">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Frequency"</span>)</span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="fu" style="color: #4758AB;">print</span>(p)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Fun02/Dice-rolls-in-shiny_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>In conclusion, the Central Limit Theorem offers an intriguing insight into the behavior of dice rolls. As we roll dice more and more times and sum the results, the distribution of the sums converges towards a Gaussian distribution, defying the original distribution of the dice rolls. This exemplifies the power and predictability of probability theory.</p>



 ]]></description>
  <category>R</category>
  <category>fun</category>
  <category>Dice</category>
  <guid>https://giorgioluciano.github.io/posts/Fun02/Dice rolls in shiny.html</guid>
  <pubDate>Wed, 11 Oct 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Monty Hall simulation</title>
  <dc:creator>Giorgio Luciano and ChatGPT</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Fun01/Monty Hall.html</link>
  <description><![CDATA[ 




<ol type="1">
<li>The Monty Hall problem, a famous probability puzzle, is introduced.</li>
<li>The scenario involves a game show contestant choosing one door out of three, with one hiding a car and the others concealing goats.</li>
<li>The host, Monty Hall, who knows what’s behind each door, opens one of the remaining two doors to reveal a goat.</li>
<li>The contestant must decide whether to stick with their initial choice or switch to the unopened door to maximize their chances of winning the car.</li>
<li>Using R, a simulation with 10,000 scenarios is conducted, revealing that the win percentage is typically higher when switching doors in the Monty Hall problem.</li>
</ol>
<p>The Monty Hall problem is a famous probability puzzle. In this scenario, a contestant on a game show is presented with three doors. Behind one door, there is a car, while behind the other two, there are goats. The contestant chooses one door, and then the host, Monty Hall, who knows what is behind each door, opens one of the remaining two doors to reveal a goat.</p>
<p>The contestant is then faced with a choice: stick with their initial choice or switch to the other unopened door. What should the contestant do to maximize their chances of winning the car?</p>
<p>Simulation in R Let’s use R to simulate this problem and analyze the results.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Set the number of simulations</span></span>
<span id="cb1-2">num_simulations <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">10000</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># Initialize variables to keep track of wins when switching and staying</span></span>
<span id="cb1-5">switch_wins <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-6">stay_wins <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Perform the simulations</span></span>
<span id="cb1-9"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_simulations) {</span>
<span id="cb1-10">  <span class="co" style="color: #5E5E5E;"># Create three doors with one car and two goats</span></span>
<span id="cb1-11">  doors <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"car"</span>, <span class="st" style="color: #20794D;">"goat"</span>, <span class="st" style="color: #20794D;">"goat"</span>))</span>
<span id="cb1-12"></span>
<span id="cb1-13">  <span class="co" style="color: #5E5E5E;"># Player's initial choice</span></span>
<span id="cb1-14">  player_choice <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-15"></span>
<span id="cb1-16">  <span class="co" style="color: #5E5E5E;"># Monty Hall reveals a goat behind one of the unchosen doors</span></span>
<span id="cb1-17">  monty_reveals <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">which</span>(doors[<span class="sc" style="color: #5E5E5E;">-</span>player_choice] <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"goat"</span>)</span>
<span id="cb1-18">  monty_reveals <span class="ot" style="color: #003B4F;">&lt;-</span> monty_reveals[<span class="dv" style="color: #AD0000;">1</span>]  <span class="co" style="color: #5E5E5E;"># Monty reveals the first goat he encounters</span></span>
<span id="cb1-19"></span>
<span id="cb1-20">  <span class="co" style="color: #5E5E5E;"># Determine the other unchosen door</span></span>
<span id="cb1-21">  other_door <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">setdiff</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="fu" style="color: #4758AB;">c</span>(player_choice, monty_reveals))</span>
<span id="cb1-22"></span>
<span id="cb1-23">  <span class="co" style="color: #5E5E5E;"># Simulate switching doors</span></span>
<span id="cb1-24">  switch_choice <span class="ot" style="color: #003B4F;">&lt;-</span> other_door[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb1-25"></span>
<span id="cb1-26">  <span class="co" style="color: #5E5E5E;"># Check if the player wins when switching</span></span>
<span id="cb1-27">  <span class="cf" style="color: #003B4F;">if</span> (doors[switch_choice] <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"car"</span>) {</span>
<span id="cb1-28">    switch_wins <span class="ot" style="color: #003B4F;">&lt;-</span> switch_wins <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-29">  }</span>
<span id="cb1-30"></span>
<span id="cb1-31">  <span class="co" style="color: #5E5E5E;"># Check if the player wins when staying</span></span>
<span id="cb1-32">  <span class="cf" style="color: #003B4F;">if</span> (doors[player_choice] <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"car"</span>) {</span>
<span id="cb1-33">    stay_wins <span class="ot" style="color: #003B4F;">&lt;-</span> stay_wins <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-34">  }</span>
<span id="cb1-35">}</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="co" style="color: #5E5E5E;"># Calculate win percentages</span></span>
<span id="cb1-38">switch_win_percent <span class="ot" style="color: #003B4F;">&lt;-</span> (switch_wins <span class="sc" style="color: #5E5E5E;">/</span> num_simulations) <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb1-39">stay_win_percent <span class="ot" style="color: #003B4F;">&lt;-</span> (stay_wins <span class="sc" style="color: #5E5E5E;">/</span> num_simulations) <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span></span></code></pre></div>
</div>
<p>Now, let’s create a more visually appealing plot to display the results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(ggsci)</span>
<span id="cb2-3">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">Strategy =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Switch"</span>, <span class="st" style="color: #20794D;">"Stay"</span>), <span class="at" style="color: #657422;">Win_Percentage =</span> <span class="fu" style="color: #4758AB;">c</span>(switch_win_percent, stay_win_percent)), <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Strategy, <span class="at" style="color: #657422;">y =</span> Win_Percentage)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">stat =</span> <span class="st" style="color: #20794D;">"identity"</span>, <span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"lightblue"</span>, <span class="st" style="color: #20794D;">"papayawhip"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Win Percentage in Monty Hall Problem"</span>,</span>
<span id="cb2-6">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Strategy"</span>,</span>
<span id="cb2-7">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Win Percentage (%)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;">print</span>(p)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Fun01/Monty-Hall_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>In this simulation, we ran 10,000 scenarios of the Monty Hall problem and recorded the results. As the bar plot illustrates, the win percentage is typically higher when switching doors compared to staying with the initial choice.</p>
<p><span class="citation" data-cites="22ce6dd2-8ba7-35d9-b0f7-0f2d89e5d2e3">(Dickey et al. 1975)</span></p>




<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-22ce6dd2-8ba7-35d9-b0f7-0f2d89e5d2e3" class="csl-entry">
Dickey, James, N. T. Gridgeman, M. C. S. Kingsley, I. J. Good, James E. Carlson, Daniel Gianola, Michael H. Kutner, and Steve Selvin. 1975. <span>“Letters to the Editor.”</span> <em>The American Statistician</em> 29 (3): 131–34. <a href="http://www.jstor.org/stable/2683443">http://www.jstor.org/stable/2683443</a>.
</div>
</div></section></div> ]]></description>
  <category>R</category>
  <category>fun</category>
  <category>Monty Hall problem</category>
  <guid>https://giorgioluciano.github.io/posts/Fun01/Monty Hall.html</guid>
  <pubDate>Wed, 11 Oct 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Anscombe’s Quartet</title>
  <dc:creator>Giorgio Luciano</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Fun03/index.html</link>
  <description><![CDATA[ 




<ol type="1">
<li>Anscombe’s Quartet comprises four datasets that share nearly identical descriptive statistics but exhibit visually distinct behaviors, emphasizing the significance of data visualization.</li>
<li>This blog post delves into the calculations and visualization of Anscombe’s Quartet using R and the powerful ggplot2 library. Custom functions are also employed to generate and analyze these quartets.</li>
<li>The environment setup includes the necessary libraries such as ggplot2 for data visualization.</li>
<li>Understanding Anscombe’s Quartet: A brief overview of the quartet’s four datasets, each with its unique characteristics, is provided, underlining the importance of visual representation in data analysis.</li>
<li>Custom R code and examples are presented to generate and visualize Anscombe’s Quartet, shedding light on the importance of data visualization in revealing patterns and relationships that statistics alone may overlook.</li>
</ol>
<p>Anscombe’s Quartet, known as the “Anscombe’s Test,” consists of four datasets with very similar descriptive statistics but visually distinct characteristics. These quartets serve as an enlightening example of the importance of visualizing data before drawing conclusions.</p>
<p>In this post, we will delve into how to calculate and visualize Anscombe’s Quartet using R and the powerful ggplot2 library. We’ll also use custom functions to generate these quartets and analyze them.</p>
<p>Anscombe’s Quartet was created by the statistician Francis Anscombe in 1973 to underscore the importance of data visualization before analysis. Despite having similar statistics, these datasets exhibit significantly different visual behaviors. Let’s see how R and ggplot2 help us explore them.</p>
<p>To get started, we need to load some libraries:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(data.table)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(patchwork)</span></code></pre></div>
</div>
<p>Anscombe’s Quartet comprises four datasets, each with 11 data points. Here’s a brief overview of the quartet:</p>
<ul>
<li><p><strong>Dataset 1:</strong> A straightforward linear relationship between X and Y.</p></li>
<li><p><strong>Dataset 2:</strong> A linear relationship with an outlier.</p></li>
<li><p><strong>Dataset 3:</strong> A linear relationship with one point substantially different from the others.</p></li>
<li><p><strong>Dataset 4:</strong> A non-linear relationship.</p></li>
</ul>
<p>(see <a href="https://rpubs.com/dgrtwo/tidy-anscombe">Rpubs</a> page)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(datasets)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:data.table':

    between, first, last</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb7-2">datasets<span class="sc" style="color: #5E5E5E;">::</span>anscombe</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   x1 x2 x3 x4    y1   y2    y3    y4
1  10 10 10  8  8.04 9.14  7.46  6.58
2   8  8  8  8  6.95 8.14  6.77  5.76
3  13 13 13  8  7.58 8.74 12.74  7.71
4   9  9  9  8  8.81 8.77  7.11  8.84
5  11 11 11  8  8.33 9.26  7.81  8.47
6  14 14 14  8  9.96 8.10  8.84  7.04
7   6  6  6  8  7.24 6.13  6.08  5.25
8   4  4  4 19  4.26 3.10  5.39 12.50
9  12 12 12  8 10.84 9.13  8.15  5.56
10  7  7  7  8  4.82 7.26  6.42  7.91
11  5  5  5  8  5.68 4.74  5.73  6.89</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">summary</span>(anscombe)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       x1             x2             x3             x4           y1        
 Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  
 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  
 Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  
 Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  
 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  
 Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  
       y2              y3              y4        
 Min.   :3.100   Min.   : 5.39   Min.   : 5.250  
 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  
 Median :8.140   Median : 7.11   Median : 7.040  
 Mean   :7.501   Mean   : 7.50   Mean   : 7.501  
 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  
 Max.   :9.260   Max.   :12.74   Max.   :12.500  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">anscombe_tidy <span class="ot" style="color: #003B4F;">&lt;-</span> anscombe <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">observation =</span> <span class="fu" style="color: #4758AB;">seq_len</span>(<span class="fu" style="color: #4758AB;">n</span>())) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;">gather</span>(key, value, <span class="sc" style="color: #5E5E5E;">-</span>observation) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;">separate</span>(key, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"variable"</span>, <span class="st" style="color: #20794D;">"set"</span>), <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">convert =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">set =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"I"</span>, <span class="st" style="color: #20794D;">"II"</span>, <span class="st" style="color: #20794D;">"III"</span>, <span class="st" style="color: #20794D;">"IV"</span>)[set]) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-6">    <span class="fu" style="color: #4758AB;">spread</span>(variable, value)</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="fu" style="color: #4758AB;">head</span>(anscombe_tidy)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  observation set  x    y
1           1   I 10 8.04
2           1  II 10 9.14
3           1 III 10 7.46
4           1  IV  8 6.58
5           2   I  8 6.95
6           2  II  8 8.14</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">ggplot</span>(anscombe_tidy, <span class="fu" style="color: #4758AB;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-2">    <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-3">    <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;">~</span> set) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-4">    <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"lm"</span>, <span class="at" style="color: #657422;">se =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Fun03/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Now, let’s integrate your custom R code and examples to generate and visualize Anscombe’s Quartet:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">library</span>(vtable)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: kableExtra</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'kableExtra'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:dplyr':

    group_rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">library</span>(kableExtra)</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;">library</span>(patchwork)</span>
<span id="cb19-3"></span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;"># Note: Function to generate Anscombe's Quartet datasets for x2 we need a trick that can be also improved but for now as a brutal approx works</span></span>
<span id="cb19-6"></span>
<span id="cb19-7"></span>
<span id="cb19-8">plotreg <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(df) {</span>
<span id="cb19-9">  formula <span class="ot" style="color: #003B4F;">&lt;-</span> y <span class="sc" style="color: #5E5E5E;">~</span> x</span>
<span id="cb19-10">  </span>
<span id="cb19-11">  <span class="fu" style="color: #4758AB;">ggplot</span>(df, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x, <span class="at" style="color: #657422;">y =</span> y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-12">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-13">    <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"lm"</span>, <span class="at" style="color: #657422;">formula =</span> formula, <span class="at" style="color: #657422;">se =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-14">    <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #657422;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">19</span>), <span class="at" style="color: #657422;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">14</span>)) <span class="sc" style="color: #5E5E5E;">+</span>  <span class="co" style="color: #5E5E5E;"># Imposta i limiti di x e y</span></span>
<span id="cb19-15">    <span class="fu" style="color: #4758AB;">theme_light</span>(<span class="at" style="color: #657422;">base_size =</span> <span class="dv" style="color: #AD0000;">10</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-16">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"none"</span>)</span>
<span id="cb19-17">}</span>
<span id="cb19-18"></span>
<span id="cb19-19">generate_noisy_points <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, y, <span class="at" style="color: #657422;">noise_level =</span> <span class="fl" style="color: #AD0000;">0.1</span>) {</span>
<span id="cb19-20">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(x)</span>
<span id="cb19-21">  </span>
<span id="cb19-22">  <span class="co" style="color: #5E5E5E;"># Generate random noise for x and y separately</span></span>
<span id="cb19-23">  noise_x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, <span class="at" style="color: #657422;">mean =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">sd =</span> noise_level)</span>
<span id="cb19-24">  noise_y <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, <span class="at" style="color: #657422;">mean =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">sd =</span> noise_level)</span>
<span id="cb19-25">  </span>
<span id="cb19-26">  <span class="co" style="color: #5E5E5E;"># Ensure that the sum of noise on x and y is approximately zero</span></span>
<span id="cb19-27">  noise_x <span class="ot" style="color: #003B4F;">&lt;-</span> noise_x <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">mean</span>(noise_x)</span>
<span id="cb19-28">  noise_y <span class="ot" style="color: #003B4F;">&lt;-</span> noise_y <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">mean</span>(noise_y)</span>
<span id="cb19-29">  </span>
<span id="cb19-30">  <span class="co" style="color: #5E5E5E;"># Add noise to the original data</span></span>
<span id="cb19-31">  x_noisy <span class="ot" style="color: #003B4F;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;">+</span> noise_x</span>
<span id="cb19-32">  y_noisy <span class="ot" style="color: #003B4F;">&lt;-</span> y <span class="sc" style="color: #5E5E5E;">+</span> noise_y</span>
<span id="cb19-33">  </span>
<span id="cb19-34">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x =</span> x_noisy, <span class="at" style="color: #657422;">y =</span> y_noisy))</span>
<span id="cb19-35">}</span>
<span id="cb19-36"></span>
<span id="cb19-37"><span class="co" style="color: #5E5E5E;"># Function to generate approximated points with an option to add noise</span></span>
<span id="cb19-38">generate_approximated_points <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(n, x, y, <span class="at" style="color: #657422;">noise_level =</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb19-39">  <span class="co" style="color: #5E5E5E;"># Create a new interpolation based on the original data</span></span>
<span id="cb19-40">  interpolated_values <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">approx</span>(x, y, <span class="at" style="color: #657422;">xout =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #657422;">length.out =</span> n))</span>
<span id="cb19-41">  </span>
<span id="cb19-42">  <span class="co" style="color: #5E5E5E;"># Extract the interpolated points</span></span>
<span id="cb19-43">  x_interp <span class="ot" style="color: #003B4F;">&lt;-</span> interpolated_values<span class="sc" style="color: #5E5E5E;">$</span>x</span>
<span id="cb19-44">  y_interp <span class="ot" style="color: #003B4F;">&lt;-</span> interpolated_values<span class="sc" style="color: #5E5E5E;">$</span>y</span>
<span id="cb19-45">  </span>
<span id="cb19-46">  <span class="co" style="color: #5E5E5E;"># Add noise if needed</span></span>
<span id="cb19-47">  <span class="cf" style="color: #003B4F;">if</span> (noise_level <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb19-48">    noise <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, <span class="at" style="color: #657422;">mean =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">sd =</span> noise_level)</span>
<span id="cb19-49">    x_interp <span class="ot" style="color: #003B4F;">&lt;-</span> x_interp <span class="sc" style="color: #5E5E5E;">+</span> noise</span>
<span id="cb19-50">    y_interp <span class="ot" style="color: #003B4F;">&lt;-</span> y_interp <span class="sc" style="color: #5E5E5E;">+</span> noise</span>
<span id="cb19-51">  }</span>
<span id="cb19-52">  </span>
<span id="cb19-53">  <span class="co" style="color: #5E5E5E;"># Return the approximated points</span></span>
<span id="cb19-54">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x =</span> x_interp, <span class="at" style="color: #657422;">y =</span> y_interp))</span>
<span id="cb19-55">}</span>
<span id="cb19-56"></span>
<span id="cb19-57"></span>
<span id="cb19-58">multians <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(<span class="at" style="color: #657422;">npoints =</span> <span class="dv" style="color: #AD0000;">11</span>, anscombe) {</span>
<span id="cb19-59">  x1 <span class="ot" style="color: #003B4F;">&lt;-</span> anscombe<span class="sc" style="color: #5E5E5E;">$</span>x1</span>
<span id="cb19-60">  x2 <span class="ot" style="color: #003B4F;">&lt;-</span> anscombe<span class="sc" style="color: #5E5E5E;">$</span>x2</span>
<span id="cb19-61">  x3 <span class="ot" style="color: #003B4F;">&lt;-</span> anscombe<span class="sc" style="color: #5E5E5E;">$</span>x3</span>
<span id="cb19-62">  x4 <span class="ot" style="color: #003B4F;">&lt;-</span> anscombe<span class="sc" style="color: #5E5E5E;">$</span>x4</span>
<span id="cb19-63">  y1 <span class="ot" style="color: #003B4F;">&lt;-</span> anscombe<span class="sc" style="color: #5E5E5E;">$</span>y1</span>
<span id="cb19-64">  y2 <span class="ot" style="color: #003B4F;">&lt;-</span> anscombe<span class="sc" style="color: #5E5E5E;">$</span>y2</span>
<span id="cb19-65">  y3 <span class="ot" style="color: #003B4F;">&lt;-</span> anscombe<span class="sc" style="color: #5E5E5E;">$</span>y3</span>
<span id="cb19-66">  y4 <span class="ot" style="color: #003B4F;">&lt;-</span> anscombe<span class="sc" style="color: #5E5E5E;">$</span>y4</span>
<span id="cb19-67"></span>
<span id="cb19-68">  <span class="do" style="color: #5E5E5E;
font-style: italic;">## Generate Quartet 1 ##</span></span>
<span id="cb19-69">  x_selected <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(x1[<span class="dv" style="color: #AD0000;">2</span>], x1[<span class="dv" style="color: #AD0000;">4</span>], x1[<span class="dv" style="color: #AD0000;">11</span>])</span>
<span id="cb19-70">  y_selected <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(y1[<span class="dv" style="color: #AD0000;">2</span>], y1[<span class="dv" style="color: #AD0000;">4</span>], y1[<span class="dv" style="color: #AD0000;">11</span>])</span>
<span id="cb19-71"></span>
<span id="cb19-72">  <span class="co" style="color: #5E5E5E;"># Calculate the linear regression</span></span>
<span id="cb19-73">  linear_model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(y_selected <span class="sc" style="color: #5E5E5E;">~</span> x_selected)</span>
<span id="cb19-74"></span>
<span id="cb19-75">  <span class="co" style="color: #5E5E5E;"># Extract coefficients of the line</span></span>
<span id="cb19-76">  intercept <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">coef</span>(linear_model)[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb19-77">  slope <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">coef</span>(linear_model)[<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb19-78"></span>
<span id="cb19-79">  <span class="co" style="color: #5E5E5E;"># Create a sinusoidal curve above or below the line</span></span>
<span id="cb19-80">  x_sin <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x1), <span class="fu" style="color: #4758AB;">max</span>(x1), <span class="at" style="color: #657422;">length.out =</span> npoints)  <span class="co" style="color: #5E5E5E;"># x range for the sinusoid</span></span>
<span id="cb19-81">  amplitude <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span>  <span class="co" style="color: #5E5E5E;"># Amplitude of the sinusoid</span></span>
<span id="cb19-82">  frequency <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">4</span>  <span class="co" style="color: #5E5E5E;"># Frequency of the sinusoid</span></span>
<span id="cb19-83">  phase <span class="ot" style="color: #003B4F;">&lt;-</span> pi <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span>  <span class="co" style="color: #5E5E5E;"># Phase of the sinusoid (for rotation)</span></span>
<span id="cb19-84">  sinusoid <span class="ot" style="color: #003B4F;">&lt;-</span> amplitude <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">sin</span>(<span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">*</span> pi <span class="sc" style="color: #5E5E5E;">*</span> frequency <span class="sc" style="color: #5E5E5E;">*</span> (x_sin <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">min</span>(x1)) <span class="sc" style="color: #5E5E5E;">/</span> (<span class="fu" style="color: #4758AB;">max</span>(x1) <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">min</span>(x1)) <span class="sc" style="color: #5E5E5E;">+</span> phase)</span>
<span id="cb19-85"></span>
<span id="cb19-86">  <span class="co" style="color: #5E5E5E;"># Generate points above or below the line</span></span>
<span id="cb19-87">  y_sin <span class="ot" style="color: #003B4F;">&lt;-</span> slope <span class="sc" style="color: #5E5E5E;">*</span> x_sin <span class="sc" style="color: #5E5E5E;">+</span> intercept <span class="sc" style="color: #5E5E5E;">+</span> sinusoid</span>
<span id="cb19-88">  df1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x =</span> x_sin, <span class="at" style="color: #657422;">y =</span> y_sin)</span>
<span id="cb19-89"></span>
<span id="cb19-90">  <span class="do" style="color: #5E5E5E;
font-style: italic;">## Generate Quartet 2 ##</span></span>
<span id="cb19-91">  n_points_approximated <span class="ot" style="color: #003B4F;">&lt;-</span> npoints</span>
<span id="cb19-92">  noise_level <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.1</span></span>
<span id="cb19-93"></span>
<span id="cb19-94">  <span class="co" style="color: #5E5E5E;"># Generate approximated points</span></span>
<span id="cb19-95">  approximated_points <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">generate_approximated_points</span>(n_points_approximated, x2, y2, <span class="at" style="color: #657422;">noise_level =</span> <span class="fl" style="color: #AD0000;">0.1</span>)</span>
<span id="cb19-96"></span>
<span id="cb19-97">  <span class="co" style="color: #5E5E5E;"># Add noise to the approximated points</span></span>
<span id="cb19-98">  noisy_approximated_points <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">generate_noisy_points</span>(approximated_points<span class="sc" style="color: #5E5E5E;">$</span>x, approximated_points<span class="sc" style="color: #5E5E5E;">$</span>y, noise_level)</span>
<span id="cb19-99"></span>
<span id="cb19-100">  <span class="co" style="color: #5E5E5E;"># Now, you have noisy approximated points in df2</span></span>
<span id="cb19-101">  df2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x =</span> noisy_approximated_points<span class="sc" style="color: #5E5E5E;">$</span>x, <span class="at" style="color: #657422;">y =</span> noisy_approximated_points<span class="sc" style="color: #5E5E5E;">$</span>y)</span>
<span id="cb19-102"></span>
<span id="cb19-103">  <span class="do" style="color: #5E5E5E;
font-style: italic;">## Generate Quartet 3 ##</span></span>
<span id="cb19-104">  lm_model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(y3 <span class="sc" style="color: #5E5E5E;">~</span> x3, <span class="at" style="color: #657422;">subset =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb19-105">  x_generated <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x3), <span class="fu" style="color: #4758AB;">max</span>(x3), <span class="at" style="color: #657422;">length.out =</span> npoints)</span>
<span id="cb19-106">  y_generated <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(lm_model, <span class="at" style="color: #657422;">newdata =</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x3 =</span> x_generated))</span>
<span id="cb19-107"></span>
<span id="cb19-108">  x_outlier <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">13</span></span>
<span id="cb19-109">  y_outlier <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">12.74</span></span>
<span id="cb19-110">  x_generated <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(x_generated, x_outlier)</span>
<span id="cb19-111">  y_generated <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(y_generated, y_outlier)</span>
<span id="cb19-112"></span>
<span id="cb19-113">  df3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x =</span> x_generated, <span class="at" style="color: #657422;">y =</span> y_generated)</span>
<span id="cb19-114"></span>
<span id="cb19-115">  <span class="do" style="color: #5E5E5E;
font-style: italic;">## Generate Quartet 4 ##</span></span>
<span id="cb19-116">  </span>
<span id="cb19-117">  y4[<span class="dv" style="color: #AD0000;">9</span>]</span>
<span id="cb19-118">  x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">min</span>(x4),npoints))</span>
<span id="cb19-119">  y <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(y4[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">8</span>]), <span class="fu" style="color: #4758AB;">max</span>(y4[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">8</span>]), <span class="at" style="color: #657422;">length.out =</span> (npoints)))</span>
<span id="cb19-120">  x_new <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(x,x4[<span class="dv" style="color: #AD0000;">8</span>])</span>
<span id="cb19-121">  y_new <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(y,y4[<span class="dv" style="color: #AD0000;">8</span>])</span>
<span id="cb19-122">  df4 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x =</span> x_new, <span class="at" style="color: #657422;">y =</span> y_new)</span>
<span id="cb19-123"></span>
<span id="cb19-124">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">df1 =</span> df1, <span class="at" style="color: #657422;">df2 =</span> df2, <span class="at" style="color: #657422;">df3 =</span> df3, <span class="at" style="color: #657422;">df4 =</span> df4))</span>
<span id="cb19-125">}</span>
<span id="cb19-126"></span>
<span id="cb19-127"></span>
<span id="cb19-128"></span>
<span id="cb19-129"><span class="co" style="color: #5E5E5E;"># Generate and plot Quartet 1</span></span>
<span id="cb19-130">t1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">multians</span>(<span class="dv" style="color: #AD0000;">33</span>,anscombe)</span>
<span id="cb19-131"></span>
<span id="cb19-132">p1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">plotreg</span>(t1<span class="sc" style="color: #5E5E5E;">$</span>df1)</span>
<span id="cb19-133">p3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">plotreg</span>(t1<span class="sc" style="color: #5E5E5E;">$</span>df3)</span>
<span id="cb19-134">p4 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">plotreg</span>(t1<span class="sc" style="color: #5E5E5E;">$</span>df4)</span>
<span id="cb19-135">p2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">plotreg</span>(t1<span class="sc" style="color: #5E5E5E;">$</span>df2)</span>
<span id="cb19-136"></span>
<span id="cb19-137">(p1 <span class="sc" style="color: #5E5E5E;">|</span> p2) <span class="sc" style="color: #5E5E5E;">/</span> (p3 <span class="sc" style="color: #5E5E5E;">|</span> p4)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Fun03/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># Example of eight summaries (replace them with your own)</span></span>
<span id="cb20-2">summary1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">st</span>(t1<span class="sc" style="color: #5E5E5E;">$</span>df1)</span>
<span id="cb20-3">summary5 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">st</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(anscombe<span class="sc" style="color: #5E5E5E;">$</span>x1,anscombe<span class="sc" style="color: #5E5E5E;">$</span>y1))</span>
<span id="cb20-4"></span>
<span id="cb20-5">summary2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">st</span>(t1<span class="sc" style="color: #5E5E5E;">$</span>df2)</span>
<span id="cb20-6">summary6 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">st</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(anscombe<span class="sc" style="color: #5E5E5E;">$</span>x2,anscombe<span class="sc" style="color: #5E5E5E;">$</span>y2))</span>
<span id="cb20-7"></span>
<span id="cb20-8">summary3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">st</span>(t1<span class="sc" style="color: #5E5E5E;">$</span>df3)</span>
<span id="cb20-9">summary7 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">st</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(anscombe<span class="sc" style="color: #5E5E5E;">$</span>x3,anscombe<span class="sc" style="color: #5E5E5E;">$</span>y3))</span>
<span id="cb20-10"></span>
<span id="cb20-11">summary4 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">st</span>(t1<span class="sc" style="color: #5E5E5E;">$</span>df4)</span>
<span id="cb20-12">summary8 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">st</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(anscombe<span class="sc" style="color: #5E5E5E;">$</span>x4,anscombe<span class="sc" style="color: #5E5E5E;">$</span>y4))</span>
<span id="cb20-13"></span>
<span id="cb20-14"></span>
<span id="cb20-15">summary1 </span></code></pre></div>
<div class="cell-output-display">

<table class="table" style="margin-left: auto; margin-right: auto;">
<caption>Summary Statistics</caption>
 <thead>
  <tr>
   <th style="text-align:left;"> Variable </th>
   <th style="text-align:left;"> N </th>
   <th style="text-align:left;"> Mean </th>
   <th style="text-align:left;"> Std. Dev. </th>
   <th style="text-align:left;"> Min </th>
   <th style="text-align:left;"> Pctl. 25 </th>
   <th style="text-align:left;"> Pctl. 75 </th>
   <th style="text-align:left;"> Max </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> x </td>
   <td style="text-align:left;"> 33 </td>
   <td style="text-align:left;"> 9 </td>
   <td style="text-align:left;"> 3 </td>
   <td style="text-align:left;"> 4 </td>
   <td style="text-align:left;"> 6.5 </td>
   <td style="text-align:left;"> 12 </td>
   <td style="text-align:left;"> 14 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> y </td>
   <td style="text-align:left;"> 33 </td>
   <td style="text-align:left;"> 8.3 </td>
   <td style="text-align:left;"> 2.2 </td>
   <td style="text-align:left;"> 4.7 </td>
   <td style="text-align:left;"> 6.5 </td>
   <td style="text-align:left;"> 10 </td>
   <td style="text-align:left;"> 13 </td>
  </tr>
</tbody>
</table>

</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">summary5 </span></code></pre></div>
<div class="cell-output-display">

<table class="table" style="margin-left: auto; margin-right: auto;">
<caption>Summary Statistics</caption>
 <thead>
  <tr>
   <th style="text-align:left;"> Variable </th>
   <th style="text-align:left;"> N </th>
   <th style="text-align:left;"> Mean </th>
   <th style="text-align:left;"> Std. Dev. </th>
   <th style="text-align:left;"> Min </th>
   <th style="text-align:left;"> Pctl. 25 </th>
   <th style="text-align:left;"> Pctl. 75 </th>
   <th style="text-align:left;"> Max </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> anscombe.x1 </td>
   <td style="text-align:left;"> 11 </td>
   <td style="text-align:left;"> 9 </td>
   <td style="text-align:left;"> 3.3 </td>
   <td style="text-align:left;"> 4 </td>
   <td style="text-align:left;"> 6.5 </td>
   <td style="text-align:left;"> 12 </td>
   <td style="text-align:left;"> 14 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> anscombe.y1 </td>
   <td style="text-align:left;"> 11 </td>
   <td style="text-align:left;"> 7.5 </td>
   <td style="text-align:left;"> 2 </td>
   <td style="text-align:left;"> 4.3 </td>
   <td style="text-align:left;"> 6.3 </td>
   <td style="text-align:left;"> 8.6 </td>
   <td style="text-align:left;"> 11 </td>
  </tr>
</tbody>
</table>

</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">summary2 </span></code></pre></div>
<div class="cell-output-display">

<table class="table" style="margin-left: auto; margin-right: auto;">
<caption>Summary Statistics</caption>
 <thead>
  <tr>
   <th style="text-align:left;"> Variable </th>
   <th style="text-align:left;"> N </th>
   <th style="text-align:left;"> Mean </th>
   <th style="text-align:left;"> Std. Dev. </th>
   <th style="text-align:left;"> Min </th>
   <th style="text-align:left;"> Pctl. 25 </th>
   <th style="text-align:left;"> Pctl. 75 </th>
   <th style="text-align:left;"> Max </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> x </td>
   <td style="text-align:left;"> 33 </td>
   <td style="text-align:left;"> 9 </td>
   <td style="text-align:left;"> 3.1 </td>
   <td style="text-align:left;"> 4.1 </td>
   <td style="text-align:left;"> 6.5 </td>
   <td style="text-align:left;"> 12 </td>
   <td style="text-align:left;"> 14 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> y </td>
   <td style="text-align:left;"> 33 </td>
   <td style="text-align:left;"> 7.6 </td>
   <td style="text-align:left;"> 1.9 </td>
   <td style="text-align:left;"> 3.2 </td>
   <td style="text-align:left;"> 6.6 </td>
   <td style="text-align:left;"> 8.9 </td>
   <td style="text-align:left;"> 9.6 </td>
  </tr>
</tbody>
</table>

</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">summary6 </span></code></pre></div>
<div class="cell-output-display">

<table class="table" style="margin-left: auto; margin-right: auto;">
<caption>Summary Statistics</caption>
 <thead>
  <tr>
   <th style="text-align:left;"> Variable </th>
   <th style="text-align:left;"> N </th>
   <th style="text-align:left;"> Mean </th>
   <th style="text-align:left;"> Std. Dev. </th>
   <th style="text-align:left;"> Min </th>
   <th style="text-align:left;"> Pctl. 25 </th>
   <th style="text-align:left;"> Pctl. 75 </th>
   <th style="text-align:left;"> Max </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> anscombe.x2 </td>
   <td style="text-align:left;"> 11 </td>
   <td style="text-align:left;"> 9 </td>
   <td style="text-align:left;"> 3.3 </td>
   <td style="text-align:left;"> 4 </td>
   <td style="text-align:left;"> 6.5 </td>
   <td style="text-align:left;"> 12 </td>
   <td style="text-align:left;"> 14 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> anscombe.y2 </td>
   <td style="text-align:left;"> 11 </td>
   <td style="text-align:left;"> 7.5 </td>
   <td style="text-align:left;"> 2 </td>
   <td style="text-align:left;"> 3.1 </td>
   <td style="text-align:left;"> 6.7 </td>
   <td style="text-align:left;"> 8.9 </td>
   <td style="text-align:left;"> 9.3 </td>
  </tr>
</tbody>
</table>

</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">summary3</span></code></pre></div>
<div class="cell-output-display">

<table class="table" style="margin-left: auto; margin-right: auto;">
<caption>Summary Statistics</caption>
 <thead>
  <tr>
   <th style="text-align:left;"> Variable </th>
   <th style="text-align:left;"> N </th>
   <th style="text-align:left;"> Mean </th>
   <th style="text-align:left;"> Std. Dev. </th>
   <th style="text-align:left;"> Min </th>
   <th style="text-align:left;"> Pctl. 25 </th>
   <th style="text-align:left;"> Pctl. 75 </th>
   <th style="text-align:left;"> Max </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> x </td>
   <td style="text-align:left;"> 34 </td>
   <td style="text-align:left;"> 9.1 </td>
   <td style="text-align:left;"> 3.1 </td>
   <td style="text-align:left;"> 4 </td>
   <td style="text-align:left;"> 6.6 </td>
   <td style="text-align:left;"> 12 </td>
   <td style="text-align:left;"> 14 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> y </td>
   <td style="text-align:left;"> 34 </td>
   <td style="text-align:left;"> 7.3 </td>
   <td style="text-align:left;"> 1.4 </td>
   <td style="text-align:left;"> 5.4 </td>
   <td style="text-align:left;"> 6.3 </td>
   <td style="text-align:left;"> 8.1 </td>
   <td style="text-align:left;"> 13 </td>
  </tr>
</tbody>
</table>

</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">summary7 </span></code></pre></div>
<div class="cell-output-display">

<table class="table" style="margin-left: auto; margin-right: auto;">
<caption>Summary Statistics</caption>
 <thead>
  <tr>
   <th style="text-align:left;"> Variable </th>
   <th style="text-align:left;"> N </th>
   <th style="text-align:left;"> Mean </th>
   <th style="text-align:left;"> Std. Dev. </th>
   <th style="text-align:left;"> Min </th>
   <th style="text-align:left;"> Pctl. 25 </th>
   <th style="text-align:left;"> Pctl. 75 </th>
   <th style="text-align:left;"> Max </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> anscombe.x3 </td>
   <td style="text-align:left;"> 11 </td>
   <td style="text-align:left;"> 9 </td>
   <td style="text-align:left;"> 3.3 </td>
   <td style="text-align:left;"> 4 </td>
   <td style="text-align:left;"> 6.5 </td>
   <td style="text-align:left;"> 12 </td>
   <td style="text-align:left;"> 14 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> anscombe.y3 </td>
   <td style="text-align:left;"> 11 </td>
   <td style="text-align:left;"> 7.5 </td>
   <td style="text-align:left;"> 2 </td>
   <td style="text-align:left;"> 5.4 </td>
   <td style="text-align:left;"> 6.2 </td>
   <td style="text-align:left;"> 8 </td>
   <td style="text-align:left;"> 13 </td>
  </tr>
</tbody>
</table>

</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">summary4 </span></code></pre></div>
<div class="cell-output-display">

<table class="table" style="margin-left: auto; margin-right: auto;">
<caption>Summary Statistics</caption>
 <thead>
  <tr>
   <th style="text-align:left;"> Variable </th>
   <th style="text-align:left;"> N </th>
   <th style="text-align:left;"> Mean </th>
   <th style="text-align:left;"> Std. Dev. </th>
   <th style="text-align:left;"> Min </th>
   <th style="text-align:left;"> Pctl. 25 </th>
   <th style="text-align:left;"> Pctl. 75 </th>
   <th style="text-align:left;"> Max </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> x </td>
   <td style="text-align:left;"> 34 </td>
   <td style="text-align:left;"> 8.3 </td>
   <td style="text-align:left;"> 1.9 </td>
   <td style="text-align:left;"> 8 </td>
   <td style="text-align:left;"> 8 </td>
   <td style="text-align:left;"> 8 </td>
   <td style="text-align:left;"> 19 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> y </td>
   <td style="text-align:left;"> 34 </td>
   <td style="text-align:left;"> 7.2 </td>
   <td style="text-align:left;"> 1.4 </td>
   <td style="text-align:left;"> 5.2 </td>
   <td style="text-align:left;"> 6.2 </td>
   <td style="text-align:left;"> 8 </td>
   <td style="text-align:left;"> 12 </td>
  </tr>
</tbody>
</table>

</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">summary8</span></code></pre></div>
<div class="cell-output-display">

<table class="table" style="margin-left: auto; margin-right: auto;">
<caption>Summary Statistics</caption>
 <thead>
  <tr>
   <th style="text-align:left;"> Variable </th>
   <th style="text-align:left;"> N </th>
   <th style="text-align:left;"> Mean </th>
   <th style="text-align:left;"> Std. Dev. </th>
   <th style="text-align:left;"> Min </th>
   <th style="text-align:left;"> Pctl. 25 </th>
   <th style="text-align:left;"> Pctl. 75 </th>
   <th style="text-align:left;"> Max </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> anscombe.x4 </td>
   <td style="text-align:left;"> 11 </td>
   <td style="text-align:left;"> 9 </td>
   <td style="text-align:left;"> 3.3 </td>
   <td style="text-align:left;"> 8 </td>
   <td style="text-align:left;"> 8 </td>
   <td style="text-align:left;"> 8 </td>
   <td style="text-align:left;"> 19 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> anscombe.y4 </td>
   <td style="text-align:left;"> 11 </td>
   <td style="text-align:left;"> 7.5 </td>
   <td style="text-align:left;"> 2 </td>
   <td style="text-align:left;"> 5.2 </td>
   <td style="text-align:left;"> 6.2 </td>
   <td style="text-align:left;"> 8.2 </td>
   <td style="text-align:left;"> 12 </td>
  </tr>
</tbody>
</table>

</div>
</div>
<p>Anscombe’s Quartet is a powerful reminder that descriptive statistics alone may not reveal the complete story of your data. Visualization is a crucial tool in data analysis, helping you uncover patterns, outliers, and unexpected relationships that numbers alone might miss.</p>
<p><span class="citation" data-cites="10.1145/3231772 a23325bf-6a64-3bba-a051-ebe1b2dce874">(Szafir 2018; Anscombe 1973)</span></p>




<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-a23325bf-6a64-3bba-a051-ebe1b2dce874" class="csl-entry">
Anscombe, F. J. 1973. <span>“Graphs in Statistical Analysis.”</span> <em>The American Statistician</em> 27 (1): 17–21. <a href="http://www.jstor.org/stable/2682899">http://www.jstor.org/stable/2682899</a>.
</div>
<div id="ref-10.1145/3231772" class="csl-entry">
Szafir, Danielle Albers. 2018. <span>“The Good, the Bad, and the Biased: Five Ways Visualizations Can Mislead (and How to Fix Them).”</span> <em>Interactions</em> 25 (4): 26–33. <a href="https://doi.org/10.1145/3231772">https://doi.org/10.1145/3231772</a>.
</div>
</div></section></div> ]]></description>
  <category>R</category>
  <category>Fun</category>
  <guid>https://giorgioluciano.github.io/posts/Fun03/index.html</guid>
  <pubDate>Fri, 15 Sep 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Visualization</title>
  <dc:creator>Giorgio Luciano and ChatGPT</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Tut1/Visualization.html</link>
  <description><![CDATA[ 




<ol type="1">
<li><p>Introduction to EDA: Exploratory Data Analysis (EDA) is the initial step in data analysis, where the structure, trends, and characteristics of the data are understood before applying complex statistical models or machine learning algorithms.</p></li>
<li><p>Importance of EDA: EDA serves various purposes, including understanding data, detecting patterns, data cleaning, feature engineering, generating hypotheses, and communicating insights to stakeholders.</p></li>
<li><p>Generating Simulated Data: Simulated data is essential for practicing EDA. Parameters and variables are defined to create sample data for further analysis in R.</p></li>
<li><p>Choosing the Right Plot: The choice of visualization depends on the data’s nature and the analysis goals. Time series plots, distribution plots, and correlation plots are used to explore different aspects of data.</p></li>
</ol>
<p>5 .Interactive Data Visualization: Interactive visualizations, like those created using Plotly, enable users to explore data interactively by selecting elements, zooming, and getting detailed information, enhancing data exploration and presentation.</p>
<section id="introduction-to-exploratory-data-analysis-eda" class="level1">
<h1><strong>Introduction to Exploratory Data Analysis (EDA)</strong></h1>
<p>Exploratory Data Analysis (EDA) is the crucial first step in the data analysis process. Before applying complex statistical models or machine learning algorithms, it is essential to understand the structure, trends, and peculiarities of the data you are working with. In this introductory section, we will explore the fundamental concepts of EDA and its role in data analysis.</p>
<section id="importance-of-eda" class="level2">
<h2 class="anchored" data-anchor-id="importance-of-eda"><strong>Importance of EDA</strong></h2>
<p>EDA serves several purposes:</p>
<ol type="1">
<li><p><strong>Understanding Data:</strong> EDA helps us become familiar with the dataset, identify the available variables, and understand their nature (numeric, categorical, temporal, etc.).</p></li>
<li><p><strong>Detecting Patterns:</strong> EDA allows us to detect patterns, relationships, and potential outliers within the data. This is critical for making informed decisions during the analysis.</p></li>
<li><p><strong>Data Cleaning:</strong> Through EDA, we can identify missing values, outliers, or data inconsistencies that require cleaning and preprocessing.</p></li>
<li><p><strong>Feature Engineering:</strong> EDA may suggest feature engineering opportunities, such as creating new variables or transforming existing ones to better represent the underlying data.</p></li>
<li><p><strong>Hypothesis Generation:</strong> EDA often leads to the generation of hypotheses or research questions, guiding further investigation.</p></li>
<li><p><strong>Communicating Insights:</strong> EDA produces visualizations and summaries that facilitate the communication of insights to stakeholders or team members.</p></li>
</ol>
<p>In the following sections, we will delve into the practical aspects of EDA, starting with data simulation and visualization techniques.</p>
</section>
<section id="generating-simulated-data" class="level2">
<h2 class="anchored" data-anchor-id="generating-simulated-data"><strong>Generating Simulated Data</strong></h2>
<p>Before diving into Exploratory Data Analysis (EDA) on real datasets, it’s helpful to begin with the generation of simulated data. This allows us to have full control over the data and create example scenarios to understand key EDA concepts. In this section, we will learn how to generate simulated datasets using R.</p>
<section id="parameters-and-variables" class="level3">
<h3 class="anchored" data-anchor-id="parameters-and-variables"><strong>Parameters and Variables</strong></h3>
<p>To start, let’s define some basic parameters that we’ll use to generate simulated data:</p>
<ul>
<li><p><strong><code>x_min</code></strong>: The minimum value for the variable x.</p></li>
<li><p><strong><code>x_max</code></strong>: The maximum value for the variable x.</p></li>
<li><p><strong><code>x_step</code></strong>: The increment between successive x values.</p></li>
<li><p><strong><code>y_mean</code></strong>: The mean value for the dependent variable y.</p></li>
<li><p><strong><code>y_sd</code></strong>: The standard deviation for the dependent variable y.</p></li>
<li><p><strong><code>y_min</code></strong>: The minimum possible value for y.</p></li>
<li><p><strong><code>y_max</code></strong>: The maximum possible value for y.</p></li>
</ul>
<p>We will use these parameters to generate sample data.</p>
<p>Now, let’s proceed to generate sample data based on the defined parameters. In this example, we’ll create a simple dataset with the following variables:</p>
<ul>
<li><p><strong><code>x</code></strong>: A sequence of values ranging from <strong><code>x_min</code></strong> to <strong><code>x_max</code></strong> with an increment of <strong><code>x_step</code></strong>.</p></li>
<li><p><strong><code>var_random</code></strong>: A random variable with values uniformly distributed between <strong><code>y_min</code></strong> and <strong><code>y_max</code></strong>.</p></li>
<li><p><strong><code>var_norm</code></strong>: A variable with values generated from a normal distribution with mean <strong><code>y_mean</code></strong> and standard deviation <strong><code>y_sd</code></strong>.</p></li>
<li><p><strong><code>var_sin</code></strong>: A variable with values generated as the sine function of <strong><code>x</code></strong>.</p></li>
</ul>
<p>Here’s the R code to create the sample dataset:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(data.table)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># Parameters</span></span>
<span id="cb1-4">x_min   <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-5">x_max   <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">10</span>   </span>
<span id="cb1-6">x_step  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.01</span></span>
<span id="cb1-7"></span>
<span id="cb1-8">y_mean  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb1-9">y_sd    <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.25</span></span>
<span id="cb1-10">y_min   <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-11">y_max   <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span>     </span>
<span id="cb1-12"></span>
<span id="cb1-13">x       <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(x_min, x_max, x_step)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># Variables</span></span>
<span id="cb1-16">var_random  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">runif</span>(<span class="fu" style="color: #4758AB;">length</span>(x), y_min, y_max)</span>
<span id="cb1-17">var_norm    <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="fu" style="color: #4758AB;">length</span>(x), y_mean, y_sd) </span>
<span id="cb1-18">var_sin     <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sin</span>(x)</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;"># Data.frame </span></span>
<span id="cb1-21">df  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(x, var_random, var_norm, var_sin)</span>
<span id="cb1-22">dt  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.table</span>(df)</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;"># Melt </span></span>
<span id="cb1-25">dtm <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">melt</span>(dt, <span class="at" style="color: #657422;">id.vars=</span><span class="st" style="color: #20794D;">"x"</span>)</span></code></pre></div>
</div>
<p>This code creates a dataset <strong><code>df</code></strong> and a data.table <strong><code>dt</code></strong> containing the generated variables. The <strong><code>melt</code></strong> function from the <strong><code>data.table</code></strong> library is used to reshape the data for visualization purposes.</p>
<p>With our simulated data ready, we can now move on to creating various plots and performing EDA.</p>
<p>In this section, we will explore various visualization techniques that play a crucial role in Exploratory Data Analysis (EDA). Visualizations help us gain insights into the data’s distribution, patterns, and relationships between variables. We will use the simulated dataset generated in the previous section to illustrate these techniques.</p>
</section>
</section>
<section id="choosing-the-right-plot" class="level2">
<h2 class="anchored" data-anchor-id="choosing-the-right-plot"><strong>Choosing the Right Plot</strong></h2>
<p>The choice of visualization depends on the nature of your data and the specific aspects you want to highlight. Generally, in EDA, we often need to:</p>
<ol type="1">
<li><p><strong>Examine Changes Over Time:</strong> Use time series plots when you want to assess changes in one or more variables over time.</p></li>
<li><p><strong>Check for Data Distribution:</strong> Create distribution plots, such as histograms and density plots, to understand how data points are distributed.</p></li>
<li><p><strong>Explore Variable Relationships:</strong> Employ correlation plots and scatter plots to identify linear relationships between variables.</p></li>
</ol>
<p>Let’s start by examining these aspects one by one using our simulated dataset.</p>
<section id="time-series-plots" class="level3">
<h3 class="anchored" data-anchor-id="time-series-plots"><strong>Time Series Plots</strong></h3>
<p>To explore changes over time, we’ll create a time series plot for the <strong><code>var_sin</code></strong> variable. This variable represents a sine wave and is well-suited for a time series representation. Here’s the R code to create a time series plot:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb2-2"></span>
<span id="cb2-3">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(dtm[variable <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"var_sin"</span>], <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x, <span class="at" style="color: #657422;">y =</span> value, <span class="at" style="color: #657422;">group =</span> variable)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-4">     <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">linetype =</span> variable, <span class="at" style="color: #657422;">color =</span> variable))</span>
<span id="cb2-5">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Tut1/Visualization_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>In this code, we use <strong><code>ggplot2</code></strong> to create a line plot for the <strong><code>var_sin</code></strong> variable.</p>
</section>
<section id="distribution-plots" class="level3">
<h3 class="anchored" data-anchor-id="distribution-plots"><strong>Distribution Plots</strong></h3>
<p>To check the data distribution, we’ll create histogram plots for each of the variables: <strong><code>var_random</code></strong>, <strong><code>var_norm</code></strong>, and <strong><code>var_sin</code></strong>. Histograms provide a visual representation of the frequency distribution of data values. Here’s the R code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">p3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(dtm[variable <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"var_sin"</span>], <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y =</span> value, <span class="at" style="color: #657422;">group =</span> variable)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-2">     <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="at" style="color: #657422;">bins =</span> <span class="dv" style="color: #AD0000;">20</span>) </span>
<span id="cb3-3"></span>
<span id="cb3-4">p4 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(dtm[variable <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"var_norm"</span>], <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y =</span> value, <span class="at" style="color: #657422;">group =</span> variable)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-5">     <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="at" style="color: #657422;">bins =</span> <span class="dv" style="color: #AD0000;">20</span>) </span>
<span id="cb3-6"></span>
<span id="cb3-7">p5 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(dtm[variable <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"var_random"</span>], <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y =</span> value, <span class="at" style="color: #657422;">group =</span> variable)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-8">      <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="at" style="color: #657422;">bins =</span> <span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb3-9">p3</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Tut1/Visualization_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">p4</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Tut1/Visualization_files/figure-html/unnamed-chunk-3-2.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">p5</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Tut1/Visualization_files/figure-html/unnamed-chunk-3-3.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>These plots will help us understand the distribution characteristics of our variables.</p>
</section>
<section id="correlation-plots" class="level3">
<h3 class="anchored" data-anchor-id="correlation-plots"><strong>Correlation Plots</strong></h3>
<p>Correlation plots allow us to examine relationships between variables. We’ll create scatter plots for pairs of variables to assess their linear correlation. Here’s an example for <strong><code>var_sin</code></strong> and <strong><code>var_sin2</code></strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">repr.plot.width =</span> <span class="dv" style="color: #AD0000;">7</span>, <span class="at" style="color: #657422;">repr.plot.height =</span> <span class="dv" style="color: #AD0000;">7</span>)</span>
<span id="cb6-2"></span>
<span id="cb6-3">var_random2  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">runif</span>(x,y_min,y_max)</span>
<span id="cb6-4">var_norm2    <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(x,y_mean,y_sd) </span>
<span id="cb6-5">var_sin2     <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sin</span>(x) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">rnorm</span>(x,<span class="dv" style="color: #AD0000;">0</span>,<span class="fl" style="color: #AD0000;">0.01</span>) </span>
<span id="cb6-6"></span>
<span id="cb6-7">df2<span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(df,var_sin2,var_norm2,var_random2)</span>
<span id="cb6-8">dt2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.table</span>(df2)</span>
<span id="cb6-9"></span>
<span id="cb6-10">p10 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(dt2) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> var_sin, <span class="at" style="color: #657422;">y =</span> var_sin2)) </span>
<span id="cb6-11">p10</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Tut1/Visualization_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>These scatter plots help us identify whether variables exhibit linear correlation.</p>
<p>In the following sections, we’ll delve deeper into each of these plot types, interpret the results, and explore additional visualization techniques for EDA.</p>
<section id="box-plots" class="level4">
<h4 class="anchored" data-anchor-id="box-plots"><strong>Box Plots</strong></h4>
<p>Box plots, also known as box-and-whisker plots, provide a summary of the data’s distribution, including median, quartiles, and potential outliers. They are particularly useful for comparing the distributions of different variables or groups. Here’s an example of creating box plots for <strong><code>var_random</code></strong>, <strong><code>var_norm</code></strong>, and <strong><code>var_sin</code></strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">p6 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(dtm, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> variable, <span class="at" style="color: #657422;">y =</span> value)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-2">      <span class="fu" style="color: #4758AB;">geom_boxplot</span>()</span>
<span id="cb7-3">p6</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Tut1/Visualization_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Box plots can reveal variations and central tendencies of the variables.</p>
</section>
<section id="pair-plots" class="level4">
<h4 class="anchored" data-anchor-id="pair-plots"><strong>Pair Plots</strong></h4>
<p>Pair plots, or scatterplot matrices, allow us to visualize pairwise relationships between multiple variables in a dataset. They are helpful for identifying correlations and patterns among variables simultaneously. Here’s how to create a pair plot for our dataset:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">library</span>(GGally)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Registered S3 method overwritten by 'GGally':
  method from   
  +.gg   ggplot2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">pair_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggpairs</span>(dt2, <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"var_random"</span>, <span class="st" style="color: #20794D;">"var_norm"</span>, <span class="st" style="color: #20794D;">"var_sin"</span>, <span class="st" style="color: #20794D;">"var_sin2"</span>)) </span>
<span id="cb10-2"></span>
<span id="cb10-3">pair_plot</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Tut1/Visualization_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Pair plots provide a comprehensive view of variable interactions.</p>
</section>
<section id="time-series-decomposition" class="level4">
<h4 class="anchored" data-anchor-id="time-series-decomposition"><strong>Time Series Decomposition</strong></h4>
<p>Time series data often contain underlying components such as trends and seasonality that can be crucial for understanding the data’s behavior. Time series decomposition is a technique used in Exploratory Data Analysis (EDA) to separate these components. In this section, we’ll demonstrate how to perform time series decomposition using our simulated <strong><code>var_sin</code></strong> data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Install and load the forecast library if not already installed</span></span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">requireNamespace</span>(<span class="st" style="color: #20794D;">"forecast"</span>, <span class="at" style="color: #657422;">quietly =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)) {</span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"forecast"</span>)</span>
<span id="cb11-4">}</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Registered S3 method overwritten by 'quantmod':
  method            from
  as.zoo.data.frame zoo </code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">library</span>(forecast)</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;"># Decompose the time series</span></span>
<span id="cb13-4">sin_decomp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">decompose</span>(<span class="fu" style="color: #4758AB;">ts</span>(dt2<span class="sc" style="color: #5E5E5E;">$</span>var_sin, <span class="at" style="color: #657422;">frequency =</span> <span class="dv" style="color: #AD0000;">365</span>))</span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;"># Plot the decomposed components</span></span>
<span id="cb13-7"><span class="fu" style="color: #4758AB;">plot</span>(sin_decomp)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Tut1/Visualization_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The code above performs the following:</p>
<ol type="1">
<li><p>Decomposes the <strong><code>var_sin</code></strong> time series using the <strong><code>decompose</code></strong> function. We specify a frequency of 365 since the data represents daily observations.</p></li>
<li><p>Plots the decomposed components, including the original time series, trend, seasonal component, and residual.</p></li>
</ol>
<p>The resulting plot will show the individual components of the time series, allowing us to gain insights into its underlying patterns.</p>
</section>
<section id="interactive-visualizations" class="level4">
<h4 class="anchored" data-anchor-id="interactive-visualizations"><strong>Interactive Visualizations</strong></h4>
<p>Interactive plots, created using libraries like <strong><code>plotly</code></strong> or <strong><code>shiny</code></strong>, allow users to explore data interactively. You can create interactive scatter plots, line plots, or heatmaps, enhancing the user’s ability to dig deeper into the data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Install and load the Plotly library if not already installed</span></span>
<span id="cb14-2"><span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">requireNamespace</span>(<span class="st" style="color: #20794D;">"plotly"</span>, <span class="at" style="color: #657422;">quietly =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)) {</span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"plotly"</span>)</span>
<span id="cb14-4">}</span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="fu" style="color: #4758AB;">library</span>(plotly)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'plotly'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:ggplot2':

    last_plot</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:stats':

    filter</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:graphics':

    layout</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Create an interactive scatter plot</span></span>
<span id="cb19-2">scatter_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">plot_ly</span>(<span class="at" style="color: #657422;">data =</span> dt2, <span class="at" style="color: #657422;">x =</span> <span class="sc" style="color: #5E5E5E;">~</span>var_random, <span class="at" style="color: #657422;">y =</span> <span class="sc" style="color: #5E5E5E;">~</span>var_norm, <span class="at" style="color: #657422;">text =</span> <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"x:"</span>, x, <span class="st" style="color: #20794D;">"&lt;br&gt;var_random:"</span>, var_random, <span class="st" style="color: #20794D;">"&lt;br&gt;var_norm:"</span>, var_norm),</span>
<span id="cb19-3">                        <span class="at" style="color: #657422;">marker =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">10</span>, <span class="at" style="color: #657422;">opacity =</span> <span class="fl" style="color: #AD0000;">0.7</span>, <span class="at" style="color: #657422;">color =</span> var_sin)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">add_markers</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-5">  <span class="fu" style="color: #4758AB;">layout</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Interactive Scatter Plot"</span>,</span>
<span id="cb19-6">         <span class="at" style="color: #657422;">xaxis =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"var_random"</span>),</span>
<span id="cb19-7">         <span class="at" style="color: #657422;">yaxis =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"var_norm"</span>),</span>
<span id="cb19-8">         <span class="at" style="color: #657422;">hovermode =</span> <span class="st" style="color: #20794D;">"closest"</span>) </span>
<span id="cb19-9"></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;"># Display the interactive scatter plot</span></span>
<span id="cb19-11">scatter_plot</span></code></pre></div>
<div class="cell-output-display">
<div class="plotly html-widget html-fill-item" id="htmlwidget-ef2872034c02acdb62a3" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-ef2872034c02acdb62a3">{"x":{"visdat":{"2d986ce41958":["function () ","plotlyVisDat"]},"cur_data":"2d986ce41958","attrs":{"2d986ce41958":{"x":{},"y":{},"text":{},"marker":{"size":10,"opacity":0.69999999999999996,"color":[0,0.0099998333341666645,0.01999866669333308,0.02999550020249566,0.039989334186634161,0.049979169270678331,0.059964006479444595,0.069942847337532768,0.079914693969172695,0.08987854919801104,0.099833416646828155,0.10977830083717481,0.11971220728891936,0.12963414261969486,0.13954311464423649,0.14943813247359922,0.15931820661424598,0.16918234906699603,0.17902957342582418,0.18885889497650057,0.19866933079506122,0.20845989984609956,0.21822962308086932,0.22797752353518841,0.23770262642713458,0.24740395925452294,0.25708055189215512,0.26673143668883115,0.27635564856411376,0.28595222510483553,0.29552020666133955,0.3050586364434435,0.31456656061611776,0.32404302839486837,0.3334870921408144,0.3428978074554514,0.35227423327508994,0.36161543196496199,0.37092046941298268,0.38018841512316143,0.38941834230865052,0.39860932798442295,0.40776045305957015,0.41687080242921076,0.42593946506599961,0.43496553411123023,0.44394810696551978,0.45288628537906833,0.4617791755414829,0.47062588817115802,0.47942553860420301,0.48817724688290748,0.49688013784373675,0.50553334120484694,0.51413599165311319,0.52268722893065922,0.5311861979208834,0.53963204873396931,0.54802393679187356,0.55636102291278378,0.56464247339503537,0.57286746010048128,0.58103516053730508,0.5891447579422695,0.59719544136239211,0.60518640573603955,0.6131168519734338,0.62098598703655972,0.62879302401846859,0.63653718222196798,0.64421768723769113,0.65183377102153661,0.6593846719714731,0.66686963500369789,0.67428791162814505,0.68163876002333412,0.68892144511055131,0.69613523862735671,0.70327941920041015,0.71035327241760782,0.71735609089952279,0.72428717437014256,0.7311458297268959,0.73793137110996276,0.7446431199708593,0.75128040514029271,0.75784256289527696,0.76432893702550508,0.7707388788989693,0.77707174752682384,0.78332690962748341,0.78950373968995047,0.79560162003636603,0.80161994088377719,0.80755810040511433,0.81341550478937374,0.81919156830099826,0.82488571333845007,0.83049737049197048,0.83602597860052053,0.8414709848078965,0.84683184461801519,0.85210802194936297,0.85729898918860337,0.86240422724333843,0.86742322559401697,0.87235548234498628,0.87720050427468166,0.88195780688494751,0.88662691444948727,0.89120736006143542,0.89569868568004762,0.90010044217650509,0.90441218937882595,0.90863349611588329,0.9127639402605211,0.91680310877176685,0.92075059773613566,0.92460601240802032,0.92836896724916662,0.93203908596722629,0.93561600155338587,0.9390993563190676,0.94248880193169748,0.94578399944953895,0.9489846193555862,0.95209034159051575,0.95510085558469227,0.95801586028922492,0.96083506420607268,0.96355818541719296,0.96618495161273399,0.96871510011826523,0.97114837792104458,0.97348454169531939,0.97572335782665909,0.97786460243531625,0.97990806139861419,0.98185353037235978,0.98370081481127658,0.98544972998846025,0.98710010101385037,0.98865176285171974,0.99010456033717775,0.99145834819168643,0.99271299103758848,0.99386836341164486,0.99492434977758093,0.99588084453764003,0.99673775204314341,0.99749498660405445,0.99815247249754813,0.998710143975583,0.99916794527147601,0.99952583060547906,0.99978376418935699,0.9999417202299663,0.99999968293183461,0.99995764649874008,0.99981561513429085,0.99957360304150511,0.99923163442139051,0.99878974347052396,0.99824797437763246,0.99760638131917367,0.99686502845391889,0.99602398991653673,0.99508334981018021,0.99404320219807596,0.99290365109411849,0.99166481045246857,0.99032680415615804,0.98888976600470146,0.98735383970071644,0.98571917883555349,0.98398594687393692,0.98215431713761847,0.98022447278804548,0.97819660680804466,0.97607092198252421,0.97384763087819515,0.9715269558223153,0.96910912888045631,0.96659439183329754,0.96398299615244809,0.96127520297529989,0.95847128307891416,0.95557151685294395,0.95257619427159534,0.94948561486463046,0.94630008768741447,0.94301993129001049,0.93964547368532492,0.9361770523163061,0.93261501402220048,0.92895971500386931,0.92521152078816826,0.92137080619139544,0.91743795528180982,0.91341336134122519,0.90929742682568171,0.90509056332520088,0.90079319152262727,0.8964057411515598,0.89192865095337959,0.88736236863337548,0.88270735081597407,0.87796406299907814,0.87313297950751645,0.86821458344561264,0.86320936664887371,0.85811782963480887,0.85294048155287616,0.84767784013356984,0.84233043163664567,0.83689879079849772,0.83138346077868308,0.82578499310560805,0.82010394762137417,0.81434089242579599,0.80849640381959009,0.80257106624674723,0.79656547223608654,0.79048022234200477,0.78431592508441983,0.7780731968879212,0.77175266202012571,0.76535495252925356,0.75888070818092179,0.75233057639417067,0.74570521217672003,0.7390052780594708,0.73223144403025142,0.72538438746681955,0.71846479306912625,0.71147335279084434,0.70441076577017625,0.69727773825993777,0.69007498355693642,0.68280322193063969,0.67546318055115095,0.66805559341649101,0.66058120127920072,0.65304075157226482,0.64543499833437068,0.63776470213450365,0.63003062999589221,0.62223355531930469,0.61437425780571175,0.60645352337831471,0.59847214410395655,0.59043091811391268,0.58233064952408187,0.57417214835457231,0.5659562304487028,0.55768371739141664,0.54935543642712659,0.54097222037698856,0.53253490755562116,0.52404434168727609,0.51550137182146416,0.50690685224805343,0.49826164241183857,0.48956660682659953,0.48082261498864826,0.47203054128988264,0.46319126493034518,0.45430566983030646,0.44537464454187115,0.43639908216012629,0.42737988023382978,0.41831794067565897,0.40921416967201729,0.40006947759241951,0.39088477889845219,0.38166099205233167,0.37239903942505531,0.36309984720416832,0.3537643453011427,0.34439346725838998,0.33498815015590466,0.32554933451756002,0.31607796421705381,0.30657498638352293,0.2970413513068324,0.28747801234254439,0.27788592581658678,0.26826605092961792,0.25861934966111083,0.24894678667315256,0.23924932921398243,0.22952794702126419,0.21978361222511694,0.21001729925089915,0.20022998472177053,0.19042264736102704,0.18059626789423291,0.17075182895114532,0.16089031496745576,0.15101271208634384,0.14112000805986721,0.13121319215018379,0.12129325503062975,0.11136118868664958,0.10141798631660186,0.091464642232436749,0.08150215176026912,0.07153151114084326,0.061553717429913148,0.051569768398534638,0.041580662433290491,0.031587398436453896,0.021590975726095959,0.011592393936158275,0.0015926529164868282,-0.0084072473671486184,-0.018406306933053809,-0.02840352588360379,-0.038397904505235378,-0.04838844336841415,-0.058374143427580086,-0.068354006121047778,-0.078327033470865295,-0.088292228182607596,-0.098248593745108678,-0.10819513453010837,-0.11813085589181781,-0.12805476426637968,-0.13796586727122728,-0.14786317380431852,-0.15774569414324865,-0.16761244004421832,-0.17746242484086058,-0.18729466354290317,-0.19710817293466984,-0.20690197167339977,-0.21667508038737962,-0.22642652177388314,-0.23615532069689699,-0.24586050428463702,-0.25554110202683122,-0.26519614587177337,-0.27482467032312402,-0.28442571253646254,-0.29399831241556762,-0.30354151270842933,-0.31305435910297019,-0.32253590032247897,-0.33198518822073408,-0.34140127787682095,-0.35078322768961984,-0.36013009947196856,-0.36944095854447712,-0.37871487382899804,-0.38795091794173031,-0.3971481672859602,-0.4063057021444168,-0.41542260677124626,-0.42449796948358259,-0.43353088275271773,-0.44252044329485246,-0.45146575216142315,-0.4603659148289983,-0.46922004128872713,-0.47802724613534286,-0.48678664865569937,-0.49549737291684492,-0.50415854785361147,-0.51276930735572379,-0.52132879035440649,-0.5298361409084934,-0.53829050829001768,-0.54669104706928717,-0.55503691719942383,-0.56332728410037003,-0.57156131874234373,-0.57973819772874313,-0.58785710337848274,-0.59591722380776424,-0.60391775301126061,-0.61185789094271925,-0.61973684359496328,-0.62755382307929364,-0.63530804770427562,-0.64299874205390883,-0.65062513706516734,-0.65818647010490494,-0.6656819850461192,-0.67311093234356167,-0.68047256910869403,-0.68776615918397377,-0.69499097321647196,-0.70214628873080542,-0.70923139020138615,-0.71624556912397053,-0.72318812408651212,-0.73005836083929954,-0.73685559236438336,-0.74357913894427463,-0.75022832822991903,-0.7568024953079282,-0.76330098276707337,-0.76972314076402437,-0.77606832708833229,-0.7823359072266528,-0.78852525442619503,-0.79463574975739737,-0.80066678217581766,-0.80661774858324053,-0.81248805388798429,-0.81827711106441026,-0.82398434121162578,-0.82960917361137088,-0.83515104578509347,-0.84060940355019453,-0.84598370107544651,-0.85127340093557446,-0.85647797416500115,-0.86159690031074054,-0.86662966748444425,-0.87157577241358819,-0.87643472049180138,-0.8812060258283253,-0.8858892112966027,-0.8904838085819885,-0.8949893582285835,-0.89940540968517768,-0.90373152135030566,-0.90796726061640542,-0.91211220391308034,-0.9161659367494549,-0.92012805375562401,-0.92399815872318791,-0.92777586464487549,-0.93146079375324253,-0.93505257755844939,-0.93855085688510786,-0.94195528190820099,-0.94526551218806332,-0.94848121670442564,-0.95160207388951601,-0.9546277716602164,-0.95755800744927111,-0.96039248823554335,-0.96313093057331667,-0.96577306062063883,-0.96831861416670717,-0.97076733665828829,-0.97311898322517387,-0.97537331870466648,-0.97753011766509701,-0.97958916442836685,-0.98155025309151556,-0.98341318754731077,-0.98517778150385948,-0.98684385850323653,-0.9884112519391306,-0.98987980507350393,-0.99124937105226696,-0.99251981291996316,-0.99369100363346452,-0.99476282607467559,-0.99573517306224535,-0.99660794736228553,-0.99738106169809326,-0.99805443875887945,-0.99862801120749889,-0.99910172168718481,-0.99947552282728402,-0.99974937724799395,-0.99992325756410083,-0.99999714638771797,-0.99997103633002449,-0.99984493000200436,-0.99961884001418544,-0.99929278897537799,-0.99886680949041418,-0.99834094415688757,-0.9977152455608933,-0.99698977627176955,-0.99616460883584068,-0.99523982576916259,-0.99421551954927134,-0.99309179260593539,-0.99186875731091262,-0.99054653596671316,-0.9891252607943698,-0.98760507392021535,-0.98598612736167035,-0.98426858301204156,-0.98245261262433248,-0.98053839779406893,-0.97852612994113852,-0.97641601029064973,-0.97420824985280907,-0.97190306940182081,-0.96950069945380879,-0.96700138024376603,-0.96440536170153046,-0.96171290342679339,-0.95892427466313845,-0.95603975427111809,-0.95305963070036748,-0.94998420196076083,-0.94681377559260893,-0.94354866863590658,-0.94018920759862834,-0.93673572842407893,-0.93318857645729758,-0.9295481064105251,-0.92581468232773212,-0.92198867754821623,-0.91807047466926694,-0.91406046550790698,-0.9099590510617106,-0.90576664146870445,-0.90148365596635482,-0.89711052284964243,-0.89264767942823464,-0.88809557198275424,-0.88345465572015314,-0.87872539472818989,-0.87390826192902238,-0.86900373903191608,-0.86401231648507437,-0.85893449342659201,-0.85377077763454334,-0.8485216854762041,-0.84318774185641676,-0.83776948016509778,-0.83226744222390125,-0.82668217823203571,-0.82101424671124701,-0.81526421444996344,-0.80943265644661944,-0.8035201558521553,-0.79752730391170423,-0.79145469990546602,-0.78530295108878057,-0.77907267263140312,-0.77276448755598715,-0.76637902667578439,-0.75991692853156101,-0.75337883932774652,-0.74676541286781228,-0.74007731048889436,-0.7333152009956565,-0.72647976059341313,-0.71957167282050749,-0.71259162847996149,-0.70554032557039192,-0.69841846921621353,-0.69122677159712642,-0.68396595187690068,-0.67663673613145692,-0.66923985727626201,-0.66177605499303693,-0.6542460756557914,-0.64665067225618345,-0.63899060432822374,-0.63126663787232085,-0.62347954527868532,-0.61563010525008632,-0.60771910272398577,-0.5997473287940438,-0.59171558063100937,-0.58362466140300728,-0.57547538019521716,-0.56726855192896863,-0.55900499728024877,-0.55068554259763758,-0.54231101981966978,-0.53388226639164427,-0.52540012518187929,-0.51686544439742876,-0.50827907749925838,-0.49964188311690244,-0.49095472496260095,-0.48221847174493154,-0.47343399708193507,-0.46460217941375737,-0.45572390191480472,-0.44680005240543003,-0.43783152326314689,-0.4288192113333959,-0.41976401783985889,-0.41066684829434086,-0.40152861240621462,-0.39235022399145386,-0.38313260088125134,-0.37387666483023602,-0.36458334142430132,-0.35525355998804264,-0.34588825349182883,-0.33648835845850422,-0.32705481486974064,-0.31758856607203484,-0.30809055868237811,-0.29856174249359357,-0.28900307037936113,-0.27941549819892586,-0.26979998470151617,-0.26015749143046807,-0.25048898262707492,-0.24079542513415919,-0.23107778829939224,-0.22133704387835867,-0.21157416593738504,-0.20179013075612889,-0.19198591672995502,-0.18216250427209502,-0.17232087571561025,-0.16246201521515419,-0.15258690864856114,-0.14269654351825772,-0.13279190885251674,-0.12287399510655005,-0.11294379406346737,-0.10300229873509785,-0.093050503262688905,-0.083089402817496397,-0.073119993501263081,-0.063143272246612772,-0.053160236717356125,-0.04317188520872868,-0.033179216547556817,-0.023183229992379449,-0.013184925133521251,-0.0031853017931379904,0.0068146400747701756,0.016813900484349713,0.026811479517893238,0.036806377425826917,0.046797594726689887,0.056784132307078052,0.066764991521556349,0.076739174292518919,0.086705683210001327,0.09666352163141724,0.10661169378122355,0.11654920485049364,0.12647506109640269,0.13638826994159764,0.14628784007345494,0.1561727815432119,0.16604210586495721,0.17589482611448401,0.18572995702797787,0.19554651510054424,0.20534351868455461,0.21511998808781552,0.22487494567153371,0.23460741594808079,0.24431642567853773,0.25400100397002312,0.26366018237277838,0.27329299497701326,0.28289847850949296,0.29247567242986972,0.30202361902673236,0.31154136351337869,0.32102795412328977,0.33048244220531092,0.33990388231851271,0.3492913323267357,0.35864385349280037,0.36796051057238466,0.37724037190754439,0.38648250951987934,0.39568599920333081,0.4048499206165983,0.41397335737517799,0.42305539714299684,0.43209513172364716,0.44109165715120235,0.45004407378061762,0.45895148637769029,0.46781300420858429,0.4766277411288995,0.48539481567229026,0.49411335113860816,0.50278247568157275,0.51140132239595237,0.51996902940425871,0.52848473994293077,0.53694760244801176,0.54535677064030197,0.55371140360999072,0.562010665900743,0.57025372759324666,0.57843976438820011,0.58656795768874637,0.59463749468232863,0.60264756842197231,0.6105973779069791,0.61848612816302395,0.62631303032165586,0.63407730169918142,0.64177816587493375,0.6494148527689112,0.65698659871878906,0.66449264655628204,0.67193224568286214,0.67930465214481484,0.68660912870763846,0.69384494492976367,0.7010113772355987,0.70810770898788378,0.71513323055935785,0.72208723940371844,0.72896904012587649,0.73577794455149359,0.74251327179580184,0.74917434833168939,0.7557605080570543,0.76227109236141122,0.76870545019175585,0.77506293811766702,0.78134292039565001,0.78754476903271098,0.79366786384915311,0.7997115925405982,0.80567535073921326,0.81155854207414879,0.81736057823117292,0.82308087901150551,0.82871887238983533,0.8342739945715234,0.83974569004897992,0.84513341165721734,0.8504366206285644,0.85565478664654393,0.86078738789890163,0.86583391112978991,0.87079385169109114,0.87566671359288262,0.88045200955303438,0.88514926104593827,0.88975799835035962,0.89427776059640884,0.89870809581162692,0.9030485609661848,0.90729872201718398,0.91145815395206131,0.91552644083108958,0.91950317582897068,0.92338796127551892,0.92718040869542695,0.93088013884711363,0.93448678176064603,0.9379999767747389,0.94141937257281827,0.94474462721815411,0.94797540818805248,0.95111139240710896,0.95415226627951477,0.95709772572041729,0.95994747618632614,0.96270123270457009,0.96535871990179178,0.96791967203148654,0.97038383300057496,0.97275095639501374,0.97502080550443626,0.97719315334582302,0.97926778268619996,0.9812444860643621,0.98312306581161879,0.98490333407156083,0.98658511281884587,0.98816823387700037,0.98965253893523797,0.99103787956428979,0.99232411723124747,0.99351112331341584,0.99459877911117611,0.99558697585985478,0.99647561474060065,0.99726460689026586,0.99795387341029318,0.99854334537460498,0.99903296383649598,0.99942267983452793,0.99971245439742595,0.99990225854797521,0.99999207330591877,0.99998188968985557,0.99987170871813902,0.99966154140877417,0.99935140877831696,0.99894134183977201,0.99843138159949141,0.99782157905307434,0.99711199518026705,0.99630270093886564,0.99539377725761991,0.99438531502814043,0.9932774150958098,0.99207018824969795,0.99076375521148352,0.98935824662338179,0.98785380303508008,0.98625057488968371,0.98454872250867109,0.98274841607586183,0.98084983562039951,0.97885317099874736,0.97675862187570361,0.97456639770443498,0.97227671770553203,0.9698898108450863,0.96740591581179491,0.96482528099309084,0.96214816445030626,0.95937483389286415,0.9565055666515091,0.95354064965057428,0.95048037937928886,0.94732506186212995,0.94407501262821969,0.94073055667977312,0.93729202845959758,0.93375977181765069,0.93013413997665262,0.92641549549676616,0.92260421023934025,0.91870066532972472,0.91470525111915757,0.91061836714573041,0.90644042209443398,0.90217183375629328,0.89781302898658444,0.89336444366215195,0.88882652263782103,0.88419971970191269,0.87948449753086488,0.87468132764296525,0.86979069035119905,0.86481307471522184,0.85974897849244825,0.85459890808828043,0.84936337850546728,0.84404291329260406,0.83863804449177826,0.83314931258536595,0.82757726644198404,0.82192246326160223,0.81618546851982832,0.81036685591135482,0.80446720729259369,0.79848711262349026,0.79242716990852835,0.78628798513692921,0.78007017222205433,0.77377435294001229,0.76740115686748733,0.76095122131877435,0.75442519128205343,0.74782371935488978,0.74114746567897516,0.73439709787411334,0.72757329097145973,0.72067672734601684,0.7137080966484024,0.70666809573587797,0.69955742860266801,0.69237680630956044,0.68512694691280063,0.67780857539228678,0.67042242357907222,0.662969230082182,0.65544974021475733,0.64786470591951761,0.64021488569357132,0.63250104451256628,0.62472395375419243,0.61688439112104476,0.60898314056285352,0.60102099219809035,0.59299874223495508,0.58491719289176169,0.57677715231670845,0.5685794345070696,0.56032485922779474,0.55201425192953291,0.54364844366608833,0.5352282710113162,0.52675457597546338,0.51822820592097518,0.50965001347775041,0.50102085645788463,0.49234159776988917,0.48361310533239998,0.47483625198738716,0.46601191541287112,0.45714097803515424,0.44822432694058489,0.43926285378684055,0.43025745471376869,0.42120903025377215,0.41211848524175659,0.40298672872464775,0.39381467387048763,0.38460323787711825,0.3753533418804611,0.36606591086241103,0.35674187355832859,0.34738216236417424,0.3379877132432676,0.32855946563269217,0.31909836234935213,0.30960534949569152,0.30008137636508325,0.29052739534690719,0.28094436183130178,0.27133323411363275,0.26169497329866259,0.25203054320444102,0.24234091026592378,0.23262704343833002,0.22288991410024592,0.2131304959564945,0.20334976494075557,0.19354869911798017,0.183728278586583,0.17388948538043356,0.1640333033706535,0.15416071816723032,0.14427271702045727,0.1343702887222073,0.12445442350706171,0.11452611295327708,0.10458634988363526,0.094636128266160052,0.084676443114721417,0.074708290389534776,0.064732666897565891,0.054750570192849179,0.044762998476740277,0.034770950498086081,0.024775425453357765,0.014777422886730236,0.0047779425901285115,-0.0052220154967506207,-0.015221451386431743,-0.025219365143660497,-0.03521475698538918,-0.045206627380764856,-0.055193977151074512,-0.065175807569663902,-0.075151120461809301,-0.085118918304534261,-0.095078204326360952,-0.10502798260698659,-0.11496725817687631,-0.12489503711675232,-0.13481032665699549,-0.14471213527691454,-0.15459947280389894,-0.16447135051243542,-0.17432678122297965,-0.18416477940067341,-0.19398436125389898,-0.20378454483265052,-0.21356435012673869,-0.22332279916378389,-0.2330589161070144,-0.24277172735284935,-0.25246026162825808,-0.2621235500878869,-0.27176062641094417,-0.28137052689782505,-0.2909522905664908,-0.30050495924855936,-0.31002757768512301,-0.31951919362227366,-0.32897885790632714,-0.33840562457873813,-0.34779855097069501,-0.35715669779738762,-0.36647912925192838,-0.37576491309894228,-0.38501312076778266,-0.39422282744538945,-0.40339311216876961,-0.41252305791709271,-0.42161175170339216,-0.43065828466586487,-0.43966175215875003,-0.44862125384280294,-0.45753589377532133,-0.46640478049974088,-0.47522702713477982,-0.48400175146312646,-0.49272807601966023,-0.50140512817919891,-0.51003204024375437,-0.51860794952931077,-0.52713199845208603,-0.53560333461429133,-0.54402111088936977]},"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"type":"scatter","mode":"markers","inherit":true}},"layout":{"margin":{"b":40,"l":60,"t":25,"r":10},"title":"Interactive Scatter Plot","xaxis":{"domain":[0,1],"automargin":true,"title":"var_random"},"yaxis":{"domain":[0,1],"automargin":true,"title":"var_norm"},"hovermode":"closest","showlegend":false},"source":"A","config":{"modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"data":[{"x":[-0.021880540996789932,0.19263003300875425,-0.1983107510022819,-0.72982859285548329,0.92938483133912086,0.10576640022918582,0.46928654750809073,0.19543938292190433,0.91406799387186766,0.24384744418784976,-0.083968411199748516,0.041632779873907566,0.34836227213963866,0.97685562865808606,-0.22199399396777153,0.067488083150237799,0.79373972350731492,-0.55769679695367813,-0.58328401483595371,-0.4211868611164391,0.061085194814950228,-0.57094689039513469,0.76644744491204619,0.94890992715954781,0.096199130639433861,-0.97263894649222493,0.6527897147461772,-0.3104147776030004,0.75096413912251592,-0.24358091410249472,0.22403836296871305,0.45259170327335596,0.6034444710239768,0.85607663076370955,0.74735934007912874,-0.5001342068426311,0.53971668565645814,0.024360672570765018,-0.51298717083409429,-0.70295144710689783,0.65914056124165654,-0.058385970070958138,0.59734020475298166,0.77686483319848776,0.060369426384568214,-0.58243054943159223,0.075929167680442333,-0.24973518634214997,0.94839177466928959,0.77834022045135498,-0.64089082693681121,0.27213874412700534,-0.038052072282880545,0.84086142014712095,0.96110094850882888,0.91727244248613715,0.60358188906684518,-0.072320214938372374,0.059173076413571835,-0.64332561381161213,-0.57551937503740191,-0.71190180769190192,-0.19452736061066389,0.074871413875371218,0.82496124086901546,-0.6239082058891654,0.31933366227895021,-0.19233427476137877,0.90971332276239991,0.29663419164717197,0.52316449023783207,-0.99392309505492449,0.30505440011620522,0.5605553612112999,-0.35613367380574346,0.56646370608359575,0.17014073487371206,-0.059932946227490902,-0.78107470087707043,0.81441508140414953,-0.9397040456533432,0.14454838121309876,-0.41667067771777511,0.20704362308606505,-0.23409059690311551,-0.18939517391845584,0.49950823187828064,-0.93639285396784544,0.82406271807849407,-0.86761975148692727,-0.79863123223185539,-0.58284661313518882,-0.54794584959745407,0.21629478549584746,0.018319717142730951,0.1001927712932229,0.037301391363143921,0.24905206356197596,-0.1886792192235589,0.73217811761423945,0.30727496789768338,-0.60359146911650896,-0.44363662041723728,-0.94143867772072554,-0.30463663954287767,-0.55287476116791368,0.18562377942726016,0.87333019450306892,-0.025090939830988646,-0.87330397451296449,0.64003942860290408,-0.27588080894201994,0.88566457945853472,-0.30717321299016476,-0.3749925340525806,0.068256120197474957,0.41826472710818052,0.17163169989362359,0.30840058997273445,0.062387028243392706,0.1280615758150816,0.29232217092067003,0.87856450537219644,-0.4535332559607923,0.27952684881165624,0.14456308446824551,-0.85568687319755554,-0.49692567624151707,0.61270675295963883,-0.66463510226458311,0.3678552471101284,0.19205265259370208,0.38665899122133851,0.53550535067915916,-0.77575419005006552,-0.55469216499477625,0.51335744326934218,-0.42782268580049276,-0.07847242895513773,0.61389790661633015,-0.25312355253845453,-0.65161893796175718,0.58145407307893038,-0.67075860407203436,0.69334356486797333,-0.69515954470261931,-0.2703674528747797,0.73758533364161849,-0.72655443428084254,-0.31292963866144419,-0.6077948184683919,0.67075741058215499,0.37384782219305634,0.24931170046329498,-0.24803447723388672,0.55848004668951035,0.2240917538292706,0.22953308233991265,-0.93132449965924025,0.54223713325336576,-0.60440710466355085,0.84679242549464107,0.14830422634258866,-0.23565576365217566,-0.17348808003589511,0.096872995141893625,-0.31854380341246724,-0.26842654542997479,0.5189097486436367,-0.25505013018846512,0.19494382524862885,0.63000941928476095,0.712514977902174,-0.077491943724453449,-0.66807221062481403,0.041649777442216873,-0.32429550681263208,-0.34473583241924644,-0.73447958147153258,-0.012624578550457954,-0.74931572237983346,0.84672410925850272,-0.33255977369844913,-0.97242316836491227,0.59855803055688739,-0.3070865711197257,-0.28510972484946251,-0.78640644624829292,0.43244227673858404,0.069655636791139841,0.78083867440000176,-0.0066116191446781158,0.61425364622846246,-0.97496926598250866,0.14725175639614463,0.92975489096716046,0.95412605395540595,0.96154742920771241,0.95976189477369189,0.43497259635478258,-0.58995060669258237,-0.83522521751001477,-0.59887774381786585,0.14489848120138049,-0.46425776882097125,-0.15110747050493956,0.60142456647008657,-0.10948878293856978,0.26237174635753036,-0.063005207106471062,-0.70469572162255645,0.031686395406723022,-0.24559894017875195,-0.39273527730256319,-0.5513116167858243,0.26469112141057849,0.88621033495292068,0.75199066195636988,-0.4827486053109169,-0.48359200404956937,-0.31499791936948895,-0.90568085201084614,-0.82219859352335334,-0.66499127773568034,0.9670604825951159,0.807002869900316,-0.78807730367407203,-0.8649323801510036,0.55087455688044429,-0.74587921006605029,-0.5429318742826581,0.11244806181639433,0.43451746832579374,-0.21135820029303432,-0.56769701186567545,0.72182667441666126,-0.74486172990873456,-0.0080406381748616695,0.98556232918053865,0.076332406606525183,-0.82723718835040927,0.055566183291375637,-0.42399315489456058,0.36289607360959053,0.375929472502321,-0.80637121573090553,-0.48522872757166624,-0.27323284931480885,0.20633250055834651,0.71411751909181476,0.37566555151715875,-0.17346467636525631,-0.60647324612364173,0.6244422560557723,0.8517000824213028,0.34559289086610079,0.73637468228116632,0.14652455039322376,-0.061899206135421991,-0.649109220597893,-0.85442459164187312,-0.67453697789460421,0.25082292919978499,-0.33883408317342401,-0.42972894571721554,-0.19735356979072094,0.55593568831682205,-0.94980562571436167,0.42708057397976518,-0.028486131690442562,0.13408667640760541,-0.17584934923797846,0.92946318304166198,-0.40370361506938934,0.72210406186059117,0.64674459537491202,0.55307589983567595,-0.19533445639535785,0.87177220452576876,0.61153337405994534,0.72778667928650975,-0.74054248258471489,-0.65459738299250603,0.59436049358919263,0.47127643181011081,-0.47744871629402041,-0.7565271076746285,-0.12704974738880992,0.047738683875650167,-0.21735502360388637,0.34022798901423812,0.96010697307065129,-0.17213198123499751,0.69115010788664222,0.99224534537643194,-0.27972804522141814,0.8755618529394269,-0.16769649367779493,0.38278309162706137,-0.58249172335490584,-0.12347635440528393,0.46559735434129834,0.14010896254330873,0.76455709617584944,-0.23771532811224461,0.88093894021585584,0.23854049062356353,-0.8016162533313036,0.41361353173851967,0.56447037030011415,0.26528223976492882,0.22863625921308994,0.34845479344949126,0.69851074041798711,0.55227257125079632,0.61210328666493297,-0.46911052847281098,0.6169727542437613,0.27150863641873002,0.34179876511916518,-0.11548128444701433,0.95738867949694395,-0.83637034660205245,-0.61049769539386034,-0.64586108783259988,0.11092350026592612,0.23703275620937347,-0.58414558600634336,-0.3069064412266016,0.43105900334194303,-0.55070176301524043,0.43621777929365635,0.71850260347127914,0.24885901901870966,0.059796084184199572,-0.60955556761473417,0.21492378227412701,-0.3627502778545022,-0.73626707307994366,-0.99541697464883327,-0.77532103937119246,-0.36803550738841295,0.69521939847618341,-0.98568094661459327,0.8517463319003582,0.5643740831874311,0.9758909409865737,-0.20223522279411554,-0.40662808204069734,-0.48387807281687856,0.025705242995172739,-0.88612866587936878,-0.088815983850508928,0.8562403810210526,-0.070399015676230192,0.21297001373022795,-0.53612284548580647,0.53799206856638193,0.81395348394289613,-0.43482107436284423,0.42948720557615161,-0.53811289137229323,0.95561823341995478,-0.92785541480407119,-0.070870294235646725,0.4552519740536809,-0.67268942436203361,-0.017766742967069149,0.80402336688712239,0.77801611088216305,-0.65168576035648584,0.0056961583904922009,-0.22401042887941003,0.67094566579908133,0.77066080225631595,0.10644966876134276,-0.12722432613372803,-0.8079476528801024,0.027073868550360203,0.79114177403971553,-0.85138959670439363,-0.71558200195431709,0.53302705707028508,0.26625897129997611,0.45210956642404199,0.49642672063782811,0.37549328012391925,-0.82177222520112991,0.17421413073316216,-0.26494000293314457,-0.98932961886748672,-0.0040262714028358459,0.57460779370740056,-0.19214707612991333,0.56519260257482529,0.79940387653186917,0.26794627215713263,0.5602004686370492,0.10949134500697255,0.78495922917500138,0.63008514000102878,0.51217549433931708,-0.18239381955936551,-0.18169500259682536,0.48988701868802309,-0.99551671557128429,0.70549659756943583,-0.027177682146430016,-0.68033216986805201,0.55209264764562249,-0.14089527446776628,0.66116194613277912,0.36358096078038216,-0.39399249106645584,0.22061898279935122,-0.81388708250597119,-0.56662328587844968,0.57566557684913278,-0.89722524490207434,-0.31388345174491405,-0.65050607128068805,0.55858572525903583,0.60896968655288219,-0.56486807111650705,-0.40392969129607081,0.12320967577397823,0.39682746771723032,0.61778720747679472,0.20533370412886143,-0.78994687367230654,0.25297930091619492,0.26359982928261161,0.53666081139817834,-0.78556174226105213,-0.35279158363118768,-0.45596101460978389,-0.57697268994525075,-0.69749162113294005,0.95068751741200686,-0.68021199340000749,-0.52577580604702234,0.33684749435633421,-0.08387101860716939,0.92049623560160398,-0.08006229205057025,0.012179146055132151,0.45856846915557981,0.70167986722663045,-0.23982218839228153,0.52726980950683355,0.5029386505484581,-0.8303926344960928,0.81329353433102369,0.24876285204663873,-0.040304499678313732,0.52888147858902812,-0.93126958236098289,0.062991057988256216,0.25656430097296834,-0.7666499032638967,-0.21427402272820473,-0.088595763314515352,0.97423389088362455,0.31350142415612936,-0.77422475349158049,0.83311596792191267,0.98039250075817108,0.74832632904872298,-0.12404273869469762,0.011786545161157846,-0.3107100329361856,0.94086666218936443,-0.77256063325330615,0.94084128085523844,0.82580413855612278,-0.52830803301185369,-0.75919250445440412,-0.39435935160145164,-0.26096131792291999,0.23687691986560822,0.42615452688187361,0.1530827903188765,-0.97924662102013826,-0.27796061430126429,0.68726759217679501,0.75540384696796536,-0.79660363215953112,-0.22183861769735813,0.31227566534653306,-0.25135299284011126,0.6695556640625,-0.19270735513418913,0.81052650744095445,0.53363530430942774,0.4821433643810451,-0.57131734164431691,-0.021747284103184938,-0.40809093415737152,-0.11364150047302246,-0.57560635916888714,-0.49152952712029219,-0.4883959973230958,0.6570557882077992,-0.82254533050581813,0.91931059584021568,-0.31013941904529929,-0.63422885583713651,0.34456333797425032,0.69621111499145627,-0.050180078018456697,-0.68705433467403054,-0.14246898284181952,-0.81510843336582184,-0.63162605604156852,0.84904565988108516,-0.39830773416906595,-0.62523632775992155,-0.86520296707749367,0.50777590135112405,-0.48839326482266188,-0.31033339072018862,-0.26874509919434786,0.10185780562460423,0.32909864652901888,0.44879951328039169,-0.022871434688568115,0.24924845434725285,0.75702689681202173,-0.73996569681912661,0.94598161382600665,-0.87327214144170284,-0.9571372321806848,-0.18729651346802711,0.070827604737132788,0.65692696813493967,-0.40731622045859694,-0.0013000038452446461,-0.7154162498190999,-0.83559614978730679,0.25519345747306943,-0.91399899870157242,0.43560935975983739,-0.7582569969817996,-0.42767846258357167,0.30498015088960528,0.97419370338320732,0.82930752728134394,0.043635849840939045,-0.15571218309924006,-0.0085257980972528458,-0.19400129513815045,-0.8107803869061172,0.22092104703187943,0.44688236992806196,0.75596867315471172,-0.51656566793099046,-0.016387379728257656,0.015690559986978769,0.33894440112635493,0.24472513794898987,-0.83373515075072646,0.28925816435366869,0.73524347087368369,-0.25106757320463657,0.21335936710238457,-0.37901254091411829,-0.63727239100262523,-0.092854623217135668,0.57315233862027526,0.67356898682191968,-0.99702472938224673,-0.23379524191841483,0.78447826579213142,0.95547970710322261,-0.043927666731178761,0.29606121266260743,-0.87644235603511333,-0.58825268596410751,-0.13963065529242158,-0.72595027042552829,-0.70939749293029308,-0.25498317088931799,-0.24628902738913894,0.2318530110642314,0.54903220338746905,0.45101294293999672,-0.97687027091160417,-0.93536783382296562,0.95988012803718448,0.76986610190942883,0.56411307444795966,-0.12298140395432711,0.031268751714378595,0.92898336937651038,0.14558368222787976,-0.7037693508900702,-0.38651872985064983,0.16779820015653968,-0.91762380581349134,-0.079791693482547998,0.91315352125093341,0.44491576449945569,0.88285045186057687,-0.81561235245317221,-0.2451323508284986,0.77912960574030876,0.062432741746306419,-0.45654750755056739,0.032940490171313286,-0.74685593228787184,-0.26734990999102592,0.49586176034063101,0.28585293050855398,0.376188057474792,0.74166069459170103,-0.60909640602767467,-0.5022361995652318,0.79327320773154497,0.36323633464053273,-0.66758028184995055,-0.25649069389328361,0.59280235506594181,0.38386237109079957,0.27645499212667346,0.49901899974793196,-0.04182164091616869,0.022585687227547169,-0.69181754440069199,-0.18483333522453904,-0.55093137081712484,0.20254090940579772,-0.65277401357889175,-0.5869883606210351,-0.78014535782858729,-0.28968618577346206,-0.89569042390212417,-0.98112965933978558,0.24735565390437841,0.7317780489102006,0.0080342339351773262,0.10620209248736501,-0.5493305423296988,-0.916867989115417,-0.21346712857484818,0.91554675018414855,-0.73320636292919517,0.93606058834120631,-0.2680532643571496,0.97652189992368221,0.36064051883295178,-0.21025004610419273,0.090351071674376726,-0.26174834324046969,0.96362390089780092,0.38101533334702253,0.42873152624815702,0.47518304502591491,-0.90476586064323783,-0.67899132939055562,-0.68658763263374567,0.2442853762768209,0.44322001188993454,-0.6695793173275888,-0.36841784976422787,-0.855990388430655,-0.411246866453439,0.77798748249188066,0.84034619992598891,0.19728879258036613,-0.4139896584674716,0.69095406075939536,0.73760261991992593,0.5961058815009892,0.97114221891388297,0.0099995657801628113,-0.93774268822744489,0.37476205825805664,-0.74141308199614286,0.89644201612100005,0.59448297321796417,-0.75393122807145119,0.71459315251559019,-0.097861987538635731,0.24968651123344898,0.37010051403194666,-0.79048747615888715,-0.71367786824703217,0.60426545236259699,0.8318804195150733,0.1161668049171567,-0.18500350322574377,-0.89187899883836508,0.91551844775676727,0.18004336953163147,-0.71239303844049573,-0.65003968449309468,0.40827162796631455,-0.48286670073866844,-0.90633709914982319,0.12549143889918923,-0.35075525753200054,0.30583671946078539,-0.12113089673221111,-0.83129222923889756,-0.62516669556498528,-0.096891900990158319,0.14668151410296559,0.41821126360446215,0.66743630915880203,-0.49883219553157687,-0.79936705948784947,-0.38478182442486286,-0.12753416923806071,0.22486855974420905,0.84883975610136986,0.73827197728678584,-0.49516952550038695,-0.15423753438517451,-0.76305432245135307,-0.86419663857668638,0.39825959596782923,0.90520387515425682,-0.73825309192761779,-0.11254251841455698,-0.033962392713874578,0.022793552838265896,0.030063821468502283,-0.52519321581348777,-0.49686665739864111,0.30193795263767242,-0.52655324060469866,-0.87020220421254635,0.46655215322971344,-0.44740900490432978,-0.95719122560694814,-0.1208203649148345,-0.27942521404474974,0.26328858220949769,-0.20275026047602296,-0.027794027701020241,-0.097447121515870094,-0.75086378026753664,-0.39627718878909945,-0.21278844494372606,0.76800812548026443,-0.1607966716401279,0.56752875307574868,-0.13130665989592671,0.33502218034118414,0.75699542881920934,-0.48006688943132758,-0.74182903720065951,-0.59789653774350882,-0.56331530073657632,0.21460341429337859,-0.054445244371891022,-0.69884691946208477,-0.99511308036744595,0.93764112237840891,0.60721767507493496,-0.97969888197258115,-0.27149898931384087,0.99293571570888162,0.18156645493581891,-0.93903527734801173,0.12128766905516386,-0.028144762851297855,0.1921051973477006,0.98802735563367605,0.74157337797805667,0.44369396381080151,-0.93323123687878251,0.20497169438749552,-0.52066107792779803,0.75289865909144282,0.10292882798239589,-0.41819916432723403,0.79325089138001204,-0.098359523806720972,0.51497132983058691,-0.065954236779361963,0.25473087606951594,-0.91654461063444614,0.17389205936342478,0.39797656144946814,0.74427800346165895,0.57556099956855178,-0.2166837016120553,-0.54991671722382307,0.92380366753786802,0.42875966848805547,0.91145969182252884,0.54689101222902536,0.42314792657271028,-0.19111162051558495,0.76885253749787807,-0.27753667766228318,0.33229947974905372,0.61115826666355133,-0.6141041019000113,-0.33243172010406852,0.22934024222195148,-0.047588185872882605,0.53157684253528714,0.8982840022072196,0.52317369543015957,0.36414677230641246,0.98776240227743983,-0.40364719601348042,-0.20121223805472255,-0.60125488042831421,0.44878728222101927,0.55629364959895611,-0.014251383021473885,-0.36872840160503983,-0.87229163432493806,0.66555019980296493,-0.86001897277310491,0.80428574746474624,-0.29478265298530459,0.093662149272859097,-0.4187887660227716,-0.62695968942716718,-0.42503101984038949,-0.99090696778148413,-0.84841481735929847,-0.41321859881281853,0.078329717740416527,0.49770580232143402,0.65836175391450524,0.34831717843189836,-0.25603147828951478,0.34162865905091166,-0.62599630746990442,0.74942923942580819,-0.69295079167932272,0.61121900379657745,0.94844903005287051,-0.27856223843991756,-0.5099154687486589,0.097240065224468708,-0.7005396862514317,-0.11242047511041164,0.73366081109270453,0.0013702209107577801,-0.53011508658528328,-0.31001207465305924,0.51954512670636177,-0.26619376102462411,0.039751128759235144,0.044142901431769133,0.88504638150334358,-0.31004359433427453,0.31921345647424459,-0.37323840474709868,-0.44439189089462161,0.81779127428308129,-0.63279986521229148,-0.90311515564098954,-0.18210631283000112,0.016421544831246138,0.51662028860300779,-0.79038939671590924,-0.93634439073503017,-0.24177600303664804,-0.97879745718091726,-0.53388761216774583,0.68896528193727136,0.56651869649067521,0.46100073773413897,-0.010648512747138739,-0.54568216577172279,0.94943452579900622,0.68659745110198855,-0.065530252642929554,0.6572076422162354,0.59230501437559724,-0.59647469781339169,-0.94098927266895771,-0.90299433004111052,-0.4055789546109736,0.46879796497523785,-0.64293466182425618,0.071641998831182718,-0.58655583625659347,0.57583487825468183,-0.33491531200706959,0.82653046632185578,0.9337661312893033,-0.5731504550203681,0.47474812436848879,-0.47044246643781662,0.75678012752905488,-0.1690105376765132,-0.49033603072166443,0.61901181749999523,-0.33158201584592462,0.33605657797306776,-0.20942681888118386,0.14614316960796714,0.53841733792796731,-0.74665693333372474,-0.51204450242221355,0.53289830777794123,-0.90915057528764009,-0.1699669542722404,-0.24147844640538096,-0.38481499394401908,-0.79946904769167304,0.14450258808210492,-0.18418056843802333,-0.23857630509883165,0.94206524593755603,-0.44952315464615822,0.61836305493488908,-0.8891604314558208,-0.82012407714501023,-0.76861528400331736,-0.61010266048833728,-0.55493485881015658,-0.3477863222360611,-0.38098978390917182,0.97946522291749716,0.49519595922902226,0.37897995812818408,0.91110127232968807,0.10012219334021211,0.05039303470402956,0.87489623390138149,0.11891882913187146,-0.23354894993826747,-0.20583864813670516,-0.75837930152192712,0.17331166611984372,-0.62771326303482056,0.37899272749200463,-0.56408307608217001,-0.34422703459858894,-0.90943436417728662,0.95366223016753793,0.74085675226524472,0.14000754849985242,0.3813423877581954,-0.57160378899425268,0.58285916084423661,0.67971138702705503,0.23467014357447624,0.15006705839186907,0.45507298735901713,0.69696711096912622,-0.02641822537407279,-0.95707521075382829,0.12691455986350775,0.082775336224585772,-0.21836345689371228,0.30652783159166574,-0.86768029257655144,0.33454523421823978,-0.54737888928502798,-0.3993540802039206,-0.52221794240176678,-0.3897473867982626,-0.79401812748983502,0.029143847059458494,-0.25328304478898644,-0.15358605841174722,0.41136773908510804,-0.24549241131171584,0.3970347810536623,0.0097490274347364902,-0.3214122224599123,0.0036865607835352421,0.22781974822282791,0.94490553205832839,0.89003938250243664,-0.92224205425009131,-0.53634750796481967,0.73092397395521402,-0.36518228054046631,0.51426355261355639,-0.72191115561872721,0.98977354448288679,0.6376398978754878,0.40590179059654474,-0.50854719243943691,-0.79481638595461845,0.1278502345085144,-0.39173708716407418,-0.38014610530808568,-0.68771285237744451,0.85846724361181259,0.065701567102223635,0.31974354758858681,0.98764592409133911,0.55711936578154564,-0.49910399736836553,-0.95738606760278344,0.9992379005998373,0.40782414563000202,0.40057603735476732,-0.99685306800529361],"y":[0.2635194829701295,0.17430151269097421,0.16265040418319227,0.097457334741924695,0.60538011335728881,0.57336473322222647,0.44652076739176733,0.80747210574036488,0.42937287478273622,0.56947749420293881,0.62269371614239144,0.55380266634310127,0.56070519694987297,0.46409526261648221,0.40959330547831263,0.60913045728861726,0.63196034847085714,0.63154704707531217,0.56695991932463485,0.69269751651977485,0.54838135286364031,0.57470175850906913,0.68297027333630522,0.75501509932109345,0.29369821133950424,0.26075651757080331,0.091014566210006642,-0.068774289831497581,0.98211596591419781,0.18139015686146215,0.88572892890448718,0.62638922573168532,0.1103577877443222,0.55828183090043459,0.67939721111782037,0.40411933303021125,0.39003287386477048,0.90311181162353682,0.6525812662957563,0.39761426026308211,0.70180529150975901,0.74947752409820623,0.87061402781005026,0.47975727103189653,0.58883773085504276,0.53097297868326121,0.37460052335284999,0.73034672011495894,0.063297755395868405,0.89174823872517184,0.66612235802574482,0.11420607200276622,0.54990899039537078,0.38198814018294686,0.76156427429504503,0.37592419851457004,0.81522855176637565,0.34263746274379381,0.76625694513163389,1.056992907813733,0.53938969910817813,0.13485973047105027,0.83785337708190277,0.51664533774931398,0.81800536494966258,0.48652371624371948,0.40496555350518965,0.29783030124998328,0.87993823596470877,0.58093559549220397,0.34658344347926118,0.26327871545978693,0.5063117868746575,0.8375583126705457,0.71363113401515799,0.54467501261181028,0.47107256196272623,0.35949238173143006,0.53531156517074652,0.7194389427294503,0.54043615638370668,0.64697194418747916,0.84868587785220029,0.24500445438501656,0.73566714518995335,0.61554511585610805,0.39561164314408015,0.3480560744260161,0.28175526840340359,-0.15290992482014087,1.0977583573654726,0.49300489143090626,0.58831665654685916,0.21931428260237545,0.2800869127448784,0.21340983238444516,0.69419571769902766,1.0563851416568439,0.55721217705538573,0.61109684432099498,0.25995090892497075,0.36500924738060209,0.92562899767036155,0.40821198763551531,0.46608516407867634,0.41938824217407222,1.2571646071048237,0.3762106938451375,0.39571987319895563,0.68469316438546701,0.71467055288185732,0.38032227280321579,0.89331031712035669,0.88336949092110606,0.47243080700012258,0.5687578202359248,0.58314679321267704,0.40249205496325224,-0.027116313622021604,0.57946563393524042,0.48013812606946832,0.55013516459622969,0.42953493327596748,0.7780344321517183,0.33028086800771123,0.067175186634745476,0.90981210910911792,0.84127862883686799,0.47148228868708347,0.53490896758422524,0.56038951700282535,0.20992302478038172,0.5068805371866778,0.83735610848049968,0.42208663358203813,0.83827959674614283,0.49977382380228547,0.51691694482306738,0.11480864865987694,0.7021148211118069,0.85507157754655383,0.509867433626365,0.015178820912240931,0.56039279111639506,0.85396017075215658,0.43511582338736787,0.51952217077834906,0.59536834291121532,0.26604077804774401,0.61601476478256656,0.8455051869195862,0.16489347595812648,0.24923476541979955,0.18194591289025203,0.19192754113968041,0.40995506888665195,0.31609761340945508,-0.055843906525479881,0.6471344875745636,0.2447576736787806,0.5220348977687872,0.62433242508050879,0.40622732743559298,0.59566561186906952,0.52302113283365503,0.67423994341396132,0.56860810631861936,0.47019484947878987,0.24462572005315436,0.41450013534547753,0.4807153174868577,0.58202072122790383,0.17257959347404722,0.60831627705324043,0.47310072824937555,-0.08634710943512347,1.2738615300002905,0.97967632606812005,-0.077004178446117955,1.0873018316447596,0.6015116927440799,0.94738017935398111,0.2286997265944431,0.588193376369337,0.27608450233876169,0.5281644194543087,0.33260637808275351,0.75513210550549692,0.62456324957669684,1.0143600952572438,0.46023973655974176,0.87351661056056862,0.11123749915490466,0.8925119783901887,0.55763116751401831,0.28980345195486196,0.018057919202176032,0.47456983839654338,0.51189059633322609,0.72698823220074915,0.62055592706305351,0.45474869868324802,0.51096620501025192,-0.14870231740903628,0.21220258171485817,0.3881722815106895,0.62799871242191418,0.40995606718688682,0.19599051829438885,0.21451318068808972,0.54920320639515863,0.46864903114396961,0.43194438163214322,0.53173001242691076,0.72611421345224869,0.61501799113844002,0.55645694362320586,0.22475588659054258,0.69647312142082418,0.51038133722277446,0.6754610901333411,0.19693711939865499,-0.13473978103571793,0.5638111982108498,0.44827397669437985,0.50590911302636032,0.52302509228135374,0.55022250689321672,0.5761909440784736,0.28010462388532142,0.40286634873934146,0.12360037437574484,0.84009688765119983,0.8846863270636921,0.34182915464580421,0.16209070362422012,0.378837205219899,0.38155157274275975,0.41702613993407295,0.24140176217303905,0.65572838410504264,0.7458092752548704,0.32030961923982737,0.29544569106421514,0.58940778461838117,0.26903200427160212,0.77552577581416315,0.76983242772242066,-0.25414289842499116,0.63931344595614259,0.28476500323338383,0.3927751539674747,0.088893222686993956,0.41668852345514984,0.27250293551318483,0.44608597927928761,0.3807729653311811,0.92242392155481312,0.5641262332246193,0.073291824484915724,0.61719959773799671,0.66991176663067886,0.2891655999398996,0.18424113832009559,0.59545993575054268,0.39932160287692398,0.60036467154275464,0.87915097942641873,0.49214247447837978,0.74776474026989648,0.46827557402393455,0.53082917507695582,0.66335167405231477,0.29005217050670623,0.71184914955899792,0.36105304317630971,0.6542707222326456,0.64671406422914401,0.64718263954130384,0.55692760720211953,0.98154123263669468,0.91138350256462752,0.44327989427821402,0.73251892126207019,0.2806914156469108,0.44636942733935164,0.88305886260706834,-0.0084385782142953891,0.55337760728625762,0.8977671911734828,0.21981123283241383,0.43623591319673993,0.57258738924077579,0.29211704659332993,0.50573377307877254,0.30077438145198337,0.57548289287476972,0.95969482322278743,0.76821857697007156,0.95414410111163528,0.6800468107278147,0.27448328614047957,0.48614641377917578,0.043681059600847671,0.33641782692317068,0.11868496888574437,0.65283419542178378,0.39482500412639343,0.46865760390863093,0.58777612228965892,0.083243766975121369,0.31339020621992597,0.7098280763465602,0.24714486439008299,0.14128394513700371,0.75161852626549364,0.84755618540483013,0.55099144320574589,0.58007487481642572,0.35355488509320321,0.51941181455927421,0.48923058580380563,0.012618170290585651,0.52208921112742057,0.36012980848815346,0.40300401550431492,0.42467303086172692,0.60769782683694673,0.2732127467204255,0.58129563794311223,0.61484061172633009,0.40320363243573509,0.63674608209809413,0.5931560762405087,0.57155055616248529,0.041817129967853695,0.29793551596256446,0.83052780424225714,0.58565660281890686,0.58415262631741327,0.59762508054963914,0.35187416708830366,0.48474727691093472,0.087111455186332509,0.1829556188093393,0.12610293583091653,0.4692590604093797,0.6982164117701769,0.66404523612146626,0.59975239379410938,0.80695561354317902,0.60757735288336778,0.99045836110216223,0.52975601004626216,0.40902156702436621,0.29143544491110562,-0.043535687980291504,0.32653852662798233,0.46400330262945549,0.41392295505947629,0.38142038315832838,-0.1434904420337838,0.38196607614213096,0.30848982450500773,0.54741832922173161,0.47644429976232827,0.92197918230215703,0.86355668693245868,0.70999946494886057,0.79527973163309462,0.31436237698079783,0.71351046679300811,0.52332451552774617,0.3058156354202648,0.34846644437633068,0.52842079438046763,0.47628269748076196,0.23175391335095452,0.84013741199296188,0.6921043204170032,0.70473787645829311,0.17198389741258857,0.43542525285111655,0.39598772563084211,0.13000680453213392,0.54628514336431111,0.576017825816735,0.37207268873356514,0.52380458807199004,-0.00088267696921118244,0.40959640291236343,0.51080125972574253,0.19024091433500423,0.7106373027584636,0.36876671015924223,0.3624054793259518,0.28013251463712419,0.53340291877535273,0.28016074933655483,0.51273220921584739,-0.06180721145835999,1.0350572562587401,0.67644731529209601,0.74793118841605988,0.49536207632435042,0.26398014852075991,0.57846918077344367,0.73530055083954027,0.65497725259507578,0.44591524509517244,0.63014553029098308,0.61216601959752392,0.70506673855079438,0.27709452367493742,0.78302669349781873,0.38129068429125562,0.43042043648115086,0.52274677732240649,0.52584870898450198,0.38757093659606889,0.64344587608226256,0.24737609317664094,0.3755111562061042,1.0278300935265678,0.9945950282396101,-0.032214570859106728,0.53114485614323015,0.53681891654357594,0.3883230443502198,0.2454585631638192,0.55405705437116115,0.37441480800389071,0.24215294067406562,0.74990336203865626,0.72102498263145087,0.34014185175474282,0.39712736762036316,0.68245772939892246,0.58360467753975964,0.60375643039619009,0.71556888464336599,0.0083106649064025317,0.24804386829434438,0.83509511649558688,0.35004103176965673,0.58600152501694458,0.60862011514990477,0.55568704012807657,0.73385750602370825,0.71334136948693927,0.094990577066936255,0.74887092908646447,0.707287139663896,0.82673858376256426,0.42393319641264304,0.78921860302919078,0.67868648769895712,0.54576559649929035,0.63023180168706183,0.33011899865967398,0.55647414689021812,0.47709628288411976,0.34521143960352041,0.35993976057311833,0.5030570074898939,0.85250669516909072,0.65456128999284524,0.45310354251253282,0.48416986965098802,0.66661094387021602,0.63785691569022385,0.88968424340060148,0.84176380958859554,0.77705115253325086,0.87853919882041231,0.51116666578321635,0.72231479019098799,0.3300170921990192,0.15869655850636266,0.0064836595295678645,0.88208100278700441,-0.1810942033092825,0.47788352365065517,0.92336734064790182,0.36733854591299897,0.82283962968491453,0.27789940059376506,0.52663870793510936,0.66692351752919077,0.99308035662150562,0.90548921069311006,0.53674764493221327,0.43408129542609886,0.36117121464909108,0.37800634628940055,0.31319493703437234,0.078088352980960896,0.70153734342597196,0.21907224401742675,0.79371177534283599,0.80198938389473318,0.81987632730968951,0.46125848565994376,0.56872076190067689,0.10452707848979725,0.20317203418298668,0.68086185908615193,0.514101196506624,0.24127033893845962,0.30221628857263605,0.54688030201101789,0.34483228725754905,0.31293320551146409,0.2150868454825301,0.55266535389240212,0.49198582433350813,0.37391833078403736,0.62574489394276323,0.29758685219377257,0.49155168708999208,0.28580561514257941,0.595005454019922,0.80132239717918186,0.2673653883930231,0.23181880224483403,0.46747932257476699,0.87803961987324919,0.79659714824606209,0.46586916797459377,0.63506821186206763,0.58647032309237868,0.060373052419554429,0.15476716842635463,-0.099117077149363797,0.60374427206610259,1.1793767112282258,0.45345626052574484,0.35802864700258241,0.74574504652250517,0.78276686615015889,0.62381724011363149,1.260710655403793,0.2022048401323831,0.72581281925508268,0.38713665320629415,0.18253579369676531,0.10608812366298132,0.91778976723812133,0.34593153147636935,0.62731157416383132,0.12859042374703622,0.22338208949711597,0.31178085199833189,0.57150238935179831,0.21507392135233644,0.82282913686879833,0.13179181755626901,0.54136126701870391,0.50465599242241044,0.61398824681816933,0.39570791587937787,0.51376633066582067,0.61944642312321319,0.59043187425158306,0.45142954847616601,0.66038979825389077,0.24994866406307481,0.77946135742462486,0.56469288839966003,0.64973168023132044,0.50432721890902454,1.0305698370616749,0.99526774046793887,0.43221682134529982,0.67411649894842629,0.50678915058011087,0.24468684395520057,0.32505122767469607,0.38104025848375445,0.1920886533145123,0.4991067416474243,0.6581356626665168,0.49158417672247523,0.33489859792745891,0.029580683133949903,0.36296857573343211,0.48818249785186485,0.35715647015559127,0.66037941557411761,0.60713754338387083,0.78217013276874003,0.36273524061571416,0.51039887977524756,0.97840828711414063,0.62081986592448757,0.55111197111546439,0.29223663115477644,0.2669060962919686,0.03966857562743481,0.47963081630469989,0.22413067568329825,0.72665152501694064,0.29771857786632006,0.1658289162469288,0.44844461839253191,0.76658364920004218,0.43997782093674498,0.57677185563064315,0.71118883730555926,0.29869699052007653,0.54862888434315327,0.57504411538033917,0.61627727474032046,0.21752109031139405,0.83222585803995341,0.49439921737237524,0.6905300202038922,0.63544733097420747,0.30222044380930746,0.65704220150155435,0.76112134006907683,0.7719448784006484,0.45124078525964589,0.23472836529073982,0.62228074699607394,0.17607526638616383,0.7239686918201943,0.0024891848082106427,0.43505719125404008,0.7371476267029613,0.55375082954462618,0.57402808720603948,0.082280238955536211,0.46696206952315245,0.33825987830916371,0.47224652180417337,0.69272968263195578,-0.014071694480562225,0.69119147367633549,0.66012995185448742,0.36429440364834975,0.88843363559038413,0.66812160966385203,0.73379775516663681,0.26958136917877928,0.22660358875033049,0.43524623153144132,0.35710382353315295,0.59401130173139316,0.6388964309172076,0.47939207670766892,-0.030027767413853379,0.11208895589037965,0.62802704295940015,0.77455072041210837,0.59152422048251518,0.5783513564208258,0.56526167928226667,0.88516451740198487,0.55333716075173278,0.047000094452621322,0.78218292767854458,0.69337703685917695,0.66906427394800061,0.68892151562673898,0.62625176904368951,0.17068954122453645,0.079317226776349226,0.88985753681715485,-0.039903222114712644,0.92412394303937662,0.73335111342699955,0.36963834061944556,0.1018748069582025,0.83817860539076738,-0.098767298271067561,0.13493911060932684,0.68725555146720141,0.47233670465920974,0.18100911248469448,0.25940525726889446,0.93918493199581332,0.64585988460159727,0.68794467930255299,0.14554336831651055,0.66338789401294962,0.544031733884632,0.52218589982390695,0.3715744862279462,0.74576735822639761,0.25827241881708157,0.55067512099296234,0.58596420226891888,0.7924286554191432,0.38282122729504087,0.89894682589679975,0.19798666395845105,0.69364597893016366,0.25086413704344818,0.61688998782773152,0.45038490407868731,0.58841346543371831,0.66985311347104193,0.17479739328738808,0.32697234706249662,0.41370759803745927,0.62135373995870369,0.57771582573801628,0.31638491316200618,0.76095809977591644,0.52376605661409315,0.44390708418167646,0.71114050118757988,0.61392923723091175,0.42315705455144087,0.74723278732068277,0.60553889949420614,0.81696690277570994,0.43427959041202713,0.50216601206707656,0.63142093095070551,0.79786732324082532,0.096954671579477514,0.80672211983269082,0.66593317124789264,0.5984814358371161,0.77317062800965308,0.85117804148536302,0.87381577874397198,0.61383600566505914,0.55958398734928383,0.6418938131475882,0.24255141367055844,0.46731743553588145,0.81759443999565717,0.41956966205894058,0.12484195210611837,0.65886120589985309,0.461757266348374,0.60609730776502901,0.6849671857459394,0.56087658236621118,0.33095044950786467,0.47106415271965874,0.39181387130648349,0.29268054831333279,0.65223061134389093,0.90258394472599834,0.64651406021136681,0.45834482960955208,0.8936613342695906,0.19124329808234763,0.78560068367808267,0.54458203487356882,0.096690645268432074,0.33931220270379736,0.36873424549953948,-0.0063227673261844197,0.66002606926801688,0.43715292593165905,0.34606180636337192,0.60922897744941196,0.27615406219435007,1.3616636446487398,0.62178462595011597,0.48264332121674314,0.77524009621125534,0.81077392634057122,0.38668123091601375,0.83101465015488418,0.86435668310202041,0.7156027338825649,0.32627770409624468,0.54664083181883816,0.65675279133397768,0.43946036012580769,0.65882501040494557,0.55606760531774357,1.0638469893281057,0.78758909530602939,0.7769966028660571,0.014104079695299865,0.66202667773665069,0.35759158291282406,0.57002394653686062,0.28688646062515444,0.53303338216430995,0.39228437006006428,0.64436122007498409,0.68109864151706634,0.29611565887962082,0.86799572973651618,0.66611322921462457,0.35007887940316529,0.17391135918138395,-0.13253219941203898,0.44080720234768239,0.43424131686940759,-0.053132308142754714,0.25745564602113219,0.54353955811073262,0.30656878110181474,0.74745008638330401,0.47798794128067079,0.52835492520463512,0.55420470260767885,0.3836895496698185,0.2439861966759197,0.76884804359479531,0.30612064725546317,0.90638867617089702,0.71086913944571761,0.51918596024336017,0.80705732274209896,0.50933257263208642,0.2214729866266591,0.37196448258554615,0.31709414714917694,-0.22317987380031767,1.1658591497756667,0.40421240007267822,0.43746853275634245,0.33743930708807907,0.40691652416686891,0.54886827325161414,0.69227017317256245,0.64785566852338294,-0.074297687347880781,0.11584948831118463,0.96553665465260563,1.0517253028361169,-0.32412345461638148,0.085993274141130893,0.38418190616830927,0.60853938079479486,0.57598442840497821,0.90911420975821577,0.89138209442860372,0.33274053046101382,0.83992476328033527,0.5575666302019473,0.11867876678710626,0.56937217916740557,0.45182634334334648,0.55824004197020238,0.94405675157981428,-0.23120941217355484,0.37132925944472917,0.4105601579771202,0.70066372509173602,0.20838670418422861,0.89598831725601125,0.29483155288116614,0.43213942695410162,0.42377251607157707,0.49430298322891519,0.574715232221085,0.99888305506232755,0.50611528358575864,0.29733526246023412,0.42527264745923277,0.74159835925163897,0.24750319295511752,0.56617427497148709,0.57713678624055154,0.81104436712570216,0.23689411597614157,0.55031411341617942,0.58885118242834156,0.066187070890646515,0.43900277722637743,0.61682365009955265,-0.31801861387363484,0.3901947353772619,0.36710790743778843,0.47089731873099733,0.46212768750982947,0.69475170728754621,0.46909690455041408,0.71443127468116197,0.83846481498964953,0.15290082461113602,0.4240442797450652,0.38584845962411374,0.56647688498870596,0.44571287901841966,0.41040398713577764,0.55663177860649993,0.72592097710819181,0.34553226782792368,0.54602973413187939,0.51489671148881255,1.0533192705090464,0.5558812057251048,0.29807089915331603,0.72486421721897587,0.54132178844154721,0.43030114431462624,0.25702350581797556,0.62828891433236089,0.50550662990171502,0.57304917217638207,0.73028952198165775,0.22024141233961947,0.56703326133258525,0.72322641359460471,0.2589536369348962,-0.026656141594625482,0.34495225655923434,0.31219073526940017,0.36846760853858784,0.54241267147954175,0.75552159529362095,0.17441769764170056,0.71105093648685769,0.22765290631113183,0.057702818963452696,0.51607145439844804,0.67321935759434492,0.36031605703939962,0.4127131162314292,0.43464104974908713,0.59408061347913188,0.39798216581484308,0.51386558308545027,0.35467638465544027,0.55981058904298264,0.64504973642331376,0.16562427260315793,0.38724734774884417,0.99198240070017818,0.45768342280182117,0.16705951126503288,0.68612956351162391,0.31770220581904302,0.69081698987971707,0.47590144463446793,0.91072821403390858,0.38323037066819959,0.073194579156528716,0.60990701028584482,0.20623386008876726,0.5918970654025415,0.54742713150922395,-0.0039615334659625079,0.36742067938335043,0.42558387920942153,0.54178192627490152,0.40314045455035352,0.38538036089081817,0.19053102094190577,0.062530813677484864,0.70280136964284023,0.49063745165986422,0.46455148504738353,0.010818613205007988,0.55228909475304289,0.57704580014119189,0.69315015574433936,0.91517469827913167,0.52247821524576787,0.58534837313491728,0.3712216620542898,0.54537677082702662,0.45446713980073844,0.88676847589450691,0.50412625209863071,0.19018949915647143,0.76624516550234034,0.32204544665080326,0.098730228727853253,-0.19332580875007244,0.79305969583349367,0.19610589470570405,0.56438145515289706,0.25364976105926568,0.9402069778804647,0.9651298156891257,0.32347945899012787,0.48303776795964321,0.49843036684560776,0.98601069044585155,0.75183329675562316,0.6359639568389579,0.71161660540305771,0.4312077282366284,0.14982165491483379,0.3758526095300424,0.8342744853105446,0.56339042116312288,0.66236081537862479,0.56710578729952077,0.80372637792386825,0.59450595094887637,0.76536402353992461,0.069730550107770628,0.48455471465461752,0.6905268881247757,0.79590001722798087,0.46019346926391191,0.54561729481337806],"text":["x: 0 <br>var_random: -0.0218805409967899 <br>var_norm: 0.26351948297013","x: 0.01 <br>var_random: 0.192630033008754 <br>var_norm: 0.174301512690974","x: 0.02 <br>var_random: -0.198310751002282 <br>var_norm: 0.162650404183192","x: 0.03 <br>var_random: -0.729828592855483 <br>var_norm: 0.0974573347419247","x: 0.04 <br>var_random: 0.929384831339121 <br>var_norm: 0.605380113357289","x: 0.05 <br>var_random: 0.105766400229186 <br>var_norm: 0.573364733222226","x: 0.06 <br>var_random: 0.469286547508091 <br>var_norm: 0.446520767391767","x: 0.07 <br>var_random: 0.195439382921904 <br>var_norm: 0.807472105740365","x: 0.08 <br>var_random: 0.914067993871868 <br>var_norm: 0.429372874782736","x: 0.09 <br>var_random: 0.24384744418785 <br>var_norm: 0.569477494202939","x: 0.1 <br>var_random: -0.0839684111997485 <br>var_norm: 0.622693716142391","x: 0.11 <br>var_random: 0.0416327798739076 <br>var_norm: 0.553802666343101","x: 0.12 <br>var_random: 0.348362272139639 <br>var_norm: 0.560705196949873","x: 0.13 <br>var_random: 0.976855628658086 <br>var_norm: 0.464095262616482","x: 0.14 <br>var_random: -0.221993993967772 <br>var_norm: 0.409593305478313","x: 0.15 <br>var_random: 0.0674880831502378 <br>var_norm: 0.609130457288617","x: 0.16 <br>var_random: 0.793739723507315 <br>var_norm: 0.631960348470857","x: 0.17 <br>var_random: -0.557696796953678 <br>var_norm: 0.631547047075312","x: 0.18 <br>var_random: -0.583284014835954 <br>var_norm: 0.566959919324635","x: 0.19 <br>var_random: -0.421186861116439 <br>var_norm: 0.692697516519775","x: 0.2 <br>var_random: 0.0610851948149502 <br>var_norm: 0.54838135286364","x: 0.21 <br>var_random: -0.570946890395135 <br>var_norm: 0.574701758509069","x: 0.22 <br>var_random: 0.766447444912046 <br>var_norm: 0.682970273336305","x: 0.23 <br>var_random: 0.948909927159548 <br>var_norm: 0.755015099321093","x: 0.24 <br>var_random: 0.0961991306394339 <br>var_norm: 0.293698211339504","x: 0.25 <br>var_random: -0.972638946492225 <br>var_norm: 0.260756517570803","x: 0.26 <br>var_random: 0.652789714746177 <br>var_norm: 0.0910145662100066","x: 0.27 <br>var_random: -0.310414777603 <br>var_norm: -0.0687742898314976","x: 0.28 <br>var_random: 0.750964139122516 <br>var_norm: 0.982115965914198","x: 0.29 <br>var_random: -0.243580914102495 <br>var_norm: 0.181390156861462","x: 0.3 <br>var_random: 0.224038362968713 <br>var_norm: 0.885728928904487","x: 0.31 <br>var_random: 0.452591703273356 <br>var_norm: 0.626389225731685","x: 0.32 <br>var_random: 0.603444471023977 <br>var_norm: 0.110357787744322","x: 0.33 <br>var_random: 0.85607663076371 <br>var_norm: 0.558281830900435","x: 0.34 <br>var_random: 0.747359340079129 <br>var_norm: 0.67939721111782","x: 0.35 <br>var_random: -0.500134206842631 <br>var_norm: 0.404119333030211","x: 0.36 <br>var_random: 0.539716685656458 <br>var_norm: 0.39003287386477","x: 0.37 <br>var_random: 0.024360672570765 <br>var_norm: 0.903111811623537","x: 0.38 <br>var_random: -0.512987170834094 <br>var_norm: 0.652581266295756","x: 0.39 <br>var_random: -0.702951447106898 <br>var_norm: 0.397614260263082","x: 0.4 <br>var_random: 0.659140561241657 <br>var_norm: 0.701805291509759","x: 0.41 <br>var_random: -0.0583859700709581 <br>var_norm: 0.749477524098206","x: 0.42 <br>var_random: 0.597340204752982 <br>var_norm: 0.87061402781005","x: 0.43 <br>var_random: 0.776864833198488 <br>var_norm: 0.479757271031897","x: 0.44 <br>var_random: 0.0603694263845682 <br>var_norm: 0.588837730855043","x: 0.45 <br>var_random: -0.582430549431592 <br>var_norm: 0.530972978683261","x: 0.46 <br>var_random: 0.0759291676804423 <br>var_norm: 0.37460052335285","x: 0.47 <br>var_random: -0.24973518634215 <br>var_norm: 0.730346720114959","x: 0.48 <br>var_random: 0.94839177466929 <br>var_norm: 0.0632977553958684","x: 0.49 <br>var_random: 0.778340220451355 <br>var_norm: 0.891748238725172","x: 0.5 <br>var_random: -0.640890826936811 <br>var_norm: 0.666122358025745","x: 0.51 <br>var_random: 0.272138744127005 <br>var_norm: 0.114206072002766","x: 0.52 <br>var_random: -0.0380520722828805 <br>var_norm: 0.549908990395371","x: 0.53 <br>var_random: 0.840861420147121 <br>var_norm: 0.381988140182947","x: 0.54 <br>var_random: 0.961100948508829 <br>var_norm: 0.761564274295045","x: 0.55 <br>var_random: 0.917272442486137 <br>var_norm: 0.37592419851457","x: 0.56 <br>var_random: 0.603581889066845 <br>var_norm: 0.815228551766376","x: 0.57 <br>var_random: -0.0723202149383724 <br>var_norm: 0.342637462743794","x: 0.58 <br>var_random: 0.0591730764135718 <br>var_norm: 0.766256945131634","x: 0.59 <br>var_random: -0.643325613811612 <br>var_norm: 1.05699290781373","x: 0.6 <br>var_random: -0.575519375037402 <br>var_norm: 0.539389699108178","x: 0.61 <br>var_random: -0.711901807691902 <br>var_norm: 0.13485973047105","x: 0.62 <br>var_random: -0.194527360610664 <br>var_norm: 0.837853377081903","x: 0.63 <br>var_random: 0.0748714138753712 <br>var_norm: 0.516645337749314","x: 0.64 <br>var_random: 0.824961240869015 <br>var_norm: 0.818005364949663","x: 0.65 <br>var_random: -0.623908205889165 <br>var_norm: 0.486523716243719","x: 0.66 <br>var_random: 0.31933366227895 <br>var_norm: 0.40496555350519","x: 0.67 <br>var_random: -0.192334274761379 <br>var_norm: 0.297830301249983","x: 0.68 <br>var_random: 0.9097133227624 <br>var_norm: 0.879938235964709","x: 0.69 <br>var_random: 0.296634191647172 <br>var_norm: 0.580935595492204","x: 0.7 <br>var_random: 0.523164490237832 <br>var_norm: 0.346583443479261","x: 0.71 <br>var_random: -0.993923095054924 <br>var_norm: 0.263278715459787","x: 0.72 <br>var_random: 0.305054400116205 <br>var_norm: 0.506311786874657","x: 0.73 <br>var_random: 0.5605553612113 <br>var_norm: 0.837558312670546","x: 0.74 <br>var_random: -0.356133673805743 <br>var_norm: 0.713631134015158","x: 0.75 <br>var_random: 0.566463706083596 <br>var_norm: 0.54467501261181","x: 0.76 <br>var_random: 0.170140734873712 <br>var_norm: 0.471072561962726","x: 0.77 <br>var_random: -0.0599329462274909 <br>var_norm: 0.35949238173143","x: 0.78 <br>var_random: -0.78107470087707 <br>var_norm: 0.535311565170747","x: 0.79 <br>var_random: 0.81441508140415 <br>var_norm: 0.71943894272945","x: 0.8 <br>var_random: -0.939704045653343 <br>var_norm: 0.540436156383707","x: 0.81 <br>var_random: 0.144548381213099 <br>var_norm: 0.646971944187479","x: 0.82 <br>var_random: -0.416670677717775 <br>var_norm: 0.8486858778522","x: 0.83 <br>var_random: 0.207043623086065 <br>var_norm: 0.245004454385017","x: 0.84 <br>var_random: -0.234090596903116 <br>var_norm: 0.735667145189953","x: 0.85 <br>var_random: -0.189395173918456 <br>var_norm: 0.615545115856108","x: 0.86 <br>var_random: 0.499508231878281 <br>var_norm: 0.39561164314408","x: 0.87 <br>var_random: -0.936392853967845 <br>var_norm: 0.348056074426016","x: 0.88 <br>var_random: 0.824062718078494 <br>var_norm: 0.281755268403404","x: 0.89 <br>var_random: -0.867619751486927 <br>var_norm: -0.152909924820141","x: 0.9 <br>var_random: -0.798631232231855 <br>var_norm: 1.09775835736547","x: 0.91 <br>var_random: -0.582846613135189 <br>var_norm: 0.493004891430906","x: 0.92 <br>var_random: -0.547945849597454 <br>var_norm: 0.588316656546859","x: 0.93 <br>var_random: 0.216294785495847 <br>var_norm: 0.219314282602375","x: 0.94 <br>var_random: 0.018319717142731 <br>var_norm: 0.280086912744878","x: 0.95 <br>var_random: 0.100192771293223 <br>var_norm: 0.213409832384445","x: 0.96 <br>var_random: 0.0373013913631439 <br>var_norm: 0.694195717699028","x: 0.97 <br>var_random: 0.249052063561976 <br>var_norm: 1.05638514165684","x: 0.98 <br>var_random: -0.188679219223559 <br>var_norm: 0.557212177055386","x: 0.99 <br>var_random: 0.732178117614239 <br>var_norm: 0.611096844320995","x: 1 <br>var_random: 0.307274967897683 <br>var_norm: 0.259950908924971","x: 1.01 <br>var_random: -0.603591469116509 <br>var_norm: 0.365009247380602","x: 1.02 <br>var_random: -0.443636620417237 <br>var_norm: 0.925628997670362","x: 1.03 <br>var_random: -0.941438677720726 <br>var_norm: 0.408211987635515","x: 1.04 <br>var_random: -0.304636639542878 <br>var_norm: 0.466085164078676","x: 1.05 <br>var_random: -0.552874761167914 <br>var_norm: 0.419388242174072","x: 1.06 <br>var_random: 0.18562377942726 <br>var_norm: 1.25716460710482","x: 1.07 <br>var_random: 0.873330194503069 <br>var_norm: 0.376210693845138","x: 1.08 <br>var_random: -0.0250909398309886 <br>var_norm: 0.395719873198956","x: 1.09 <br>var_random: -0.873303974512964 <br>var_norm: 0.684693164385467","x: 1.1 <br>var_random: 0.640039428602904 <br>var_norm: 0.714670552881857","x: 1.11 <br>var_random: -0.27588080894202 <br>var_norm: 0.380322272803216","x: 1.12 <br>var_random: 0.885664579458535 <br>var_norm: 0.893310317120357","x: 1.13 <br>var_random: -0.307173212990165 <br>var_norm: 0.883369490921106","x: 1.14 <br>var_random: -0.374992534052581 <br>var_norm: 0.472430807000123","x: 1.15 <br>var_random: 0.068256120197475 <br>var_norm: 0.568757820235925","x: 1.16 <br>var_random: 0.418264727108181 <br>var_norm: 0.583146793212677","x: 1.17 <br>var_random: 0.171631699893624 <br>var_norm: 0.402492054963252","x: 1.18 <br>var_random: 0.308400589972734 <br>var_norm: -0.0271163136220216","x: 1.19 <br>var_random: 0.0623870282433927 <br>var_norm: 0.57946563393524","x: 1.2 <br>var_random: 0.128061575815082 <br>var_norm: 0.480138126069468","x: 1.21 <br>var_random: 0.29232217092067 <br>var_norm: 0.55013516459623","x: 1.22 <br>var_random: 0.878564505372196 <br>var_norm: 0.429534933275967","x: 1.23 <br>var_random: -0.453533255960792 <br>var_norm: 0.778034432151718","x: 1.24 <br>var_random: 0.279526848811656 <br>var_norm: 0.330280868007711","x: 1.25 <br>var_random: 0.144563084468246 <br>var_norm: 0.0671751866347455","x: 1.26 <br>var_random: -0.855686873197556 <br>var_norm: 0.909812109109118","x: 1.27 <br>var_random: -0.496925676241517 <br>var_norm: 0.841278628836868","x: 1.28 <br>var_random: 0.612706752959639 <br>var_norm: 0.471482288687083","x: 1.29 <br>var_random: -0.664635102264583 <br>var_norm: 0.534908967584225","x: 1.3 <br>var_random: 0.367855247110128 <br>var_norm: 0.560389517002825","x: 1.31 <br>var_random: 0.192052652593702 <br>var_norm: 0.209923024780382","x: 1.32 <br>var_random: 0.386658991221339 <br>var_norm: 0.506880537186678","x: 1.33 <br>var_random: 0.535505350679159 <br>var_norm: 0.8373561084805","x: 1.34 <br>var_random: -0.775754190050066 <br>var_norm: 0.422086633582038","x: 1.35 <br>var_random: -0.554692164994776 <br>var_norm: 0.838279596746143","x: 1.36 <br>var_random: 0.513357443269342 <br>var_norm: 0.499773823802285","x: 1.37 <br>var_random: -0.427822685800493 <br>var_norm: 0.516916944823067","x: 1.38 <br>var_random: -0.0784724289551377 <br>var_norm: 0.114808648659877","x: 1.39 <br>var_random: 0.61389790661633 <br>var_norm: 0.702114821111807","x: 1.4 <br>var_random: -0.253123552538455 <br>var_norm: 0.855071577546554","x: 1.41 <br>var_random: -0.651618937961757 <br>var_norm: 0.509867433626365","x: 1.42 <br>var_random: 0.58145407307893 <br>var_norm: 0.0151788209122409","x: 1.43 <br>var_random: -0.670758604072034 <br>var_norm: 0.560392791116395","x: 1.44 <br>var_random: 0.693343564867973 <br>var_norm: 0.853960170752157","x: 1.45 <br>var_random: -0.695159544702619 <br>var_norm: 0.435115823387368","x: 1.46 <br>var_random: -0.27036745287478 <br>var_norm: 0.519522170778349","x: 1.47 <br>var_random: 0.737585333641618 <br>var_norm: 0.595368342911215","x: 1.48 <br>var_random: -0.726554434280843 <br>var_norm: 0.266040778047744","x: 1.49 <br>var_random: -0.312929638661444 <br>var_norm: 0.616014764782567","x: 1.5 <br>var_random: -0.607794818468392 <br>var_norm: 0.845505186919586","x: 1.51 <br>var_random: 0.670757410582155 <br>var_norm: 0.164893475958126","x: 1.52 <br>var_random: 0.373847822193056 <br>var_norm: 0.2492347654198","x: 1.53 <br>var_random: 0.249311700463295 <br>var_norm: 0.181945912890252","x: 1.54 <br>var_random: -0.248034477233887 <br>var_norm: 0.19192754113968","x: 1.55 <br>var_random: 0.55848004668951 <br>var_norm: 0.409955068886652","x: 1.56 <br>var_random: 0.224091753829271 <br>var_norm: 0.316097613409455","x: 1.57 <br>var_random: 0.229533082339913 <br>var_norm: -0.0558439065254799","x: 1.58 <br>var_random: -0.93132449965924 <br>var_norm: 0.647134487574564","x: 1.59 <br>var_random: 0.542237133253366 <br>var_norm: 0.244757673678781","x: 1.6 <br>var_random: -0.604407104663551 <br>var_norm: 0.522034897768787","x: 1.61 <br>var_random: 0.846792425494641 <br>var_norm: 0.624332425080509","x: 1.62 <br>var_random: 0.148304226342589 <br>var_norm: 0.406227327435593","x: 1.63 <br>var_random: -0.235655763652176 <br>var_norm: 0.59566561186907","x: 1.64 <br>var_random: -0.173488080035895 <br>var_norm: 0.523021132833655","x: 1.65 <br>var_random: 0.0968729951418936 <br>var_norm: 0.674239943413961","x: 1.66 <br>var_random: -0.318543803412467 <br>var_norm: 0.568608106318619","x: 1.67 <br>var_random: -0.268426545429975 <br>var_norm: 0.47019484947879","x: 1.68 <br>var_random: 0.518909748643637 <br>var_norm: 0.244625720053154","x: 1.69 <br>var_random: -0.255050130188465 <br>var_norm: 0.414500135345478","x: 1.7 <br>var_random: 0.194943825248629 <br>var_norm: 0.480715317486858","x: 1.71 <br>var_random: 0.630009419284761 <br>var_norm: 0.582020721227904","x: 1.72 <br>var_random: 0.712514977902174 <br>var_norm: 0.172579593474047","x: 1.73 <br>var_random: -0.0774919437244534 <br>var_norm: 0.60831627705324","x: 1.74 <br>var_random: -0.668072210624814 <br>var_norm: 0.473100728249376","x: 1.75 <br>var_random: 0.0416497774422169 <br>var_norm: -0.0863471094351235","x: 1.76 <br>var_random: -0.324295506812632 <br>var_norm: 1.27386153000029","x: 1.77 <br>var_random: -0.344735832419246 <br>var_norm: 0.97967632606812","x: 1.78 <br>var_random: -0.734479581471533 <br>var_norm: -0.077004178446118","x: 1.79 <br>var_random: -0.012624578550458 <br>var_norm: 1.08730183164476","x: 1.8 <br>var_random: -0.749315722379833 <br>var_norm: 0.60151169274408","x: 1.81 <br>var_random: 0.846724109258503 <br>var_norm: 0.947380179353981","x: 1.82 <br>var_random: -0.332559773698449 <br>var_norm: 0.228699726594443","x: 1.83 <br>var_random: -0.972423168364912 <br>var_norm: 0.588193376369337","x: 1.84 <br>var_random: 0.598558030556887 <br>var_norm: 0.276084502338762","x: 1.85 <br>var_random: -0.307086571119726 <br>var_norm: 0.528164419454309","x: 1.86 <br>var_random: -0.285109724849463 <br>var_norm: 0.332606378082754","x: 1.87 <br>var_random: -0.786406446248293 <br>var_norm: 0.755132105505497","x: 1.88 <br>var_random: 0.432442276738584 <br>var_norm: 0.624563249576697","x: 1.89 <br>var_random: 0.0696556367911398 <br>var_norm: 1.01436009525724","x: 1.9 <br>var_random: 0.780838674400002 <br>var_norm: 0.460239736559742","x: 1.91 <br>var_random: -0.00661161914467812 <br>var_norm: 0.873516610560569","x: 1.92 <br>var_random: 0.614253646228462 <br>var_norm: 0.111237499154905","x: 1.93 <br>var_random: -0.974969265982509 <br>var_norm: 0.892511978390189","x: 1.94 <br>var_random: 0.147251756396145 <br>var_norm: 0.557631167514018","x: 1.95 <br>var_random: 0.92975489096716 <br>var_norm: 0.289803451954862","x: 1.96 <br>var_random: 0.954126053955406 <br>var_norm: 0.018057919202176","x: 1.97 <br>var_random: 0.961547429207712 <br>var_norm: 0.474569838396543","x: 1.98 <br>var_random: 0.959761894773692 <br>var_norm: 0.511890596333226","x: 1.99 <br>var_random: 0.434972596354783 <br>var_norm: 0.726988232200749","x: 2 <br>var_random: -0.589950606692582 <br>var_norm: 0.620555927063054","x: 2.01 <br>var_random: -0.835225217510015 <br>var_norm: 0.454748698683248","x: 2.02 <br>var_random: -0.598877743817866 <br>var_norm: 0.510966205010252","x: 2.03 <br>var_random: 0.14489848120138 <br>var_norm: -0.148702317409036","x: 2.04 <br>var_random: -0.464257768820971 <br>var_norm: 0.212202581714858","x: 2.05 <br>var_random: -0.15110747050494 <br>var_norm: 0.388172281510689","x: 2.06 <br>var_random: 0.601424566470087 <br>var_norm: 0.627998712421914","x: 2.07 <br>var_random: -0.10948878293857 <br>var_norm: 0.409956067186887","x: 2.08 <br>var_random: 0.26237174635753 <br>var_norm: 0.195990518294389","x: 2.09 <br>var_random: -0.0630052071064711 <br>var_norm: 0.21451318068809","x: 2.1 <br>var_random: -0.704695721622556 <br>var_norm: 0.549203206395159","x: 2.11 <br>var_random: 0.031686395406723 <br>var_norm: 0.46864903114397","x: 2.12 <br>var_random: -0.245598940178752 <br>var_norm: 0.431944381632143","x: 2.13 <br>var_random: -0.392735277302563 <br>var_norm: 0.531730012426911","x: 2.14 <br>var_random: -0.551311616785824 <br>var_norm: 0.726114213452249","x: 2.15 <br>var_random: 0.264691121410578 <br>var_norm: 0.61501799113844","x: 2.16 <br>var_random: 0.886210334952921 <br>var_norm: 0.556456943623206","x: 2.17 <br>var_random: 0.75199066195637 <br>var_norm: 0.224755886590543","x: 2.18 <br>var_random: -0.482748605310917 <br>var_norm: 0.696473121420824","x: 2.19 <br>var_random: -0.483592004049569 <br>var_norm: 0.510381337222774","x: 2.2 <br>var_random: -0.314997919369489 <br>var_norm: 0.675461090133341","x: 2.21 <br>var_random: -0.905680852010846 <br>var_norm: 0.196937119398655","x: 2.22 <br>var_random: -0.822198593523353 <br>var_norm: -0.134739781035718","x: 2.23 <br>var_random: -0.66499127773568 <br>var_norm: 0.56381119821085","x: 2.24 <br>var_random: 0.967060482595116 <br>var_norm: 0.44827397669438","x: 2.25 <br>var_random: 0.807002869900316 <br>var_norm: 0.50590911302636","x: 2.26 <br>var_random: -0.788077303674072 <br>var_norm: 0.523025092281354","x: 2.27 <br>var_random: -0.864932380151004 <br>var_norm: 0.550222506893217","x: 2.28 <br>var_random: 0.550874556880444 <br>var_norm: 0.576190944078474","x: 2.29 <br>var_random: -0.74587921006605 <br>var_norm: 0.280104623885321","x: 2.3 <br>var_random: -0.542931874282658 <br>var_norm: 0.402866348739341","x: 2.31 <br>var_random: 0.112448061816394 <br>var_norm: 0.123600374375745","x: 2.32 <br>var_random: 0.434517468325794 <br>var_norm: 0.8400968876512","x: 2.33 <br>var_random: -0.211358200293034 <br>var_norm: 0.884686327063692","x: 2.34 <br>var_random: -0.567697011865675 <br>var_norm: 0.341829154645804","x: 2.35 <br>var_random: 0.721826674416661 <br>var_norm: 0.16209070362422","x: 2.36 <br>var_random: -0.744861729908735 <br>var_norm: 0.378837205219899","x: 2.37 <br>var_random: -0.00804063817486167 <br>var_norm: 0.38155157274276","x: 2.38 <br>var_random: 0.985562329180539 <br>var_norm: 0.417026139934073","x: 2.39 <br>var_random: 0.0763324066065252 <br>var_norm: 0.241401762173039","x: 2.4 <br>var_random: -0.827237188350409 <br>var_norm: 0.655728384105043","x: 2.41 <br>var_random: 0.0555661832913756 <br>var_norm: 0.74580927525487","x: 2.42 <br>var_random: -0.423993154894561 <br>var_norm: 0.320309619239827","x: 2.43 <br>var_random: 0.362896073609591 <br>var_norm: 0.295445691064215","x: 2.44 <br>var_random: 0.375929472502321 <br>var_norm: 0.589407784618381","x: 2.45 <br>var_random: -0.806371215730906 <br>var_norm: 0.269032004271602","x: 2.46 <br>var_random: -0.485228727571666 <br>var_norm: 0.775525775814163","x: 2.47 <br>var_random: -0.273232849314809 <br>var_norm: 0.769832427722421","x: 2.48 <br>var_random: 0.206332500558347 <br>var_norm: -0.254142898424991","x: 2.49 <br>var_random: 0.714117519091815 <br>var_norm: 0.639313445956143","x: 2.5 <br>var_random: 0.375665551517159 <br>var_norm: 0.284765003233384","x: 2.51 <br>var_random: -0.173464676365256 <br>var_norm: 0.392775153967475","x: 2.52 <br>var_random: -0.606473246123642 <br>var_norm: 0.088893222686994","x: 2.53 <br>var_random: 0.624442256055772 <br>var_norm: 0.41668852345515","x: 2.54 <br>var_random: 0.851700082421303 <br>var_norm: 0.272502935513185","x: 2.55 <br>var_random: 0.345592890866101 <br>var_norm: 0.446085979279288","x: 2.56 <br>var_random: 0.736374682281166 <br>var_norm: 0.380772965331181","x: 2.57 <br>var_random: 0.146524550393224 <br>var_norm: 0.922423921554813","x: 2.58 <br>var_random: -0.061899206135422 <br>var_norm: 0.564126233224619","x: 2.59 <br>var_random: -0.649109220597893 <br>var_norm: 0.0732918244849157","x: 2.6 <br>var_random: -0.854424591641873 <br>var_norm: 0.617199597737997","x: 2.61 <br>var_random: -0.674536977894604 <br>var_norm: 0.669911766630679","x: 2.62 <br>var_random: 0.250822929199785 <br>var_norm: 0.2891655999399","x: 2.63 <br>var_random: -0.338834083173424 <br>var_norm: 0.184241138320096","x: 2.64 <br>var_random: -0.429728945717216 <br>var_norm: 0.595459935750543","x: 2.65 <br>var_random: -0.197353569790721 <br>var_norm: 0.399321602876924","x: 2.66 <br>var_random: 0.555935688316822 <br>var_norm: 0.600364671542755","x: 2.67 <br>var_random: -0.949805625714362 <br>var_norm: 0.879150979426419","x: 2.68 <br>var_random: 0.427080573979765 <br>var_norm: 0.49214247447838","x: 2.69 <br>var_random: -0.0284861316904426 <br>var_norm: 0.747764740269896","x: 2.7 <br>var_random: 0.134086676407605 <br>var_norm: 0.468275574023935","x: 2.71 <br>var_random: -0.175849349237978 <br>var_norm: 0.530829175076956","x: 2.72 <br>var_random: 0.929463183041662 <br>var_norm: 0.663351674052315","x: 2.73 <br>var_random: -0.403703615069389 <br>var_norm: 0.290052170506706","x: 2.74 <br>var_random: 0.722104061860591 <br>var_norm: 0.711849149558998","x: 2.75 <br>var_random: 0.646744595374912 <br>var_norm: 0.36105304317631","x: 2.76 <br>var_random: 0.553075899835676 <br>var_norm: 0.654270722232646","x: 2.77 <br>var_random: -0.195334456395358 <br>var_norm: 0.646714064229144","x: 2.78 <br>var_random: 0.871772204525769 <br>var_norm: 0.647182639541304","x: 2.79 <br>var_random: 0.611533374059945 <br>var_norm: 0.55692760720212","x: 2.8 <br>var_random: 0.72778667928651 <br>var_norm: 0.981541232636695","x: 2.81 <br>var_random: -0.740542482584715 <br>var_norm: 0.911383502564628","x: 2.82 <br>var_random: -0.654597382992506 <br>var_norm: 0.443279894278214","x: 2.83 <br>var_random: 0.594360493589193 <br>var_norm: 0.73251892126207","x: 2.84 <br>var_random: 0.471276431810111 <br>var_norm: 0.280691415646911","x: 2.85 <br>var_random: -0.47744871629402 <br>var_norm: 0.446369427339352","x: 2.86 <br>var_random: -0.756527107674628 <br>var_norm: 0.883058862607068","x: 2.87 <br>var_random: -0.12704974738881 <br>var_norm: -0.00843857821429539","x: 2.88 <br>var_random: 0.0477386838756502 <br>var_norm: 0.553377607286258","x: 2.89 <br>var_random: -0.217355023603886 <br>var_norm: 0.897767191173483","x: 2.9 <br>var_random: 0.340227989014238 <br>var_norm: 0.219811232832414","x: 2.91 <br>var_random: 0.960106973070651 <br>var_norm: 0.43623591319674","x: 2.92 <br>var_random: -0.172131981234998 <br>var_norm: 0.572587389240776","x: 2.93 <br>var_random: 0.691150107886642 <br>var_norm: 0.29211704659333","x: 2.94 <br>var_random: 0.992245345376432 <br>var_norm: 0.505733773078773","x: 2.95 <br>var_random: -0.279728045221418 <br>var_norm: 0.300774381451983","x: 2.96 <br>var_random: 0.875561852939427 <br>var_norm: 0.57548289287477","x: 2.97 <br>var_random: -0.167696493677795 <br>var_norm: 0.959694823222787","x: 2.98 <br>var_random: 0.382783091627061 <br>var_norm: 0.768218576970072","x: 2.99 <br>var_random: -0.582491723354906 <br>var_norm: 0.954144101111635","x: 3 <br>var_random: -0.123476354405284 <br>var_norm: 0.680046810727815","x: 3.01 <br>var_random: 0.465597354341298 <br>var_norm: 0.27448328614048","x: 3.02 <br>var_random: 0.140108962543309 <br>var_norm: 0.486146413779176","x: 3.03 <br>var_random: 0.764557096175849 <br>var_norm: 0.0436810596008477","x: 3.04 <br>var_random: -0.237715328112245 <br>var_norm: 0.336417826923171","x: 3.05 <br>var_random: 0.880938940215856 <br>var_norm: 0.118684968885744","x: 3.06 <br>var_random: 0.238540490623564 <br>var_norm: 0.652834195421784","x: 3.07 <br>var_random: -0.801616253331304 <br>var_norm: 0.394825004126393","x: 3.08 <br>var_random: 0.41361353173852 <br>var_norm: 0.468657603908631","x: 3.09 <br>var_random: 0.564470370300114 <br>var_norm: 0.587776122289659","x: 3.1 <br>var_random: 0.265282239764929 <br>var_norm: 0.0832437669751214","x: 3.11 <br>var_random: 0.22863625921309 <br>var_norm: 0.313390206219926","x: 3.12 <br>var_random: 0.348454793449491 <br>var_norm: 0.70982807634656","x: 3.13 <br>var_random: 0.698510740417987 <br>var_norm: 0.247144864390083","x: 3.14 <br>var_random: 0.552272571250796 <br>var_norm: 0.141283945137004","x: 3.15 <br>var_random: 0.612103286664933 <br>var_norm: 0.751618526265494","x: 3.16 <br>var_random: -0.469110528472811 <br>var_norm: 0.84755618540483","x: 3.17 <br>var_random: 0.616972754243761 <br>var_norm: 0.550991443205746","x: 3.18 <br>var_random: 0.27150863641873 <br>var_norm: 0.580074874816426","x: 3.19 <br>var_random: 0.341798765119165 <br>var_norm: 0.353554885093203","x: 3.2 <br>var_random: -0.115481284447014 <br>var_norm: 0.519411814559274","x: 3.21 <br>var_random: 0.957388679496944 <br>var_norm: 0.489230585803806","x: 3.22 <br>var_random: -0.836370346602052 <br>var_norm: 0.0126181702905857","x: 3.23 <br>var_random: -0.61049769539386 <br>var_norm: 0.522089211127421","x: 3.24 <br>var_random: -0.6458610878326 <br>var_norm: 0.360129808488153","x: 3.25 <br>var_random: 0.110923500265926 <br>var_norm: 0.403004015504315","x: 3.26 <br>var_random: 0.237032756209373 <br>var_norm: 0.424673030861727","x: 3.27 <br>var_random: -0.584145586006343 <br>var_norm: 0.607697826836947","x: 3.28 <br>var_random: -0.306906441226602 <br>var_norm: 0.273212746720426","x: 3.29 <br>var_random: 0.431059003341943 <br>var_norm: 0.581295637943112","x: 3.3 <br>var_random: -0.55070176301524 <br>var_norm: 0.61484061172633","x: 3.31 <br>var_random: 0.436217779293656 <br>var_norm: 0.403203632435735","x: 3.32 <br>var_random: 0.718502603471279 <br>var_norm: 0.636746082098094","x: 3.33 <br>var_random: 0.24885901901871 <br>var_norm: 0.593156076240509","x: 3.34 <br>var_random: 0.0597960841841996 <br>var_norm: 0.571550556162485","x: 3.35 <br>var_random: -0.609555567614734 <br>var_norm: 0.0418171299678537","x: 3.36 <br>var_random: 0.214923782274127 <br>var_norm: 0.297935515962564","x: 3.37 <br>var_random: -0.362750277854502 <br>var_norm: 0.830527804242257","x: 3.38 <br>var_random: -0.736267073079944 <br>var_norm: 0.585656602818907","x: 3.39 <br>var_random: -0.995416974648833 <br>var_norm: 0.584152626317413","x: 3.4 <br>var_random: -0.775321039371192 <br>var_norm: 0.597625080549639","x: 3.41 <br>var_random: -0.368035507388413 <br>var_norm: 0.351874167088304","x: 3.42 <br>var_random: 0.695219398476183 <br>var_norm: 0.484747276910935","x: 3.43 <br>var_random: -0.985680946614593 <br>var_norm: 0.0871114551863325","x: 3.44 <br>var_random: 0.851746331900358 <br>var_norm: 0.182955618809339","x: 3.45 <br>var_random: 0.564374083187431 <br>var_norm: 0.126102935830917","x: 3.46 <br>var_random: 0.975890940986574 <br>var_norm: 0.46925906040938","x: 3.47 <br>var_random: -0.202235222794116 <br>var_norm: 0.698216411770177","x: 3.48 <br>var_random: -0.406628082040697 <br>var_norm: 0.664045236121466","x: 3.49 <br>var_random: -0.483878072816879 <br>var_norm: 0.599752393794109","x: 3.5 <br>var_random: 0.0257052429951727 <br>var_norm: 0.806955613543179","x: 3.51 <br>var_random: -0.886128665879369 <br>var_norm: 0.607577352883368","x: 3.52 <br>var_random: -0.0888159838505089 <br>var_norm: 0.990458361102162","x: 3.53 <br>var_random: 0.856240381021053 <br>var_norm: 0.529756010046262","x: 3.54 <br>var_random: -0.0703990156762302 <br>var_norm: 0.409021567024366","x: 3.55 <br>var_random: 0.212970013730228 <br>var_norm: 0.291435444911106","x: 3.56 <br>var_random: -0.536122845485806 <br>var_norm: -0.0435356879802915","x: 3.57 <br>var_random: 0.537992068566382 <br>var_norm: 0.326538526627982","x: 3.58 <br>var_random: 0.813953483942896 <br>var_norm: 0.464003302629455","x: 3.59 <br>var_random: -0.434821074362844 <br>var_norm: 0.413922955059476","x: 3.6 <br>var_random: 0.429487205576152 <br>var_norm: 0.381420383158328","x: 3.61 <br>var_random: -0.538112891372293 <br>var_norm: -0.143490442033784","x: 3.62 <br>var_random: 0.955618233419955 <br>var_norm: 0.381966076142131","x: 3.63 <br>var_random: -0.927855414804071 <br>var_norm: 0.308489824505008","x: 3.64 <br>var_random: -0.0708702942356467 <br>var_norm: 0.547418329221732","x: 3.65 <br>var_random: 0.455251974053681 <br>var_norm: 0.476444299762328","x: 3.66 <br>var_random: -0.672689424362034 <br>var_norm: 0.921979182302157","x: 3.67 <br>var_random: -0.0177667429670691 <br>var_norm: 0.863556686932459","x: 3.68 <br>var_random: 0.804023366887122 <br>var_norm: 0.709999464948861","x: 3.69 <br>var_random: 0.778016110882163 <br>var_norm: 0.795279731633095","x: 3.7 <br>var_random: -0.651685760356486 <br>var_norm: 0.314362376980798","x: 3.71 <br>var_random: 0.0056961583904922 <br>var_norm: 0.713510466793008","x: 3.72 <br>var_random: -0.22401042887941 <br>var_norm: 0.523324515527746","x: 3.73 <br>var_random: 0.670945665799081 <br>var_norm: 0.305815635420265","x: 3.74 <br>var_random: 0.770660802256316 <br>var_norm: 0.348466444376331","x: 3.75 <br>var_random: 0.106449668761343 <br>var_norm: 0.528420794380468","x: 3.76 <br>var_random: -0.127224326133728 <br>var_norm: 0.476282697480762","x: 3.77 <br>var_random: -0.807947652880102 <br>var_norm: 0.231753913350955","x: 3.78 <br>var_random: 0.0270738685503602 <br>var_norm: 0.840137411992962","x: 3.79 <br>var_random: 0.791141774039716 <br>var_norm: 0.692104320417003","x: 3.8 <br>var_random: -0.851389596704394 <br>var_norm: 0.704737876458293","x: 3.81 <br>var_random: -0.715582001954317 <br>var_norm: 0.171983897412589","x: 3.82 <br>var_random: 0.533027057070285 <br>var_norm: 0.435425252851117","x: 3.83 <br>var_random: 0.266258971299976 <br>var_norm: 0.395987725630842","x: 3.84 <br>var_random: 0.452109566424042 <br>var_norm: 0.130006804532134","x: 3.85 <br>var_random: 0.496426720637828 <br>var_norm: 0.546285143364311","x: 3.86 <br>var_random: 0.375493280123919 <br>var_norm: 0.576017825816735","x: 3.87 <br>var_random: -0.82177222520113 <br>var_norm: 0.372072688733565","x: 3.88 <br>var_random: 0.174214130733162 <br>var_norm: 0.52380458807199","x: 3.89 <br>var_random: -0.264940002933145 <br>var_norm: -0.000882676969211182","x: 3.9 <br>var_random: -0.989329618867487 <br>var_norm: 0.409596402912363","x: 3.91 <br>var_random: -0.00402627140283585 <br>var_norm: 0.510801259725743","x: 3.92 <br>var_random: 0.574607793707401 <br>var_norm: 0.190240914335004","x: 3.93 <br>var_random: -0.192147076129913 <br>var_norm: 0.710637302758464","x: 3.94 <br>var_random: 0.565192602574825 <br>var_norm: 0.368766710159242","x: 3.95 <br>var_random: 0.799403876531869 <br>var_norm: 0.362405479325952","x: 3.96 <br>var_random: 0.267946272157133 <br>var_norm: 0.280132514637124","x: 3.97 <br>var_random: 0.560200468637049 <br>var_norm: 0.533402918775353","x: 3.98 <br>var_random: 0.109491345006973 <br>var_norm: 0.280160749336555","x: 3.99 <br>var_random: 0.784959229175001 <br>var_norm: 0.512732209215847","x: 4 <br>var_random: 0.630085140001029 <br>var_norm: -0.06180721145836","x: 4.01 <br>var_random: 0.512175494339317 <br>var_norm: 1.03505725625874","x: 4.02 <br>var_random: -0.182393819559366 <br>var_norm: 0.676447315292096","x: 4.03 <br>var_random: -0.181695002596825 <br>var_norm: 0.74793118841606","x: 4.04 <br>var_random: 0.489887018688023 <br>var_norm: 0.49536207632435","x: 4.05 <br>var_random: -0.995516715571284 <br>var_norm: 0.26398014852076","x: 4.06 <br>var_random: 0.705496597569436 <br>var_norm: 0.578469180773444","x: 4.07 <br>var_random: -0.02717768214643 <br>var_norm: 0.73530055083954","x: 4.08 <br>var_random: -0.680332169868052 <br>var_norm: 0.654977252595076","x: 4.09 <br>var_random: 0.552092647645622 <br>var_norm: 0.445915245095172","x: 4.1 <br>var_random: -0.140895274467766 <br>var_norm: 0.630145530290983","x: 4.11 <br>var_random: 0.661161946132779 <br>var_norm: 0.612166019597524","x: 4.12 <br>var_random: 0.363580960780382 <br>var_norm: 0.705066738550794","x: 4.13 <br>var_random: -0.393992491066456 <br>var_norm: 0.277094523674937","x: 4.14 <br>var_random: 0.220618982799351 <br>var_norm: 0.783026693497819","x: 4.15 <br>var_random: -0.813887082505971 <br>var_norm: 0.381290684291256","x: 4.16 <br>var_random: -0.56662328587845 <br>var_norm: 0.430420436481151","x: 4.17 <br>var_random: 0.575665576849133 <br>var_norm: 0.522746777322406","x: 4.18 <br>var_random: -0.897225244902074 <br>var_norm: 0.525848708984502","x: 4.19 <br>var_random: -0.313883451744914 <br>var_norm: 0.387570936596069","x: 4.2 <br>var_random: -0.650506071280688 <br>var_norm: 0.643445876082263","x: 4.21 <br>var_random: 0.558585725259036 <br>var_norm: 0.247376093176641","x: 4.22 <br>var_random: 0.608969686552882 <br>var_norm: 0.375511156206104","x: 4.23 <br>var_random: -0.564868071116507 <br>var_norm: 1.02783009352657","x: 4.24 <br>var_random: -0.403929691296071 <br>var_norm: 0.99459502823961","x: 4.25 <br>var_random: 0.123209675773978 <br>var_norm: -0.0322145708591067","x: 4.26 <br>var_random: 0.39682746771723 <br>var_norm: 0.53114485614323","x: 4.27 <br>var_random: 0.617787207476795 <br>var_norm: 0.536818916543576","x: 4.28 <br>var_random: 0.205333704128861 <br>var_norm: 0.38832304435022","x: 4.29 <br>var_random: -0.789946873672307 <br>var_norm: 0.245458563163819","x: 4.3 <br>var_random: 0.252979300916195 <br>var_norm: 0.554057054371161","x: 4.31 <br>var_random: 0.263599829282612 <br>var_norm: 0.374414808003891","x: 4.32 <br>var_random: 0.536660811398178 <br>var_norm: 0.242152940674066","x: 4.33 <br>var_random: -0.785561742261052 <br>var_norm: 0.749903362038656","x: 4.34 <br>var_random: -0.352791583631188 <br>var_norm: 0.721024982631451","x: 4.35 <br>var_random: -0.455961014609784 <br>var_norm: 0.340141851754743","x: 4.36 <br>var_random: -0.576972689945251 <br>var_norm: 0.397127367620363","x: 4.37 <br>var_random: -0.69749162113294 <br>var_norm: 0.682457729398922","x: 4.38 <br>var_random: 0.950687517412007 <br>var_norm: 0.58360467753976","x: 4.39 <br>var_random: -0.680211993400007 <br>var_norm: 0.60375643039619","x: 4.4 <br>var_random: -0.525775806047022 <br>var_norm: 0.715568884643366","x: 4.41 <br>var_random: 0.336847494356334 <br>var_norm: 0.00831066490640253","x: 4.42 <br>var_random: -0.0838710186071694 <br>var_norm: 0.248043868294344","x: 4.43 <br>var_random: 0.920496235601604 <br>var_norm: 0.835095116495587","x: 4.44 <br>var_random: -0.0800622920505702 <br>var_norm: 0.350041031769657","x: 4.45 <br>var_random: 0.0121791460551322 <br>var_norm: 0.586001525016945","x: 4.46 <br>var_random: 0.45856846915558 <br>var_norm: 0.608620115149905","x: 4.47 <br>var_random: 0.70167986722663 <br>var_norm: 0.555687040128077","x: 4.48 <br>var_random: -0.239822188392282 <br>var_norm: 0.733857506023708","x: 4.49 <br>var_random: 0.527269809506834 <br>var_norm: 0.713341369486939","x: 4.5 <br>var_random: 0.502938650548458 <br>var_norm: 0.0949905770669363","x: 4.51 <br>var_random: -0.830392634496093 <br>var_norm: 0.748870929086464","x: 4.52 <br>var_random: 0.813293534331024 <br>var_norm: 0.707287139663896","x: 4.53 <br>var_random: 0.248762852046639 <br>var_norm: 0.826738583762564","x: 4.54 <br>var_random: -0.0403044996783137 <br>var_norm: 0.423933196412643","x: 4.55 <br>var_random: 0.528881478589028 <br>var_norm: 0.789218603029191","x: 4.56 <br>var_random: -0.931269582360983 <br>var_norm: 0.678686487698957","x: 4.57 <br>var_random: 0.0629910579882562 <br>var_norm: 0.54576559649929","x: 4.58 <br>var_random: 0.256564300972968 <br>var_norm: 0.630231801687062","x: 4.59 <br>var_random: -0.766649903263897 <br>var_norm: 0.330118998659674","x: 4.6 <br>var_random: -0.214274022728205 <br>var_norm: 0.556474146890218","x: 4.61 <br>var_random: -0.0885957633145154 <br>var_norm: 0.47709628288412","x: 4.62 <br>var_random: 0.974233890883625 <br>var_norm: 0.34521143960352","x: 4.63 <br>var_random: 0.313501424156129 <br>var_norm: 0.359939760573118","x: 4.64 <br>var_random: -0.77422475349158 <br>var_norm: 0.503057007489894","x: 4.65 <br>var_random: 0.833115967921913 <br>var_norm: 0.852506695169091","x: 4.66 <br>var_random: 0.980392500758171 <br>var_norm: 0.654561289992845","x: 4.67 <br>var_random: 0.748326329048723 <br>var_norm: 0.453103542512533","x: 4.68 <br>var_random: -0.124042738694698 <br>var_norm: 0.484169869650988","x: 4.69 <br>var_random: 0.0117865451611578 <br>var_norm: 0.666610943870216","x: 4.7 <br>var_random: -0.310710032936186 <br>var_norm: 0.637856915690224","x: 4.71 <br>var_random: 0.940866662189364 <br>var_norm: 0.889684243400601","x: 4.72 <br>var_random: -0.772560633253306 <br>var_norm: 0.841763809588596","x: 4.73 <br>var_random: 0.940841280855238 <br>var_norm: 0.777051152533251","x: 4.74 <br>var_random: 0.825804138556123 <br>var_norm: 0.878539198820412","x: 4.75 <br>var_random: -0.528308033011854 <br>var_norm: 0.511166665783216","x: 4.76 <br>var_random: -0.759192504454404 <br>var_norm: 0.722314790190988","x: 4.77 <br>var_random: -0.394359351601452 <br>var_norm: 0.330017092199019","x: 4.78 <br>var_random: -0.26096131792292 <br>var_norm: 0.158696558506363","x: 4.79 <br>var_random: 0.236876919865608 <br>var_norm: 0.00648365952956786","x: 4.8 <br>var_random: 0.426154526881874 <br>var_norm: 0.882081002787004","x: 4.81 <br>var_random: 0.153082790318877 <br>var_norm: -0.181094203309282","x: 4.82 <br>var_random: -0.979246621020138 <br>var_norm: 0.477883523650655","x: 4.83 <br>var_random: -0.277960614301264 <br>var_norm: 0.923367340647902","x: 4.84 <br>var_random: 0.687267592176795 <br>var_norm: 0.367338545912999","x: 4.85 <br>var_random: 0.755403846967965 <br>var_norm: 0.822839629684915","x: 4.86 <br>var_random: -0.796603632159531 <br>var_norm: 0.277899400593765","x: 4.87 <br>var_random: -0.221838617697358 <br>var_norm: 0.526638707935109","x: 4.88 <br>var_random: 0.312275665346533 <br>var_norm: 0.666923517529191","x: 4.89 <br>var_random: -0.251352992840111 <br>var_norm: 0.993080356621506","x: 4.9 <br>var_random: 0.6695556640625 <br>var_norm: 0.90548921069311","x: 4.91 <br>var_random: -0.192707355134189 <br>var_norm: 0.536747644932213","x: 4.92 <br>var_random: 0.810526507440954 <br>var_norm: 0.434081295426099","x: 4.93 <br>var_random: 0.533635304309428 <br>var_norm: 0.361171214649091","x: 4.94 <br>var_random: 0.482143364381045 <br>var_norm: 0.378006346289401","x: 4.95 <br>var_random: -0.571317341644317 <br>var_norm: 0.313194937034372","x: 4.96 <br>var_random: -0.0217472841031849 <br>var_norm: 0.0780883529809609","x: 4.97 <br>var_random: -0.408090934157372 <br>var_norm: 0.701537343425972","x: 4.98 <br>var_random: -0.113641500473022 <br>var_norm: 0.219072244017427","x: 4.99 <br>var_random: -0.575606359168887 <br>var_norm: 0.793711775342836","x: 5 <br>var_random: -0.491529527120292 <br>var_norm: 0.801989383894733","x: 5.01 <br>var_random: -0.488395997323096 <br>var_norm: 0.81987632730969","x: 5.02 <br>var_random: 0.657055788207799 <br>var_norm: 0.461258485659944","x: 5.03 <br>var_random: -0.822545330505818 <br>var_norm: 0.568720761900677","x: 5.04 <br>var_random: 0.919310595840216 <br>var_norm: 0.104527078489797","x: 5.05 <br>var_random: -0.310139419045299 <br>var_norm: 0.203172034182987","x: 5.06 <br>var_random: -0.634228855837137 <br>var_norm: 0.680861859086152","x: 5.07 <br>var_random: 0.34456333797425 <br>var_norm: 0.514101196506624","x: 5.08 <br>var_random: 0.696211114991456 <br>var_norm: 0.24127033893846","x: 5.09 <br>var_random: -0.0501800780184567 <br>var_norm: 0.302216288572636","x: 5.1 <br>var_random: -0.687054334674031 <br>var_norm: 0.546880302011018","x: 5.11 <br>var_random: -0.14246898284182 <br>var_norm: 0.344832287257549","x: 5.12 <br>var_random: -0.815108433365822 <br>var_norm: 0.312933205511464","x: 5.13 <br>var_random: -0.631626056041569 <br>var_norm: 0.21508684548253","x: 5.14 <br>var_random: 0.849045659881085 <br>var_norm: 0.552665353892402","x: 5.15 <br>var_random: -0.398307734169066 <br>var_norm: 0.491985824333508","x: 5.16 <br>var_random: -0.625236327759922 <br>var_norm: 0.373918330784037","x: 5.17 <br>var_random: -0.865202967077494 <br>var_norm: 0.625744893942763","x: 5.18 <br>var_random: 0.507775901351124 <br>var_norm: 0.297586852193773","x: 5.19 <br>var_random: -0.488393264822662 <br>var_norm: 0.491551687089992","x: 5.2 <br>var_random: -0.310333390720189 <br>var_norm: 0.285805615142579","x: 5.21 <br>var_random: -0.268745099194348 <br>var_norm: 0.595005454019922","x: 5.22 <br>var_random: 0.101857805624604 <br>var_norm: 0.801322397179182","x: 5.23 <br>var_random: 0.329098646529019 <br>var_norm: 0.267365388393023","x: 5.24 <br>var_random: 0.448799513280392 <br>var_norm: 0.231818802244834","x: 5.25 <br>var_random: -0.0228714346885681 <br>var_norm: 0.467479322574767","x: 5.26 <br>var_random: 0.249248454347253 <br>var_norm: 0.878039619873249","x: 5.27 <br>var_random: 0.757026896812022 <br>var_norm: 0.796597148246062","x: 5.28 <br>var_random: -0.739965696819127 <br>var_norm: 0.465869167974594","x: 5.29 <br>var_random: 0.945981613826007 <br>var_norm: 0.635068211862068","x: 5.3 <br>var_random: -0.873272141441703 <br>var_norm: 0.586470323092379","x: 5.31 <br>var_random: -0.957137232180685 <br>var_norm: 0.0603730524195544","x: 5.32 <br>var_random: -0.187296513468027 <br>var_norm: 0.154767168426355","x: 5.33 <br>var_random: 0.0708276047371328 <br>var_norm: -0.0991170771493638","x: 5.34 <br>var_random: 0.65692696813494 <br>var_norm: 0.603744272066103","x: 5.35 <br>var_random: -0.407316220458597 <br>var_norm: 1.17937671122823","x: 5.36 <br>var_random: -0.00130000384524465 <br>var_norm: 0.453456260525745","x: 5.37 <br>var_random: -0.7154162498191 <br>var_norm: 0.358028647002582","x: 5.38 <br>var_random: -0.835596149787307 <br>var_norm: 0.745745046522505","x: 5.39 <br>var_random: 0.255193457473069 <br>var_norm: 0.782766866150159","x: 5.4 <br>var_random: -0.913998998701572 <br>var_norm: 0.623817240113631","x: 5.41 <br>var_random: 0.435609359759837 <br>var_norm: 1.26071065540379","x: 5.42 <br>var_random: -0.7582569969818 <br>var_norm: 0.202204840132383","x: 5.43 <br>var_random: -0.427678462583572 <br>var_norm: 0.725812819255083","x: 5.44 <br>var_random: 0.304980150889605 <br>var_norm: 0.387136653206294","x: 5.45 <br>var_random: 0.974193703383207 <br>var_norm: 0.182535793696765","x: 5.46 <br>var_random: 0.829307527281344 <br>var_norm: 0.106088123662981","x: 5.47 <br>var_random: 0.043635849840939 <br>var_norm: 0.917789767238121","x: 5.48 <br>var_random: -0.15571218309924 <br>var_norm: 0.345931531476369","x: 5.49 <br>var_random: -0.00852579809725285 <br>var_norm: 0.627311574163831","x: 5.5 <br>var_random: -0.19400129513815 <br>var_norm: 0.128590423747036","x: 5.51 <br>var_random: -0.810780386906117 <br>var_norm: 0.223382089497116","x: 5.52 <br>var_random: 0.220921047031879 <br>var_norm: 0.311780851998332","x: 5.53 <br>var_random: 0.446882369928062 <br>var_norm: 0.571502389351798","x: 5.54 <br>var_random: 0.755968673154712 <br>var_norm: 0.215073921352336","x: 5.55 <br>var_random: -0.51656566793099 <br>var_norm: 0.822829136868798","x: 5.56 <br>var_random: -0.0163873797282577 <br>var_norm: 0.131791817556269","x: 5.57 <br>var_random: 0.0156905599869788 <br>var_norm: 0.541361267018704","x: 5.58 <br>var_random: 0.338944401126355 <br>var_norm: 0.50465599242241","x: 5.59 <br>var_random: 0.24472513794899 <br>var_norm: 0.613988246818169","x: 5.6 <br>var_random: -0.833735150750726 <br>var_norm: 0.395707915879378","x: 5.61 <br>var_random: 0.289258164353669 <br>var_norm: 0.513766330665821","x: 5.62 <br>var_random: 0.735243470873684 <br>var_norm: 0.619446423123213","x: 5.63 <br>var_random: -0.251067573204637 <br>var_norm: 0.590431874251583","x: 5.64 <br>var_random: 0.213359367102385 <br>var_norm: 0.451429548476166","x: 5.65 <br>var_random: -0.379012540914118 <br>var_norm: 0.660389798253891","x: 5.66 <br>var_random: -0.637272391002625 <br>var_norm: 0.249948664063075","x: 5.67 <br>var_random: -0.0928546232171357 <br>var_norm: 0.779461357424625","x: 5.68 <br>var_random: 0.573152338620275 <br>var_norm: 0.56469288839966","x: 5.69 <br>var_random: 0.67356898682192 <br>var_norm: 0.64973168023132","x: 5.7 <br>var_random: -0.997024729382247 <br>var_norm: 0.504327218909025","x: 5.71 <br>var_random: -0.233795241918415 <br>var_norm: 1.03056983706167","x: 5.72 <br>var_random: 0.784478265792131 <br>var_norm: 0.995267740467939","x: 5.73 <br>var_random: 0.955479707103223 <br>var_norm: 0.4322168213453","x: 5.74 <br>var_random: -0.0439276667311788 <br>var_norm: 0.674116498948426","x: 5.75 <br>var_random: 0.296061212662607 <br>var_norm: 0.506789150580111","x: 5.76 <br>var_random: -0.876442356035113 <br>var_norm: 0.244686843955201","x: 5.77 <br>var_random: -0.588252685964108 <br>var_norm: 0.325051227674696","x: 5.78 <br>var_random: -0.139630655292422 <br>var_norm: 0.381040258483754","x: 5.79 <br>var_random: -0.725950270425528 <br>var_norm: 0.192088653314512","x: 5.8 <br>var_random: -0.709397492930293 <br>var_norm: 0.499106741647424","x: 5.81 <br>var_random: -0.254983170889318 <br>var_norm: 0.658135662666517","x: 5.82 <br>var_random: -0.246289027389139 <br>var_norm: 0.491584176722475","x: 5.83 <br>var_random: 0.231853011064231 <br>var_norm: 0.334898597927459","x: 5.84 <br>var_random: 0.549032203387469 <br>var_norm: 0.0295806831339499","x: 5.85 <br>var_random: 0.451012942939997 <br>var_norm: 0.362968575733432","x: 5.86 <br>var_random: -0.976870270911604 <br>var_norm: 0.488182497851865","x: 5.87 <br>var_random: -0.935367833822966 <br>var_norm: 0.357156470155591","x: 5.88 <br>var_random: 0.959880128037184 <br>var_norm: 0.660379415574118","x: 5.89 <br>var_random: 0.769866101909429 <br>var_norm: 0.607137543383871","x: 5.9 <br>var_random: 0.56411307444796 <br>var_norm: 0.78217013276874","x: 5.91 <br>var_random: -0.122981403954327 <br>var_norm: 0.362735240615714","x: 5.92 <br>var_random: 0.0312687517143786 <br>var_norm: 0.510398879775248","x: 5.93 <br>var_random: 0.92898336937651 <br>var_norm: 0.978408287114141","x: 5.94 <br>var_random: 0.14558368222788 <br>var_norm: 0.620819865924488","x: 5.95 <br>var_random: -0.70376935089007 <br>var_norm: 0.551111971115464","x: 5.96 <br>var_random: -0.38651872985065 <br>var_norm: 0.292236631154776","x: 5.97 <br>var_random: 0.16779820015654 <br>var_norm: 0.266906096291969","x: 5.98 <br>var_random: -0.917623805813491 <br>var_norm: 0.0396685756274348","x: 5.99 <br>var_random: -0.079791693482548 <br>var_norm: 0.4796308163047","x: 6 <br>var_random: 0.913153521250933 <br>var_norm: 0.224130675683298","x: 6.01 <br>var_random: 0.444915764499456 <br>var_norm: 0.726651525016941","x: 6.02 <br>var_random: 0.882850451860577 <br>var_norm: 0.29771857786632","x: 6.03 <br>var_random: -0.815612352453172 <br>var_norm: 0.165828916246929","x: 6.04 <br>var_random: -0.245132350828499 <br>var_norm: 0.448444618392532","x: 6.05 <br>var_random: 0.779129605740309 <br>var_norm: 0.766583649200042","x: 6.06 <br>var_random: 0.0624327417463064 <br>var_norm: 0.439977820936745","x: 6.07 <br>var_random: -0.456547507550567 <br>var_norm: 0.576771855630643","x: 6.08 <br>var_random: 0.0329404901713133 <br>var_norm: 0.711188837305559","x: 6.09 <br>var_random: -0.746855932287872 <br>var_norm: 0.298696990520077","x: 6.1 <br>var_random: -0.267349909991026 <br>var_norm: 0.548628884343153","x: 6.11 <br>var_random: 0.495861760340631 <br>var_norm: 0.575044115380339","x: 6.12 <br>var_random: 0.285852930508554 <br>var_norm: 0.61627727474032","x: 6.13 <br>var_random: 0.376188057474792 <br>var_norm: 0.217521090311394","x: 6.14 <br>var_random: 0.741660694591701 <br>var_norm: 0.832225858039953","x: 6.15 <br>var_random: -0.609096406027675 <br>var_norm: 0.494399217372375","x: 6.16 <br>var_random: -0.502236199565232 <br>var_norm: 0.690530020203892","x: 6.17 <br>var_random: 0.793273207731545 <br>var_norm: 0.635447330974207","x: 6.18 <br>var_random: 0.363236334640533 <br>var_norm: 0.302220443809307","x: 6.19 <br>var_random: -0.667580281849951 <br>var_norm: 0.657042201501554","x: 6.2 <br>var_random: -0.256490693893284 <br>var_norm: 0.761121340069077","x: 6.21 <br>var_random: 0.592802355065942 <br>var_norm: 0.771944878400648","x: 6.22 <br>var_random: 0.3838623710908 <br>var_norm: 0.451240785259646","x: 6.23 <br>var_random: 0.276454992126673 <br>var_norm: 0.23472836529074","x: 6.24 <br>var_random: 0.499018999747932 <br>var_norm: 0.622280746996074","x: 6.25 <br>var_random: -0.0418216409161687 <br>var_norm: 0.176075266386164","x: 6.26 <br>var_random: 0.0225856872275472 <br>var_norm: 0.723968691820194","x: 6.27 <br>var_random: -0.691817544400692 <br>var_norm: 0.00248918480821064","x: 6.28 <br>var_random: -0.184833335224539 <br>var_norm: 0.43505719125404","x: 6.29 <br>var_random: -0.550931370817125 <br>var_norm: 0.737147626702961","x: 6.3 <br>var_random: 0.202540909405798 <br>var_norm: 0.553750829544626","x: 6.31 <br>var_random: -0.652774013578892 <br>var_norm: 0.574028087206039","x: 6.32 <br>var_random: -0.586988360621035 <br>var_norm: 0.0822802389555362","x: 6.33 <br>var_random: -0.780145357828587 <br>var_norm: 0.466962069523152","x: 6.34 <br>var_random: -0.289686185773462 <br>var_norm: 0.338259878309164","x: 6.35 <br>var_random: -0.895690423902124 <br>var_norm: 0.472246521804173","x: 6.36 <br>var_random: -0.981129659339786 <br>var_norm: 0.692729682631956","x: 6.37 <br>var_random: 0.247355653904378 <br>var_norm: -0.0140716944805622","x: 6.38 <br>var_random: 0.731778048910201 <br>var_norm: 0.691191473676335","x: 6.39 <br>var_random: 0.00803423393517733 <br>var_norm: 0.660129951854487","x: 6.4 <br>var_random: 0.106202092487365 <br>var_norm: 0.36429440364835","x: 6.41 <br>var_random: -0.549330542329699 <br>var_norm: 0.888433635590384","x: 6.42 <br>var_random: -0.916867989115417 <br>var_norm: 0.668121609663852","x: 6.43 <br>var_random: -0.213467128574848 <br>var_norm: 0.733797755166637","x: 6.44 <br>var_random: 0.915546750184149 <br>var_norm: 0.269581369178779","x: 6.45 <br>var_random: -0.733206362929195 <br>var_norm: 0.22660358875033","x: 6.46 <br>var_random: 0.936060588341206 <br>var_norm: 0.435246231531441","x: 6.47 <br>var_random: -0.26805326435715 <br>var_norm: 0.357103823533153","x: 6.48 <br>var_random: 0.976521899923682 <br>var_norm: 0.594011301731393","x: 6.49 <br>var_random: 0.360640518832952 <br>var_norm: 0.638896430917208","x: 6.5 <br>var_random: -0.210250046104193 <br>var_norm: 0.479392076707669","x: 6.51 <br>var_random: 0.0903510716743767 <br>var_norm: -0.0300277674138534","x: 6.52 <br>var_random: -0.26174834324047 <br>var_norm: 0.11208895589038","x: 6.53 <br>var_random: 0.963623900897801 <br>var_norm: 0.6280270429594","x: 6.54 <br>var_random: 0.381015333347023 <br>var_norm: 0.774550720412108","x: 6.55 <br>var_random: 0.428731526248157 <br>var_norm: 0.591524220482515","x: 6.56 <br>var_random: 0.475183045025915 <br>var_norm: 0.578351356420826","x: 6.57 <br>var_random: -0.904765860643238 <br>var_norm: 0.565261679282267","x: 6.58 <br>var_random: -0.678991329390556 <br>var_norm: 0.885164517401985","x: 6.59 <br>var_random: -0.686587632633746 <br>var_norm: 0.553337160751733","x: 6.6 <br>var_random: 0.244285376276821 <br>var_norm: 0.0470000944526213","x: 6.61 <br>var_random: 0.443220011889935 <br>var_norm: 0.782182927678545","x: 6.62 <br>var_random: -0.669579317327589 <br>var_norm: 0.693377036859177","x: 6.63 <br>var_random: -0.368417849764228 <br>var_norm: 0.669064273948001","x: 6.64 <br>var_random: -0.855990388430655 <br>var_norm: 0.688921515626739","x: 6.65 <br>var_random: -0.411246866453439 <br>var_norm: 0.62625176904369","x: 6.66 <br>var_random: 0.777987482491881 <br>var_norm: 0.170689541224536","x: 6.67 <br>var_random: 0.840346199925989 <br>var_norm: 0.0793172267763492","x: 6.68 <br>var_random: 0.197288792580366 <br>var_norm: 0.889857536817155","x: 6.69 <br>var_random: -0.413989658467472 <br>var_norm: -0.0399032221147126","x: 6.7 <br>var_random: 0.690954060759395 <br>var_norm: 0.924123943039377","x: 6.71 <br>var_random: 0.737602619919926 <br>var_norm: 0.733351113427","x: 6.72 <br>var_random: 0.596105881500989 <br>var_norm: 0.369638340619446","x: 6.73 <br>var_random: 0.971142218913883 <br>var_norm: 0.101874806958203","x: 6.74 <br>var_random: 0.00999956578016281 <br>var_norm: 0.838178605390767","x: 6.75 <br>var_random: -0.937742688227445 <br>var_norm: -0.0987672982710676","x: 6.76 <br>var_random: 0.374762058258057 <br>var_norm: 0.134939110609327","x: 6.77 <br>var_random: -0.741413081996143 <br>var_norm: 0.687255551467201","x: 6.78 <br>var_random: 0.896442016121 <br>var_norm: 0.47233670465921","x: 6.79 <br>var_random: 0.594482973217964 <br>var_norm: 0.181009112484694","x: 6.8 <br>var_random: -0.753931228071451 <br>var_norm: 0.259405257268894","x: 6.81 <br>var_random: 0.71459315251559 <br>var_norm: 0.939184931995813","x: 6.82 <br>var_random: -0.0978619875386357 <br>var_norm: 0.645859884601597","x: 6.83 <br>var_random: 0.249686511233449 <br>var_norm: 0.687944679302553","x: 6.84 <br>var_random: 0.370100514031947 <br>var_norm: 0.145543368316511","x: 6.85 <br>var_random: -0.790487476158887 <br>var_norm: 0.66338789401295","x: 6.86 <br>var_random: -0.713677868247032 <br>var_norm: 0.544031733884632","x: 6.87 <br>var_random: 0.604265452362597 <br>var_norm: 0.522185899823907","x: 6.88 <br>var_random: 0.831880419515073 <br>var_norm: 0.371574486227946","x: 6.89 <br>var_random: 0.116166804917157 <br>var_norm: 0.745767358226398","x: 6.9 <br>var_random: -0.185003503225744 <br>var_norm: 0.258272418817082","x: 6.91 <br>var_random: -0.891878998838365 <br>var_norm: 0.550675120992962","x: 6.92 <br>var_random: 0.915518447756767 <br>var_norm: 0.585964202268919","x: 6.93 <br>var_random: 0.180043369531631 <br>var_norm: 0.792428655419143","x: 6.94 <br>var_random: -0.712393038440496 <br>var_norm: 0.382821227295041","x: 6.95 <br>var_random: -0.650039684493095 <br>var_norm: 0.8989468258968","x: 6.96 <br>var_random: 0.408271627966315 <br>var_norm: 0.197986663958451","x: 6.97 <br>var_random: -0.482866700738668 <br>var_norm: 0.693645978930164","x: 6.98 <br>var_random: -0.906337099149823 <br>var_norm: 0.250864137043448","x: 6.99 <br>var_random: 0.125491438899189 <br>var_norm: 0.616889987827732","x: 7 <br>var_random: -0.350755257532001 <br>var_norm: 0.450384904078687","x: 7.01 <br>var_random: 0.305836719460785 <br>var_norm: 0.588413465433718","x: 7.02 <br>var_random: -0.121130896732211 <br>var_norm: 0.669853113471042","x: 7.03 <br>var_random: -0.831292229238898 <br>var_norm: 0.174797393287388","x: 7.04 <br>var_random: -0.625166695564985 <br>var_norm: 0.326972347062497","x: 7.05 <br>var_random: -0.0968919009901583 <br>var_norm: 0.413707598037459","x: 7.06 <br>var_random: 0.146681514102966 <br>var_norm: 0.621353739958704","x: 7.07 <br>var_random: 0.418211263604462 <br>var_norm: 0.577715825738016","x: 7.08 <br>var_random: 0.667436309158802 <br>var_norm: 0.316384913162006","x: 7.09 <br>var_random: -0.498832195531577 <br>var_norm: 0.760958099775916","x: 7.1 <br>var_random: -0.799367059487849 <br>var_norm: 0.523766056614093","x: 7.11 <br>var_random: -0.384781824424863 <br>var_norm: 0.443907084181676","x: 7.12 <br>var_random: -0.127534169238061 <br>var_norm: 0.71114050118758","x: 7.13 <br>var_random: 0.224868559744209 <br>var_norm: 0.613929237230912","x: 7.14 <br>var_random: 0.84883975610137 <br>var_norm: 0.423157054551441","x: 7.15 <br>var_random: 0.738271977286786 <br>var_norm: 0.747232787320683","x: 7.16 <br>var_random: -0.495169525500387 <br>var_norm: 0.605538899494206","x: 7.17 <br>var_random: -0.154237534385175 <br>var_norm: 0.81696690277571","x: 7.18 <br>var_random: -0.763054322451353 <br>var_norm: 0.434279590412027","x: 7.19 <br>var_random: -0.864196638576686 <br>var_norm: 0.502166012067077","x: 7.2 <br>var_random: 0.398259595967829 <br>var_norm: 0.631420930950706","x: 7.21 <br>var_random: 0.905203875154257 <br>var_norm: 0.797867323240825","x: 7.22 <br>var_random: -0.738253091927618 <br>var_norm: 0.0969546715794775","x: 7.23 <br>var_random: -0.112542518414557 <br>var_norm: 0.806722119832691","x: 7.24 <br>var_random: -0.0339623927138746 <br>var_norm: 0.665933171247893","x: 7.25 <br>var_random: 0.0227935528382659 <br>var_norm: 0.598481435837116","x: 7.26 <br>var_random: 0.0300638214685023 <br>var_norm: 0.773170628009653","x: 7.27 <br>var_random: -0.525193215813488 <br>var_norm: 0.851178041485363","x: 7.28 <br>var_random: -0.496866657398641 <br>var_norm: 0.873815778743972","x: 7.29 <br>var_random: 0.301937952637672 <br>var_norm: 0.613836005665059","x: 7.3 <br>var_random: -0.526553240604699 <br>var_norm: 0.559583987349284","x: 7.31 <br>var_random: -0.870202204212546 <br>var_norm: 0.641893813147588","x: 7.32 <br>var_random: 0.466552153229713 <br>var_norm: 0.242551413670558","x: 7.33 <br>var_random: -0.44740900490433 <br>var_norm: 0.467317435535881","x: 7.34 <br>var_random: -0.957191225606948 <br>var_norm: 0.817594439995657","x: 7.35 <br>var_random: -0.120820364914834 <br>var_norm: 0.419569662058941","x: 7.36 <br>var_random: -0.27942521404475 <br>var_norm: 0.124841952106118","x: 7.37 <br>var_random: 0.263288582209498 <br>var_norm: 0.658861205899853","x: 7.38 <br>var_random: -0.202750260476023 <br>var_norm: 0.461757266348374","x: 7.39 <br>var_random: -0.0277940277010202 <br>var_norm: 0.606097307765029","x: 7.4 <br>var_random: -0.0974471215158701 <br>var_norm: 0.684967185745939","x: 7.41 <br>var_random: -0.750863780267537 <br>var_norm: 0.560876582366211","x: 7.42 <br>var_random: -0.396277188789099 <br>var_norm: 0.330950449507865","x: 7.43 <br>var_random: -0.212788444943726 <br>var_norm: 0.471064152719659","x: 7.44 <br>var_random: 0.768008125480264 <br>var_norm: 0.391813871306483","x: 7.45 <br>var_random: -0.160796671640128 <br>var_norm: 0.292680548313333","x: 7.46 <br>var_random: 0.567528753075749 <br>var_norm: 0.652230611343891","x: 7.47 <br>var_random: -0.131306659895927 <br>var_norm: 0.902583944725998","x: 7.48 <br>var_random: 0.335022180341184 <br>var_norm: 0.646514060211367","x: 7.49 <br>var_random: 0.756995428819209 <br>var_norm: 0.458344829609552","x: 7.5 <br>var_random: -0.480066889431328 <br>var_norm: 0.893661334269591","x: 7.51 <br>var_random: -0.74182903720066 <br>var_norm: 0.191243298082348","x: 7.52 <br>var_random: -0.597896537743509 <br>var_norm: 0.785600683678083","x: 7.53 <br>var_random: -0.563315300736576 <br>var_norm: 0.544582034873569","x: 7.54 <br>var_random: 0.214603414293379 <br>var_norm: 0.0966906452684321","x: 7.55 <br>var_random: -0.054445244371891 <br>var_norm: 0.339312202703797","x: 7.56 <br>var_random: -0.698846919462085 <br>var_norm: 0.368734245499539","x: 7.57 <br>var_random: -0.995113080367446 <br>var_norm: -0.00632276732618442","x: 7.58 <br>var_random: 0.937641122378409 <br>var_norm: 0.660026069268017","x: 7.59 <br>var_random: 0.607217675074935 <br>var_norm: 0.437152925931659","x: 7.6 <br>var_random: -0.979698881972581 <br>var_norm: 0.346061806363372","x: 7.61 <br>var_random: -0.271498989313841 <br>var_norm: 0.609228977449412","x: 7.62 <br>var_random: 0.992935715708882 <br>var_norm: 0.27615406219435","x: 7.63 <br>var_random: 0.181566454935819 <br>var_norm: 1.36166364464874","x: 7.64 <br>var_random: -0.939035277348012 <br>var_norm: 0.621784625950116","x: 7.65 <br>var_random: 0.121287669055164 <br>var_norm: 0.482643321216743","x: 7.66 <br>var_random: -0.0281447628512979 <br>var_norm: 0.775240096211255","x: 7.67 <br>var_random: 0.192105197347701 <br>var_norm: 0.810773926340571","x: 7.68 <br>var_random: 0.988027355633676 <br>var_norm: 0.386681230916014","x: 7.69 <br>var_random: 0.741573377978057 <br>var_norm: 0.831014650154884","x: 7.7 <br>var_random: 0.443693963810802 <br>var_norm: 0.86435668310202","x: 7.71 <br>var_random: -0.933231236878783 <br>var_norm: 0.715602733882565","x: 7.72 <br>var_random: 0.204971694387496 <br>var_norm: 0.326277704096245","x: 7.73 <br>var_random: -0.520661077927798 <br>var_norm: 0.546640831818838","x: 7.74 <br>var_random: 0.752898659091443 <br>var_norm: 0.656752791333978","x: 7.75 <br>var_random: 0.102928827982396 <br>var_norm: 0.439460360125808","x: 7.76 <br>var_random: -0.418199164327234 <br>var_norm: 0.658825010404946","x: 7.77 <br>var_random: 0.793250891380012 <br>var_norm: 0.556067605317744","x: 7.78 <br>var_random: -0.098359523806721 <br>var_norm: 1.06384698932811","x: 7.79 <br>var_random: 0.514971329830587 <br>var_norm: 0.787589095306029","x: 7.8 <br>var_random: -0.065954236779362 <br>var_norm: 0.776996602866057","x: 7.81 <br>var_random: 0.254730876069516 <br>var_norm: 0.0141040796952999","x: 7.82 <br>var_random: -0.916544610634446 <br>var_norm: 0.662026677736651","x: 7.83 <br>var_random: 0.173892059363425 <br>var_norm: 0.357591582912824","x: 7.84 <br>var_random: 0.397976561449468 <br>var_norm: 0.570023946536861","x: 7.85 <br>var_random: 0.744278003461659 <br>var_norm: 0.286886460625154","x: 7.86 <br>var_random: 0.575560999568552 <br>var_norm: 0.53303338216431","x: 7.87 <br>var_random: -0.216683701612055 <br>var_norm: 0.392284370060064","x: 7.88 <br>var_random: -0.549916717223823 <br>var_norm: 0.644361220074984","x: 7.89 <br>var_random: 0.923803667537868 <br>var_norm: 0.681098641517066","x: 7.9 <br>var_random: 0.428759668488055 <br>var_norm: 0.296115658879621","x: 7.91 <br>var_random: 0.911459691822529 <br>var_norm: 0.867995729736516","x: 7.92 <br>var_random: 0.546891012229025 <br>var_norm: 0.666113229214625","x: 7.93 <br>var_random: 0.42314792657271 <br>var_norm: 0.350078879403165","x: 7.94 <br>var_random: -0.191111620515585 <br>var_norm: 0.173911359181384","x: 7.95 <br>var_random: 0.768852537497878 <br>var_norm: -0.132532199412039","x: 7.96 <br>var_random: -0.277536677662283 <br>var_norm: 0.440807202347682","x: 7.97 <br>var_random: 0.332299479749054 <br>var_norm: 0.434241316869408","x: 7.98 <br>var_random: 0.611158266663551 <br>var_norm: -0.0531323081427547","x: 7.99 <br>var_random: -0.614104101900011 <br>var_norm: 0.257455646021132","x: 8 <br>var_random: -0.332431720104069 <br>var_norm: 0.543539558110733","x: 8.01 <br>var_random: 0.229340242221951 <br>var_norm: 0.306568781101815","x: 8.02 <br>var_random: -0.0475881858728826 <br>var_norm: 0.747450086383304","x: 8.03 <br>var_random: 0.531576842535287 <br>var_norm: 0.477987941280671","x: 8.04 <br>var_random: 0.89828400220722 <br>var_norm: 0.528354925204635","x: 8.05 <br>var_random: 0.52317369543016 <br>var_norm: 0.554204702607679","x: 8.06 <br>var_random: 0.364146772306412 <br>var_norm: 0.383689549669818","x: 8.07 <br>var_random: 0.98776240227744 <br>var_norm: 0.24398619667592","x: 8.08 <br>var_random: -0.40364719601348 <br>var_norm: 0.768848043594795","x: 8.09 <br>var_random: -0.201212238054723 <br>var_norm: 0.306120647255463","x: 8.1 <br>var_random: -0.601254880428314 <br>var_norm: 0.906388676170897","x: 8.11 <br>var_random: 0.448787282221019 <br>var_norm: 0.710869139445718","x: 8.12 <br>var_random: 0.556293649598956 <br>var_norm: 0.51918596024336","x: 8.13 <br>var_random: -0.0142513830214739 <br>var_norm: 0.807057322742099","x: 8.14 <br>var_random: -0.36872840160504 <br>var_norm: 0.509332572632086","x: 8.15 <br>var_random: -0.872291634324938 <br>var_norm: 0.221472986626659","x: 8.16 <br>var_random: 0.665550199802965 <br>var_norm: 0.371964482585546","x: 8.17 <br>var_random: -0.860018972773105 <br>var_norm: 0.317094147149177","x: 8.18 <br>var_random: 0.804285747464746 <br>var_norm: -0.223179873800318","x: 8.19 <br>var_random: -0.294782652985305 <br>var_norm: 1.16585914977567","x: 8.2 <br>var_random: 0.0936621492728591 <br>var_norm: 0.404212400072678","x: 8.21 <br>var_random: -0.418788766022772 <br>var_norm: 0.437468532756342","x: 8.22 <br>var_random: -0.626959689427167 <br>var_norm: 0.337439307088079","x: 8.23 <br>var_random: -0.425031019840389 <br>var_norm: 0.406916524166869","x: 8.24 <br>var_random: -0.990906967781484 <br>var_norm: 0.548868273251614","x: 8.25 <br>var_random: -0.848414817359298 <br>var_norm: 0.692270173172562","x: 8.26 <br>var_random: -0.413218598812819 <br>var_norm: 0.647855668523383","x: 8.27 <br>var_random: 0.0783297177404165 <br>var_norm: -0.0742976873478808","x: 8.28 <br>var_random: 0.497705802321434 <br>var_norm: 0.115849488311185","x: 8.29 <br>var_random: 0.658361753914505 <br>var_norm: 0.965536654652606","x: 8.3 <br>var_random: 0.348317178431898 <br>var_norm: 1.05172530283612","x: 8.31 <br>var_random: -0.256031478289515 <br>var_norm: -0.324123454616381","x: 8.32 <br>var_random: 0.341628659050912 <br>var_norm: 0.0859932741411309","x: 8.33 <br>var_random: -0.625996307469904 <br>var_norm: 0.384181906168309","x: 8.34 <br>var_random: 0.749429239425808 <br>var_norm: 0.608539380794795","x: 8.35 <br>var_random: -0.692950791679323 <br>var_norm: 0.575984428404978","x: 8.36 <br>var_random: 0.611219003796577 <br>var_norm: 0.909114209758216","x: 8.37 <br>var_random: 0.948449030052871 <br>var_norm: 0.891382094428604","x: 8.38 <br>var_random: -0.278562238439918 <br>var_norm: 0.332740530461014","x: 8.39 <br>var_random: -0.509915468748659 <br>var_norm: 0.839924763280335","x: 8.4 <br>var_random: 0.0972400652244687 <br>var_norm: 0.557566630201947","x: 8.41 <br>var_random: -0.700539686251432 <br>var_norm: 0.118678766787106","x: 8.42 <br>var_random: -0.112420475110412 <br>var_norm: 0.569372179167406","x: 8.43 <br>var_random: 0.733660811092705 <br>var_norm: 0.451826343343346","x: 8.44 <br>var_random: 0.00137022091075778 <br>var_norm: 0.558240041970202","x: 8.45 <br>var_random: -0.530115086585283 <br>var_norm: 0.944056751579814","x: 8.46 <br>var_random: -0.310012074653059 <br>var_norm: -0.231209412173555","x: 8.47 <br>var_random: 0.519545126706362 <br>var_norm: 0.371329259444729","x: 8.48 <br>var_random: -0.266193761024624 <br>var_norm: 0.41056015797712","x: 8.49 <br>var_random: 0.0397511287592351 <br>var_norm: 0.700663725091736","x: 8.5 <br>var_random: 0.0441429014317691 <br>var_norm: 0.208386704184229","x: 8.51 <br>var_random: 0.885046381503344 <br>var_norm: 0.895988317256011","x: 8.52 <br>var_random: -0.310043594334275 <br>var_norm: 0.294831552881166","x: 8.53 <br>var_random: 0.319213456474245 <br>var_norm: 0.432139426954102","x: 8.54 <br>var_random: -0.373238404747099 <br>var_norm: 0.423772516071577","x: 8.55 <br>var_random: -0.444391890894622 <br>var_norm: 0.494302983228915","x: 8.56 <br>var_random: 0.817791274283081 <br>var_norm: 0.574715232221085","x: 8.57 <br>var_random: -0.632799865212291 <br>var_norm: 0.998883055062328","x: 8.58 <br>var_random: -0.90311515564099 <br>var_norm: 0.506115283585759","x: 8.59 <br>var_random: -0.182106312830001 <br>var_norm: 0.297335262460234","x: 8.6 <br>var_random: 0.0164215448312461 <br>var_norm: 0.425272647459233","x: 8.61 <br>var_random: 0.516620288603008 <br>var_norm: 0.741598359251639","x: 8.62 <br>var_random: -0.790389396715909 <br>var_norm: 0.247503192955118","x: 8.63 <br>var_random: -0.93634439073503 <br>var_norm: 0.566174274971487","x: 8.64 <br>var_random: -0.241776003036648 <br>var_norm: 0.577136786240552","x: 8.65 <br>var_random: -0.978797457180917 <br>var_norm: 0.811044367125702","x: 8.66 <br>var_random: -0.533887612167746 <br>var_norm: 0.236894115976142","x: 8.67 <br>var_random: 0.688965281937271 <br>var_norm: 0.550314113416179","x: 8.68 <br>var_random: 0.566518696490675 <br>var_norm: 0.588851182428342","x: 8.69 <br>var_random: 0.461000737734139 <br>var_norm: 0.0661870708906465","x: 8.7 <br>var_random: -0.0106485127471387 <br>var_norm: 0.439002777226377","x: 8.71 <br>var_random: -0.545682165771723 <br>var_norm: 0.616823650099553","x: 8.72 <br>var_random: 0.949434525799006 <br>var_norm: -0.318018613873635","x: 8.73 <br>var_random: 0.686597451101989 <br>var_norm: 0.390194735377262","x: 8.74 <br>var_random: -0.0655302526429296 <br>var_norm: 0.367107907437788","x: 8.75 <br>var_random: 0.657207642216235 <br>var_norm: 0.470897318730997","x: 8.76 <br>var_random: 0.592305014375597 <br>var_norm: 0.462127687509829","x: 8.77 <br>var_random: -0.596474697813392 <br>var_norm: 0.694751707287546","x: 8.78 <br>var_random: -0.940989272668958 <br>var_norm: 0.469096904550414","x: 8.79 <br>var_random: -0.902994330041111 <br>var_norm: 0.714431274681162","x: 8.8 <br>var_random: -0.405578954610974 <br>var_norm: 0.83846481498965","x: 8.81 <br>var_random: 0.468797964975238 <br>var_norm: 0.152900824611136","x: 8.82 <br>var_random: -0.642934661824256 <br>var_norm: 0.424044279745065","x: 8.83 <br>var_random: 0.0716419988311827 <br>var_norm: 0.385848459624114","x: 8.84 <br>var_random: -0.586555836256593 <br>var_norm: 0.566476884988706","x: 8.85 <br>var_random: 0.575834878254682 <br>var_norm: 0.44571287901842","x: 8.86 <br>var_random: -0.33491531200707 <br>var_norm: 0.410403987135778","x: 8.87 <br>var_random: 0.826530466321856 <br>var_norm: 0.5566317786065","x: 8.88 <br>var_random: 0.933766131289303 <br>var_norm: 0.725920977108192","x: 8.89 <br>var_random: -0.573150455020368 <br>var_norm: 0.345532267827924","x: 8.9 <br>var_random: 0.474748124368489 <br>var_norm: 0.546029734131879","x: 8.91 <br>var_random: -0.470442466437817 <br>var_norm: 0.514896711488813","x: 8.92 <br>var_random: 0.756780127529055 <br>var_norm: 1.05331927050905","x: 8.93 <br>var_random: -0.169010537676513 <br>var_norm: 0.555881205725105","x: 8.94 <br>var_random: -0.490336030721664 <br>var_norm: 0.298070899153316","x: 8.95 <br>var_random: 0.619011817499995 <br>var_norm: 0.724864217218976","x: 8.96 <br>var_random: -0.331582015845925 <br>var_norm: 0.541321788441547","x: 8.97 <br>var_random: 0.336056577973068 <br>var_norm: 0.430301144314626","x: 8.98 <br>var_random: -0.209426818881184 <br>var_norm: 0.257023505817976","x: 8.99 <br>var_random: 0.146143169607967 <br>var_norm: 0.628288914332361","x: 9 <br>var_random: 0.538417337927967 <br>var_norm: 0.505506629901715","x: 9.01 <br>var_random: -0.746656933333725 <br>var_norm: 0.573049172176382","x: 9.02 <br>var_random: -0.512044502422214 <br>var_norm: 0.730289521981658","x: 9.03 <br>var_random: 0.532898307777941 <br>var_norm: 0.220241412339619","x: 9.04 <br>var_random: -0.90915057528764 <br>var_norm: 0.567033261332585","x: 9.05 <br>var_random: -0.16996695427224 <br>var_norm: 0.723226413594605","x: 9.06 <br>var_random: -0.241478446405381 <br>var_norm: 0.258953636934896","x: 9.07 <br>var_random: -0.384814993944019 <br>var_norm: -0.0266561415946255","x: 9.08 <br>var_random: -0.799469047691673 <br>var_norm: 0.344952256559234","x: 9.09 <br>var_random: 0.144502588082105 <br>var_norm: 0.3121907352694","x: 9.1 <br>var_random: -0.184180568438023 <br>var_norm: 0.368467608538588","x: 9.11 <br>var_random: -0.238576305098832 <br>var_norm: 0.542412671479542","x: 9.12 <br>var_random: 0.942065245937556 <br>var_norm: 0.755521595293621","x: 9.13 <br>var_random: -0.449523154646158 <br>var_norm: 0.174417697641701","x: 9.14 <br>var_random: 0.618363054934889 <br>var_norm: 0.711050936486858","x: 9.15 <br>var_random: -0.889160431455821 <br>var_norm: 0.227652906311132","x: 9.16 <br>var_random: -0.82012407714501 <br>var_norm: 0.0577028189634527","x: 9.17 <br>var_random: -0.768615284003317 <br>var_norm: 0.516071454398448","x: 9.18 <br>var_random: -0.610102660488337 <br>var_norm: 0.673219357594345","x: 9.19 <br>var_random: -0.554934858810157 <br>var_norm: 0.3603160570394","x: 9.2 <br>var_random: -0.347786322236061 <br>var_norm: 0.412713116231429","x: 9.21 <br>var_random: -0.380989783909172 <br>var_norm: 0.434641049749087","x: 9.22 <br>var_random: 0.979465222917497 <br>var_norm: 0.594080613479132","x: 9.23 <br>var_random: 0.495195959229022 <br>var_norm: 0.397982165814843","x: 9.24 <br>var_random: 0.378979958128184 <br>var_norm: 0.51386558308545","x: 9.25 <br>var_random: 0.911101272329688 <br>var_norm: 0.35467638465544","x: 9.26 <br>var_random: 0.100122193340212 <br>var_norm: 0.559810589042983","x: 9.27 <br>var_random: 0.0503930347040296 <br>var_norm: 0.645049736423314","x: 9.28 <br>var_random: 0.874896233901381 <br>var_norm: 0.165624272603158","x: 9.29 <br>var_random: 0.118918829131871 <br>var_norm: 0.387247347748844","x: 9.3 <br>var_random: -0.233548949938267 <br>var_norm: 0.991982400700178","x: 9.31 <br>var_random: -0.205838648136705 <br>var_norm: 0.457683422801821","x: 9.32 <br>var_random: -0.758379301521927 <br>var_norm: 0.167059511265033","x: 9.33 <br>var_random: 0.173311666119844 <br>var_norm: 0.686129563511624","x: 9.34 <br>var_random: -0.627713263034821 <br>var_norm: 0.317702205819043","x: 9.35 <br>var_random: 0.378992727492005 <br>var_norm: 0.690816989879717","x: 9.36 <br>var_random: -0.56408307608217 <br>var_norm: 0.475901444634468","x: 9.37 <br>var_random: -0.344227034598589 <br>var_norm: 0.910728214033909","x: 9.38 <br>var_random: -0.909434364177287 <br>var_norm: 0.3832303706682","x: 9.39 <br>var_random: 0.953662230167538 <br>var_norm: 0.0731945791565287","x: 9.4 <br>var_random: 0.740856752265245 <br>var_norm: 0.609907010285845","x: 9.41 <br>var_random: 0.140007548499852 <br>var_norm: 0.206233860088767","x: 9.42 <br>var_random: 0.381342387758195 <br>var_norm: 0.591897065402542","x: 9.43 <br>var_random: -0.571603788994253 <br>var_norm: 0.547427131509224","x: 9.44 <br>var_random: 0.582859160844237 <br>var_norm: -0.00396153346596251","x: 9.45 <br>var_random: 0.679711387027055 <br>var_norm: 0.36742067938335","x: 9.46 <br>var_random: 0.234670143574476 <br>var_norm: 0.425583879209422","x: 9.47 <br>var_random: 0.150067058391869 <br>var_norm: 0.541781926274902","x: 9.48 <br>var_random: 0.455072987359017 <br>var_norm: 0.403140454550354","x: 9.49 <br>var_random: 0.696967110969126 <br>var_norm: 0.385380360890818","x: 9.5 <br>var_random: -0.0264182253740728 <br>var_norm: 0.190531020941906","x: 9.51 <br>var_random: -0.957075210753828 <br>var_norm: 0.0625308136774849","x: 9.52 <br>var_random: 0.126914559863508 <br>var_norm: 0.70280136964284","x: 9.53 <br>var_random: 0.0827753362245858 <br>var_norm: 0.490637451659864","x: 9.54 <br>var_random: -0.218363456893712 <br>var_norm: 0.464551485047384","x: 9.55 <br>var_random: 0.306527831591666 <br>var_norm: 0.010818613205008","x: 9.56 <br>var_random: -0.867680292576551 <br>var_norm: 0.552289094753043","x: 9.57 <br>var_random: 0.33454523421824 <br>var_norm: 0.577045800141192","x: 9.58 <br>var_random: -0.547378889285028 <br>var_norm: 0.693150155744339","x: 9.59 <br>var_random: -0.399354080203921 <br>var_norm: 0.915174698279132","x: 9.6 <br>var_random: -0.522217942401767 <br>var_norm: 0.522478215245768","x: 9.61 <br>var_random: -0.389747386798263 <br>var_norm: 0.585348373134917","x: 9.62 <br>var_random: -0.794018127489835 <br>var_norm: 0.37122166205429","x: 9.63 <br>var_random: 0.0291438470594585 <br>var_norm: 0.545376770827027","x: 9.64 <br>var_random: -0.253283044788986 <br>var_norm: 0.454467139800738","x: 9.65 <br>var_random: -0.153586058411747 <br>var_norm: 0.886768475894507","x: 9.66 <br>var_random: 0.411367739085108 <br>var_norm: 0.504126252098631","x: 9.67 <br>var_random: -0.245492411311716 <br>var_norm: 0.190189499156471","x: 9.68 <br>var_random: 0.397034781053662 <br>var_norm: 0.76624516550234","x: 9.69 <br>var_random: 0.00974902743473649 <br>var_norm: 0.322045446650803","x: 9.7 <br>var_random: -0.321412222459912 <br>var_norm: 0.0987302287278533","x: 9.71 <br>var_random: 0.00368656078353524 <br>var_norm: -0.193325808750072","x: 9.72 <br>var_random: 0.227819748222828 <br>var_norm: 0.793059695833494","x: 9.73 <br>var_random: 0.944905532058328 <br>var_norm: 0.196105894705704","x: 9.74 <br>var_random: 0.890039382502437 <br>var_norm: 0.564381455152897","x: 9.75 <br>var_random: -0.922242054250091 <br>var_norm: 0.253649761059266","x: 9.76 <br>var_random: -0.53634750796482 <br>var_norm: 0.940206977880465","x: 9.77 <br>var_random: 0.730923973955214 <br>var_norm: 0.965129815689126","x: 9.78 <br>var_random: -0.365182280540466 <br>var_norm: 0.323479458990128","x: 9.79 <br>var_random: 0.514263552613556 <br>var_norm: 0.483037767959643","x: 9.8 <br>var_random: -0.721911155618727 <br>var_norm: 0.498430366845608","x: 9.81 <br>var_random: 0.989773544482887 <br>var_norm: 0.986010690445852","x: 9.82 <br>var_random: 0.637639897875488 <br>var_norm: 0.751833296755623","x: 9.83 <br>var_random: 0.405901790596545 <br>var_norm: 0.635963956838958","x: 9.84 <br>var_random: -0.508547192439437 <br>var_norm: 0.711616605403058","x: 9.85 <br>var_random: -0.794816385954618 <br>var_norm: 0.431207728236628","x: 9.86 <br>var_random: 0.127850234508514 <br>var_norm: 0.149821654914834","x: 9.87 <br>var_random: -0.391737087164074 <br>var_norm: 0.375852609530042","x: 9.88 <br>var_random: -0.380146105308086 <br>var_norm: 0.834274485310545","x: 9.89 <br>var_random: -0.687712852377445 <br>var_norm: 0.563390421163123","x: 9.9 <br>var_random: 0.858467243611813 <br>var_norm: 0.662360815378625","x: 9.91 <br>var_random: 0.0657015671022236 <br>var_norm: 0.567105787299521","x: 9.92 <br>var_random: 0.319743547588587 <br>var_norm: 0.803726377923868","x: 9.93 <br>var_random: 0.987645924091339 <br>var_norm: 0.594505950948876","x: 9.94 <br>var_random: 0.557119365781546 <br>var_norm: 0.765364023539925","x: 9.95 <br>var_random: -0.499103997368366 <br>var_norm: 0.0697305501077706","x: 9.96 <br>var_random: -0.957386067602783 <br>var_norm: 0.484554714654618","x: 9.97 <br>var_random: 0.999237900599837 <br>var_norm: 0.690526888124776","x: 9.98 <br>var_random: 0.407824145630002 <br>var_norm: 0.795900017227981","x: 9.99 <br>var_random: 0.400576037354767 <br>var_norm: 0.460193469263912","x: 10 <br>var_random: -0.996853068005294 <br>var_norm: 0.545617294813378"],"marker":{"color":[0,0.0099998333341666645,0.01999866669333308,0.02999550020249566,0.039989334186634161,0.049979169270678331,0.059964006479444595,0.069942847337532768,0.079914693969172695,0.08987854919801104,0.099833416646828155,0.10977830083717481,0.11971220728891936,0.12963414261969486,0.13954311464423649,0.14943813247359922,0.15931820661424598,0.16918234906699603,0.17902957342582418,0.18885889497650057,0.19866933079506122,0.20845989984609956,0.21822962308086932,0.22797752353518841,0.23770262642713458,0.24740395925452294,0.25708055189215512,0.26673143668883115,0.27635564856411376,0.28595222510483553,0.29552020666133955,0.3050586364434435,0.31456656061611776,0.32404302839486837,0.3334870921408144,0.3428978074554514,0.35227423327508994,0.36161543196496199,0.37092046941298268,0.38018841512316143,0.38941834230865052,0.39860932798442295,0.40776045305957015,0.41687080242921076,0.42593946506599961,0.43496553411123023,0.44394810696551978,0.45288628537906833,0.4617791755414829,0.47062588817115802,0.47942553860420301,0.48817724688290748,0.49688013784373675,0.50553334120484694,0.51413599165311319,0.52268722893065922,0.5311861979208834,0.53963204873396931,0.54802393679187356,0.55636102291278378,0.56464247339503537,0.57286746010048128,0.58103516053730508,0.5891447579422695,0.59719544136239211,0.60518640573603955,0.6131168519734338,0.62098598703655972,0.62879302401846859,0.63653718222196798,0.64421768723769113,0.65183377102153661,0.6593846719714731,0.66686963500369789,0.67428791162814505,0.68163876002333412,0.68892144511055131,0.69613523862735671,0.70327941920041015,0.71035327241760782,0.71735609089952279,0.72428717437014256,0.7311458297268959,0.73793137110996276,0.7446431199708593,0.75128040514029271,0.75784256289527696,0.76432893702550508,0.7707388788989693,0.77707174752682384,0.78332690962748341,0.78950373968995047,0.79560162003636603,0.80161994088377719,0.80755810040511433,0.81341550478937374,0.81919156830099826,0.82488571333845007,0.83049737049197048,0.83602597860052053,0.8414709848078965,0.84683184461801519,0.85210802194936297,0.85729898918860337,0.86240422724333843,0.86742322559401697,0.87235548234498628,0.87720050427468166,0.88195780688494751,0.88662691444948727,0.89120736006143542,0.89569868568004762,0.90010044217650509,0.90441218937882595,0.90863349611588329,0.9127639402605211,0.91680310877176685,0.92075059773613566,0.92460601240802032,0.92836896724916662,0.93203908596722629,0.93561600155338587,0.9390993563190676,0.94248880193169748,0.94578399944953895,0.9489846193555862,0.95209034159051575,0.95510085558469227,0.95801586028922492,0.96083506420607268,0.96355818541719296,0.96618495161273399,0.96871510011826523,0.97114837792104458,0.97348454169531939,0.97572335782665909,0.97786460243531625,0.97990806139861419,0.98185353037235978,0.98370081481127658,0.98544972998846025,0.98710010101385037,0.98865176285171974,0.99010456033717775,0.99145834819168643,0.99271299103758848,0.99386836341164486,0.99492434977758093,0.99588084453764003,0.99673775204314341,0.99749498660405445,0.99815247249754813,0.998710143975583,0.99916794527147601,0.99952583060547906,0.99978376418935699,0.9999417202299663,0.99999968293183461,0.99995764649874008,0.99981561513429085,0.99957360304150511,0.99923163442139051,0.99878974347052396,0.99824797437763246,0.99760638131917367,0.99686502845391889,0.99602398991653673,0.99508334981018021,0.99404320219807596,0.99290365109411849,0.99166481045246857,0.99032680415615804,0.98888976600470146,0.98735383970071644,0.98571917883555349,0.98398594687393692,0.98215431713761847,0.98022447278804548,0.97819660680804466,0.97607092198252421,0.97384763087819515,0.9715269558223153,0.96910912888045631,0.96659439183329754,0.96398299615244809,0.96127520297529989,0.95847128307891416,0.95557151685294395,0.95257619427159534,0.94948561486463046,0.94630008768741447,0.94301993129001049,0.93964547368532492,0.9361770523163061,0.93261501402220048,0.92895971500386931,0.92521152078816826,0.92137080619139544,0.91743795528180982,0.91341336134122519,0.90929742682568171,0.90509056332520088,0.90079319152262727,0.8964057411515598,0.89192865095337959,0.88736236863337548,0.88270735081597407,0.87796406299907814,0.87313297950751645,0.86821458344561264,0.86320936664887371,0.85811782963480887,0.85294048155287616,0.84767784013356984,0.84233043163664567,0.83689879079849772,0.83138346077868308,0.82578499310560805,0.82010394762137417,0.81434089242579599,0.80849640381959009,0.80257106624674723,0.79656547223608654,0.79048022234200477,0.78431592508441983,0.7780731968879212,0.77175266202012571,0.76535495252925356,0.75888070818092179,0.75233057639417067,0.74570521217672003,0.7390052780594708,0.73223144403025142,0.72538438746681955,0.71846479306912625,0.71147335279084434,0.70441076577017625,0.69727773825993777,0.69007498355693642,0.68280322193063969,0.67546318055115095,0.66805559341649101,0.66058120127920072,0.65304075157226482,0.64543499833437068,0.63776470213450365,0.63003062999589221,0.62223355531930469,0.61437425780571175,0.60645352337831471,0.59847214410395655,0.59043091811391268,0.58233064952408187,0.57417214835457231,0.5659562304487028,0.55768371739141664,0.54935543642712659,0.54097222037698856,0.53253490755562116,0.52404434168727609,0.51550137182146416,0.50690685224805343,0.49826164241183857,0.48956660682659953,0.48082261498864826,0.47203054128988264,0.46319126493034518,0.45430566983030646,0.44537464454187115,0.43639908216012629,0.42737988023382978,0.41831794067565897,0.40921416967201729,0.40006947759241951,0.39088477889845219,0.38166099205233167,0.37239903942505531,0.36309984720416832,0.3537643453011427,0.34439346725838998,0.33498815015590466,0.32554933451756002,0.31607796421705381,0.30657498638352293,0.2970413513068324,0.28747801234254439,0.27788592581658678,0.26826605092961792,0.25861934966111083,0.24894678667315256,0.23924932921398243,0.22952794702126419,0.21978361222511694,0.21001729925089915,0.20022998472177053,0.19042264736102704,0.18059626789423291,0.17075182895114532,0.16089031496745576,0.15101271208634384,0.14112000805986721,0.13121319215018379,0.12129325503062975,0.11136118868664958,0.10141798631660186,0.091464642232436749,0.08150215176026912,0.07153151114084326,0.061553717429913148,0.051569768398534638,0.041580662433290491,0.031587398436453896,0.021590975726095959,0.011592393936158275,0.0015926529164868282,-0.0084072473671486184,-0.018406306933053809,-0.02840352588360379,-0.038397904505235378,-0.04838844336841415,-0.058374143427580086,-0.068354006121047778,-0.078327033470865295,-0.088292228182607596,-0.098248593745108678,-0.10819513453010837,-0.11813085589181781,-0.12805476426637968,-0.13796586727122728,-0.14786317380431852,-0.15774569414324865,-0.16761244004421832,-0.17746242484086058,-0.18729466354290317,-0.19710817293466984,-0.20690197167339977,-0.21667508038737962,-0.22642652177388314,-0.23615532069689699,-0.24586050428463702,-0.25554110202683122,-0.26519614587177337,-0.27482467032312402,-0.28442571253646254,-0.29399831241556762,-0.30354151270842933,-0.31305435910297019,-0.32253590032247897,-0.33198518822073408,-0.34140127787682095,-0.35078322768961984,-0.36013009947196856,-0.36944095854447712,-0.37871487382899804,-0.38795091794173031,-0.3971481672859602,-0.4063057021444168,-0.41542260677124626,-0.42449796948358259,-0.43353088275271773,-0.44252044329485246,-0.45146575216142315,-0.4603659148289983,-0.46922004128872713,-0.47802724613534286,-0.48678664865569937,-0.49549737291684492,-0.50415854785361147,-0.51276930735572379,-0.52132879035440649,-0.5298361409084934,-0.53829050829001768,-0.54669104706928717,-0.55503691719942383,-0.56332728410037003,-0.57156131874234373,-0.57973819772874313,-0.58785710337848274,-0.59591722380776424,-0.60391775301126061,-0.61185789094271925,-0.61973684359496328,-0.62755382307929364,-0.63530804770427562,-0.64299874205390883,-0.65062513706516734,-0.65818647010490494,-0.6656819850461192,-0.67311093234356167,-0.68047256910869403,-0.68776615918397377,-0.69499097321647196,-0.70214628873080542,-0.70923139020138615,-0.71624556912397053,-0.72318812408651212,-0.73005836083929954,-0.73685559236438336,-0.74357913894427463,-0.75022832822991903,-0.7568024953079282,-0.76330098276707337,-0.76972314076402437,-0.77606832708833229,-0.7823359072266528,-0.78852525442619503,-0.79463574975739737,-0.80066678217581766,-0.80661774858324053,-0.81248805388798429,-0.81827711106441026,-0.82398434121162578,-0.82960917361137088,-0.83515104578509347,-0.84060940355019453,-0.84598370107544651,-0.85127340093557446,-0.85647797416500115,-0.86159690031074054,-0.86662966748444425,-0.87157577241358819,-0.87643472049180138,-0.8812060258283253,-0.8858892112966027,-0.8904838085819885,-0.8949893582285835,-0.89940540968517768,-0.90373152135030566,-0.90796726061640542,-0.91211220391308034,-0.9161659367494549,-0.92012805375562401,-0.92399815872318791,-0.92777586464487549,-0.93146079375324253,-0.93505257755844939,-0.93855085688510786,-0.94195528190820099,-0.94526551218806332,-0.94848121670442564,-0.95160207388951601,-0.9546277716602164,-0.95755800744927111,-0.96039248823554335,-0.96313093057331667,-0.96577306062063883,-0.96831861416670717,-0.97076733665828829,-0.97311898322517387,-0.97537331870466648,-0.97753011766509701,-0.97958916442836685,-0.98155025309151556,-0.98341318754731077,-0.98517778150385948,-0.98684385850323653,-0.9884112519391306,-0.98987980507350393,-0.99124937105226696,-0.99251981291996316,-0.99369100363346452,-0.99476282607467559,-0.99573517306224535,-0.99660794736228553,-0.99738106169809326,-0.99805443875887945,-0.99862801120749889,-0.99910172168718481,-0.99947552282728402,-0.99974937724799395,-0.99992325756410083,-0.99999714638771797,-0.99997103633002449,-0.99984493000200436,-0.99961884001418544,-0.99929278897537799,-0.99886680949041418,-0.99834094415688757,-0.9977152455608933,-0.99698977627176955,-0.99616460883584068,-0.99523982576916259,-0.99421551954927134,-0.99309179260593539,-0.99186875731091262,-0.99054653596671316,-0.9891252607943698,-0.98760507392021535,-0.98598612736167035,-0.98426858301204156,-0.98245261262433248,-0.98053839779406893,-0.97852612994113852,-0.97641601029064973,-0.97420824985280907,-0.97190306940182081,-0.96950069945380879,-0.96700138024376603,-0.96440536170153046,-0.96171290342679339,-0.95892427466313845,-0.95603975427111809,-0.95305963070036748,-0.94998420196076083,-0.94681377559260893,-0.94354866863590658,-0.94018920759862834,-0.93673572842407893,-0.93318857645729758,-0.9295481064105251,-0.92581468232773212,-0.92198867754821623,-0.91807047466926694,-0.91406046550790698,-0.9099590510617106,-0.90576664146870445,-0.90148365596635482,-0.89711052284964243,-0.89264767942823464,-0.88809557198275424,-0.88345465572015314,-0.87872539472818989,-0.87390826192902238,-0.86900373903191608,-0.86401231648507437,-0.85893449342659201,-0.85377077763454334,-0.8485216854762041,-0.84318774185641676,-0.83776948016509778,-0.83226744222390125,-0.82668217823203571,-0.82101424671124701,-0.81526421444996344,-0.80943265644661944,-0.8035201558521553,-0.79752730391170423,-0.79145469990546602,-0.78530295108878057,-0.77907267263140312,-0.77276448755598715,-0.76637902667578439,-0.75991692853156101,-0.75337883932774652,-0.74676541286781228,-0.74007731048889436,-0.7333152009956565,-0.72647976059341313,-0.71957167282050749,-0.71259162847996149,-0.70554032557039192,-0.69841846921621353,-0.69122677159712642,-0.68396595187690068,-0.67663673613145692,-0.66923985727626201,-0.66177605499303693,-0.6542460756557914,-0.64665067225618345,-0.63899060432822374,-0.63126663787232085,-0.62347954527868532,-0.61563010525008632,-0.60771910272398577,-0.5997473287940438,-0.59171558063100937,-0.58362466140300728,-0.57547538019521716,-0.56726855192896863,-0.55900499728024877,-0.55068554259763758,-0.54231101981966978,-0.53388226639164427,-0.52540012518187929,-0.51686544439742876,-0.50827907749925838,-0.49964188311690244,-0.49095472496260095,-0.48221847174493154,-0.47343399708193507,-0.46460217941375737,-0.45572390191480472,-0.44680005240543003,-0.43783152326314689,-0.4288192113333959,-0.41976401783985889,-0.41066684829434086,-0.40152861240621462,-0.39235022399145386,-0.38313260088125134,-0.37387666483023602,-0.36458334142430132,-0.35525355998804264,-0.34588825349182883,-0.33648835845850422,-0.32705481486974064,-0.31758856607203484,-0.30809055868237811,-0.29856174249359357,-0.28900307037936113,-0.27941549819892586,-0.26979998470151617,-0.26015749143046807,-0.25048898262707492,-0.24079542513415919,-0.23107778829939224,-0.22133704387835867,-0.21157416593738504,-0.20179013075612889,-0.19198591672995502,-0.18216250427209502,-0.17232087571561025,-0.16246201521515419,-0.15258690864856114,-0.14269654351825772,-0.13279190885251674,-0.12287399510655005,-0.11294379406346737,-0.10300229873509785,-0.093050503262688905,-0.083089402817496397,-0.073119993501263081,-0.063143272246612772,-0.053160236717356125,-0.04317188520872868,-0.033179216547556817,-0.023183229992379449,-0.013184925133521251,-0.0031853017931379904,0.0068146400747701756,0.016813900484349713,0.026811479517893238,0.036806377425826917,0.046797594726689887,0.056784132307078052,0.066764991521556349,0.076739174292518919,0.086705683210001327,0.09666352163141724,0.10661169378122355,0.11654920485049364,0.12647506109640269,0.13638826994159764,0.14628784007345494,0.1561727815432119,0.16604210586495721,0.17589482611448401,0.18572995702797787,0.19554651510054424,0.20534351868455461,0.21511998808781552,0.22487494567153371,0.23460741594808079,0.24431642567853773,0.25400100397002312,0.26366018237277838,0.27329299497701326,0.28289847850949296,0.29247567242986972,0.30202361902673236,0.31154136351337869,0.32102795412328977,0.33048244220531092,0.33990388231851271,0.3492913323267357,0.35864385349280037,0.36796051057238466,0.37724037190754439,0.38648250951987934,0.39568599920333081,0.4048499206165983,0.41397335737517799,0.42305539714299684,0.43209513172364716,0.44109165715120235,0.45004407378061762,0.45895148637769029,0.46781300420858429,0.4766277411288995,0.48539481567229026,0.49411335113860816,0.50278247568157275,0.51140132239595237,0.51996902940425871,0.52848473994293077,0.53694760244801176,0.54535677064030197,0.55371140360999072,0.562010665900743,0.57025372759324666,0.57843976438820011,0.58656795768874637,0.59463749468232863,0.60264756842197231,0.6105973779069791,0.61848612816302395,0.62631303032165586,0.63407730169918142,0.64177816587493375,0.6494148527689112,0.65698659871878906,0.66449264655628204,0.67193224568286214,0.67930465214481484,0.68660912870763846,0.69384494492976367,0.7010113772355987,0.70810770898788378,0.71513323055935785,0.72208723940371844,0.72896904012587649,0.73577794455149359,0.74251327179580184,0.74917434833168939,0.7557605080570543,0.76227109236141122,0.76870545019175585,0.77506293811766702,0.78134292039565001,0.78754476903271098,0.79366786384915311,0.7997115925405982,0.80567535073921326,0.81155854207414879,0.81736057823117292,0.82308087901150551,0.82871887238983533,0.8342739945715234,0.83974569004897992,0.84513341165721734,0.8504366206285644,0.85565478664654393,0.86078738789890163,0.86583391112978991,0.87079385169109114,0.87566671359288262,0.88045200955303438,0.88514926104593827,0.88975799835035962,0.89427776059640884,0.89870809581162692,0.9030485609661848,0.90729872201718398,0.91145815395206131,0.91552644083108958,0.91950317582897068,0.92338796127551892,0.92718040869542695,0.93088013884711363,0.93448678176064603,0.9379999767747389,0.94141937257281827,0.94474462721815411,0.94797540818805248,0.95111139240710896,0.95415226627951477,0.95709772572041729,0.95994747618632614,0.96270123270457009,0.96535871990179178,0.96791967203148654,0.97038383300057496,0.97275095639501374,0.97502080550443626,0.97719315334582302,0.97926778268619996,0.9812444860643621,0.98312306581161879,0.98490333407156083,0.98658511281884587,0.98816823387700037,0.98965253893523797,0.99103787956428979,0.99232411723124747,0.99351112331341584,0.99459877911117611,0.99558697585985478,0.99647561474060065,0.99726460689026586,0.99795387341029318,0.99854334537460498,0.99903296383649598,0.99942267983452793,0.99971245439742595,0.99990225854797521,0.99999207330591877,0.99998188968985557,0.99987170871813902,0.99966154140877417,0.99935140877831696,0.99894134183977201,0.99843138159949141,0.99782157905307434,0.99711199518026705,0.99630270093886564,0.99539377725761991,0.99438531502814043,0.9932774150958098,0.99207018824969795,0.99076375521148352,0.98935824662338179,0.98785380303508008,0.98625057488968371,0.98454872250867109,0.98274841607586183,0.98084983562039951,0.97885317099874736,0.97675862187570361,0.97456639770443498,0.97227671770553203,0.9698898108450863,0.96740591581179491,0.96482528099309084,0.96214816445030626,0.95937483389286415,0.9565055666515091,0.95354064965057428,0.95048037937928886,0.94732506186212995,0.94407501262821969,0.94073055667977312,0.93729202845959758,0.93375977181765069,0.93013413997665262,0.92641549549676616,0.92260421023934025,0.91870066532972472,0.91470525111915757,0.91061836714573041,0.90644042209443398,0.90217183375629328,0.89781302898658444,0.89336444366215195,0.88882652263782103,0.88419971970191269,0.87948449753086488,0.87468132764296525,0.86979069035119905,0.86481307471522184,0.85974897849244825,0.85459890808828043,0.84936337850546728,0.84404291329260406,0.83863804449177826,0.83314931258536595,0.82757726644198404,0.82192246326160223,0.81618546851982832,0.81036685591135482,0.80446720729259369,0.79848711262349026,0.79242716990852835,0.78628798513692921,0.78007017222205433,0.77377435294001229,0.76740115686748733,0.76095122131877435,0.75442519128205343,0.74782371935488978,0.74114746567897516,0.73439709787411334,0.72757329097145973,0.72067672734601684,0.7137080966484024,0.70666809573587797,0.69955742860266801,0.69237680630956044,0.68512694691280063,0.67780857539228678,0.67042242357907222,0.662969230082182,0.65544974021475733,0.64786470591951761,0.64021488569357132,0.63250104451256628,0.62472395375419243,0.61688439112104476,0.60898314056285352,0.60102099219809035,0.59299874223495508,0.58491719289176169,0.57677715231670845,0.5685794345070696,0.56032485922779474,0.55201425192953291,0.54364844366608833,0.5352282710113162,0.52675457597546338,0.51822820592097518,0.50965001347775041,0.50102085645788463,0.49234159776988917,0.48361310533239998,0.47483625198738716,0.46601191541287112,0.45714097803515424,0.44822432694058489,0.43926285378684055,0.43025745471376869,0.42120903025377215,0.41211848524175659,0.40298672872464775,0.39381467387048763,0.38460323787711825,0.3753533418804611,0.36606591086241103,0.35674187355832859,0.34738216236417424,0.3379877132432676,0.32855946563269217,0.31909836234935213,0.30960534949569152,0.30008137636508325,0.29052739534690719,0.28094436183130178,0.27133323411363275,0.26169497329866259,0.25203054320444102,0.24234091026592378,0.23262704343833002,0.22288991410024592,0.2131304959564945,0.20334976494075557,0.19354869911798017,0.183728278586583,0.17388948538043356,0.1640333033706535,0.15416071816723032,0.14427271702045727,0.1343702887222073,0.12445442350706171,0.11452611295327708,0.10458634988363526,0.094636128266160052,0.084676443114721417,0.074708290389534776,0.064732666897565891,0.054750570192849179,0.044762998476740277,0.034770950498086081,0.024775425453357765,0.014777422886730236,0.0047779425901285115,-0.0052220154967506207,-0.015221451386431743,-0.025219365143660497,-0.03521475698538918,-0.045206627380764856,-0.055193977151074512,-0.065175807569663902,-0.075151120461809301,-0.085118918304534261,-0.095078204326360952,-0.10502798260698659,-0.11496725817687631,-0.12489503711675232,-0.13481032665699549,-0.14471213527691454,-0.15459947280389894,-0.16447135051243542,-0.17432678122297965,-0.18416477940067341,-0.19398436125389898,-0.20378454483265052,-0.21356435012673869,-0.22332279916378389,-0.2330589161070144,-0.24277172735284935,-0.25246026162825808,-0.2621235500878869,-0.27176062641094417,-0.28137052689782505,-0.2909522905664908,-0.30050495924855936,-0.31002757768512301,-0.31951919362227366,-0.32897885790632714,-0.33840562457873813,-0.34779855097069501,-0.35715669779738762,-0.36647912925192838,-0.37576491309894228,-0.38501312076778266,-0.39422282744538945,-0.40339311216876961,-0.41252305791709271,-0.42161175170339216,-0.43065828466586487,-0.43966175215875003,-0.44862125384280294,-0.45753589377532133,-0.46640478049974088,-0.47522702713477982,-0.48400175146312646,-0.49272807601966023,-0.50140512817919891,-0.51003204024375437,-0.51860794952931077,-0.52713199845208603,-0.53560333461429133,-0.54402111088936977],"size":10,"opacity":0.69999999999999996,"line":{"color":"rgba(31,119,180,1)"}},"type":"scatter","mode":"markers","error_y":{"color":"rgba(31,119,180,1)"},"error_x":{"color":"rgba(31,119,180,1)"},"line":{"color":"rgba(31,119,180,1)"},"xaxis":"x","yaxis":"y","frame":null}],"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.20000000000000001,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>In this initial section, we’ve introduced the fundamental concepts of exploratory data analysis (EDA) and the importance of data visualization in gaining insights from complex datasets. We’ve explored various types of plots and their applications in EDA.</p>
<p>Now, let’s dive deeper and enhance our understanding by demonstrating practical examples of EDA using real-world datasets. We’ll showcase how different types of plots and interactive visualizations can provide valuable insights and drive data-driven decisions.</p>
<p>Let’s embark on this EDA journey and uncover the hidden stories within our data through hands-on examples.</p>
</section>
</section>
</section>
<section id="examples" class="level2">
<h2 class="anchored" data-anchor-id="examples">Examples</h2>
</section>
<section id="time-series-decomposition-for-insights" class="level2">
<h2 class="anchored" data-anchor-id="time-series-decomposition-for-insights"><strong>Time Series Decomposition for Insights</strong></h2>
<section id="introduction" class="level3">
<h3 class="anchored" data-anchor-id="introduction"><strong>Introduction</strong></h3>
<p>In this section, we’ll dive into a meaningful example of time series decomposition to demonstrate its practical utility in Exploratory Data Analysis (EDA). Time series decomposition allows us to extract valuable insights from time-dependent data. We’ll use our simulated <strong><code>var_sin</code></strong> time series to illustrate its significance.</p>
</section>
<section id="scenario-analyzing-daily-temperature-data" class="level3">
<h3 class="anchored" data-anchor-id="scenario-analyzing-daily-temperature-data"><strong>Scenario: Analyzing Daily Temperature Data</strong></h3>
<p>Imagine we have daily temperature data for a city over several years. We want to understand the underlying patterns in temperature variations, including trends and seasonality, to make informed decisions related to weather forecasts, climate monitoring, or energy management.</p>
<p>Let’s create the enhanced dataset with temperature data for multiple cities. We’ll use the <strong><code>data.table</code></strong> library to manage the dataset efficiently:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># Install and load the necessary libraries if not already installed</span></span>
<span id="cb20-2"><span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">requireNamespace</span>(<span class="st" style="color: #20794D;">"data.table"</span>, <span class="at" style="color: #657422;">quietly =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)) {</span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"data.table"</span>)</span>
<span id="cb20-4">}</span>
<span id="cb20-5"></span>
<span id="cb20-6"><span class="fu" style="color: #4758AB;">library</span>(data.table)</span>
<span id="cb20-7"></span>
<span id="cb20-8"><span class="co" style="color: #5E5E5E;"># Set the seed for reproducibility</span></span>
<span id="cb20-9"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb20-10"></span>
<span id="cb20-11"><span class="co" style="color: #5E5E5E;"># Generate a dataset with temperature data for multiple cities</span></span>
<span id="cb20-12">cities <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"New York"</span>, <span class="st" style="color: #20794D;">"Los Angeles"</span>, <span class="st" style="color: #20794D;">"Chicago"</span>, <span class="st" style="color: #20794D;">"Miami"</span>, <span class="st" style="color: #20794D;">"Denver"</span>)</span>
<span id="cb20-13">start_date <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"2010-01-01"</span>)</span>
<span id="cb20-14">end_date <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"2019-12-31"</span>)</span>
<span id="cb20-15">date_seq <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(start_date, end_date, <span class="at" style="color: #657422;">by =</span> <span class="st" style="color: #20794D;">"day"</span>)</span>
<span id="cb20-16"></span>
<span id="cb20-17"><span class="co" style="color: #5E5E5E;"># Create a data.table for the dataset</span></span>
<span id="cb20-18">temperature_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.table</span>(</span>
<span id="cb20-19">  <span class="at" style="color: #657422;">Date =</span> <span class="fu" style="color: #4758AB;">rep</span>(date_seq, <span class="fu" style="color: #4758AB;">length</span>(cities)),</span>
<span id="cb20-20">  <span class="at" style="color: #657422;">City =</span> <span class="fu" style="color: #4758AB;">rep</span>(cities, <span class="at" style="color: #657422;">each =</span> <span class="fu" style="color: #4758AB;">length</span>(date_seq)),</span>
<span id="cb20-21">  <span class="at" style="color: #657422;">Temperature =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="fu" style="color: #4758AB;">length</span>(date_seq) <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">length</span>(cities), <span class="at" style="color: #657422;">mean =</span> <span class="dv" style="color: #AD0000;">60</span>, <span class="at" style="color: #657422;">sd =</span> <span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb20-22">)</span>
<span id="cb20-23"><span class="co" style="color: #5E5E5E;"># Filter data for New York</span></span>
<span id="cb20-24">ny_temperature <span class="ot" style="color: #003B4F;">&lt;-</span> temperature_data[City <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"New York"</span>]</span>
<span id="cb20-25"></span>
<span id="cb20-26"><span class="co" style="color: #5E5E5E;"># Decompose the daily temperature time series for New York</span></span>
<span id="cb20-27">ny_decomp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">decompose</span>(<span class="fu" style="color: #4758AB;">ts</span>(ny_temperature<span class="sc" style="color: #5E5E5E;">$</span>Temperature, <span class="at" style="color: #657422;">frequency =</span> <span class="dv" style="color: #AD0000;">365</span>))</span>
<span id="cb20-28"></span>
<span id="cb20-29"><span class="co" style="color: #5E5E5E;"># Plot the decomposed components for New York</span></span>
<span id="cb20-30"><span class="fu" style="color: #4758AB;">plot</span>(ny_decomp)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Tut1/Visualization_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We’ve generated temperature data for each city over the span of ten years, resulting in a diverse and complex dataset.</p>
</section>
<section id="performing-time-series-decomposition" class="level3">
<h3 class="anchored" data-anchor-id="performing-time-series-decomposition"><strong>Performing Time Series Decomposition</strong></h3>
<p>Now that we have our multi-city temperature dataset, let’s apply time series decomposition to analyze temperature trends and seasonality for one of the cities, such as New York (see plot)</p>
</section>
<section id="interpretation" class="level3">
<h3 class="anchored" data-anchor-id="interpretation"><strong>Interpretation</strong></h3>
<p>The plot will display the components of the time series for New York, including the original time series, trend, seasonal component, and residual. Similar analyses can be performed for other cities to identify regional temperature patterns.</p>
</section>
<section id="insights-and-applications" class="level3">
<h3 class="anchored" data-anchor-id="insights-and-applications"><strong>Insights and Applications</strong></h3>
<p>With our enhanced multi-city temperature dataset and time series decomposition, we can:</p>
<ul>
<li><p><strong>Regional Analysis:</strong> Compare temperature patterns across different cities to identify regional variations.</p></li>
<li><p><strong>Seasonal Insights:</strong> Understand how temperature seasonality differs between cities and regions.</p></li>
<li><p><strong>Long-Term Trends:</strong> Analyze temperature trends for each city over the ten-year period.</p></li>
</ul>
<p>This advanced analysis helps us make informed decisions related to climate monitoring, urban planning, and resource management.</p>
</section>
</section>
<section id="leveraging-distribution-plots-for-in-depth-analysis" class="level2">
<h2 class="anchored" data-anchor-id="leveraging-distribution-plots-for-in-depth-analysis"><strong>Leveraging Distribution Plots for In-Depth Analysis</strong></h2>
<section id="introduction-1" class="level3">
<h3 class="anchored" data-anchor-id="introduction-1"><strong>Introduction</strong></h3>
<p>In this section, we’ll illustrate the significance of distribution plots in Exploratory Data Analysis (EDA) by considering a practical scenario. Distribution plots help us understand how data points are distributed and can reveal insights about the underlying data characteristics. We’ll use our simulated dataset and focus on the <strong><code>var_random</code></strong> variable.</p>
</section>
<section id="scenario-analyzing-exam-scores" class="level3">
<h3 class="anchored" data-anchor-id="scenario-analyzing-exam-scores"><strong>Scenario: Analyzing Exam Scores</strong></h3>
<p>Imagine we have a dataset containing exam scores of students in a class. We want to gain insights into the distribution of exam scores to answer questions like:</p>
<ul>
<li><p>What is the typical exam score?</p></li>
<li><p>Are the exam scores normally distributed?</p></li>
<li><p>Are there any outliers or unusual patterns in the scores?</p></li>
</ul>
</section>
<section id="analyzing-the-distribution-of-exam-scores" class="level3">
<h3 class="anchored" data-anchor-id="analyzing-the-distribution-of-exam-scores"><strong>Analyzing the Distribution of Exam Scores</strong></h3>
<p>Let’s create a histogram to visualize the distribution of exam scores using the <strong><code>var_random</code></strong> variable. This will help us answer the questions posed above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Install and load the necessary libraries if not already installed</span></span>
<span id="cb21-2"><span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">requireNamespace</span>(<span class="st" style="color: #20794D;">"ggplot2"</span>, <span class="at" style="color: #657422;">quietly =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)) {</span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"ggplot2"</span>)</span>
<span id="cb21-4">}</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb21-7"></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;"># Create a histogram to visualize the distribution of exam scores</span></span>
<span id="cb21-9">p3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(dtm[variable <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"var_random"</span>], <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y =</span> value, <span class="at" style="color: #657422;">group =</span> variable)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-10">     <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="at" style="color: #657422;">bins =</span> <span class="dv" style="color: #AD0000;">20</span>, <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"lightblue"</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"black"</span>, <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-11">     <span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-12">     <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Distribution of Exam Scores"</span>,</span>
<span id="cb21-13">          <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Scores"</span>,</span>
<span id="cb21-14">          <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Frequency"</span>)</span>
<span id="cb21-15"></span>
<span id="cb21-16"><span class="co" style="color: #5E5E5E;"># Display the histogram</span></span>
<span id="cb21-17">p3</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Tut1/Visualization_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="interpretation-1" class="level3">
<h3 class="anchored" data-anchor-id="interpretation-1"><strong>Interpretation</strong></h3>
<p>The resulting histogram will display the distribution of exam scores. Here’s what we can interpret:</p>
<ul>
<li><p><strong>Typical Exam Score:</strong> The histogram will show where the majority of exam scores lie, indicating the typical or central value.</p></li>
<li><p><strong>Distribution Shape:</strong> We can assess whether the scores follow a normal distribution, are skewed, or have other unique characteristics.</p></li>
<li><p><strong>Outliers:</strong> Outliers, if present, will appear as data points far from the central part of the distribution.</p></li>
</ul>
</section>
<section id="insights-and-applications-1" class="level3">
<h3 class="anchored" data-anchor-id="insights-and-applications-1"><strong>Insights and Applications</strong></h3>
<p>By analyzing the distribution of exam scores, we can:</p>
<ul>
<li><p><strong>Identify Central Tendency:</strong> Determine the typical exam score, which can be useful for setting benchmarks or evaluating student performance.</p></li>
<li><p><strong>Understand Data Characteristics:</strong> Gain insights into the shape of the distribution, which informs us about the data’s characteristics.</p></li>
<li><p><strong>Detect Outliers:</strong> Identify outliers or unusual scores that may require further investigation.</p></li>
</ul>
</section>
</section>
<section id="correlation-analysis" class="level2">
<h2 class="anchored" data-anchor-id="correlation-analysis">Correlation Analysis</h2>
<p>In this section, we’ll explore advanced correlation analysis using more complex datasets. We’ll create two datasets: one representing students’ academic performance, and the other containing information about their study habits and extracurricular activities. We’ll investigate correlations between various factors to gain deeper insights.</p>
<section id="creating-complex-datasets" class="level3">
<h3 class="anchored" data-anchor-id="creating-complex-datasets"><strong>Creating Complex Datasets</strong></h3>
<p>Let’s create the two complex datasets for our correlation analysis:</p>
<p><strong>Academic Performance Dataset:</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># Create an academic performance dataset</span></span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb22-3"></span>
<span id="cb22-4">num_students <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">500</span></span>
<span id="cb22-5"></span>
<span id="cb22-6">academic_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb22-7">  <span class="at" style="color: #657422;">Student_ID =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_students,</span>
<span id="cb22-8">  <span class="at" style="color: #657422;">Exam_Score =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(num_students, <span class="at" style="color: #657422;">mean =</span> <span class="dv" style="color: #AD0000;">75</span>, <span class="at" style="color: #657422;">sd =</span> <span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb22-9">  <span class="at" style="color: #657422;">Assignment_Score =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(num_students, <span class="at" style="color: #657422;">mean =</span> <span class="dv" style="color: #AD0000;">85</span>, <span class="at" style="color: #657422;">sd =</span> <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb22-10">  <span class="at" style="color: #657422;">Final_Project_Score =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(num_students, <span class="at" style="color: #657422;">mean =</span> <span class="dv" style="color: #AD0000;">90</span>, <span class="at" style="color: #657422;">sd =</span> <span class="dv" style="color: #AD0000;">7</span>)</span>
<span id="cb22-11">)</span></code></pre></div>
</div>
<p><strong>Study Habits and Activities Dataset:</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># Create a study habits and activities dataset</span></span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">456</span>)</span>
<span id="cb23-3"></span>
<span id="cb23-4">study_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb23-5">  <span class="at" style="color: #657422;">Student_ID =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_students,</span>
<span id="cb23-6">  <span class="at" style="color: #657422;">Study_Hours =</span> <span class="fu" style="color: #4758AB;">rpois</span>(num_students, <span class="at" style="color: #657422;">lambda =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb23-7">  <span class="at" style="color: #657422;">Extracurricular_Hours =</span> <span class="fu" style="color: #4758AB;">rpois</span>(num_students, <span class="at" style="color: #657422;">lambda =</span> <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb23-8">  <span class="at" style="color: #657422;">Stress_Level =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(num_students, <span class="at" style="color: #657422;">mean =</span> <span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">sd =</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb23-9">)</span></code></pre></div>
</div>
</section>
<section id="advanced-correlation-analysis" class="level3">
<h3 class="anchored" data-anchor-id="advanced-correlation-analysis"><strong>Advanced Correlation Analysis</strong></h3>
<p>Now that we have our complex datasets, let’s perform advanced correlation analysis to explore relationships between academic performance, study habits, and extracurricular activities. We’ll calculate correlations and visualize them using a heatmap:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># Calculate correlations between variables</span></span>
<span id="cb24-2">correlation_matrix <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cor</span>(academic_data[, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Exam_Score"</span>, <span class="st" style="color: #20794D;">"Assignment_Score"</span>, <span class="st" style="color: #20794D;">"Final_Project_Score"</span>)], </span>
<span id="cb24-3">                          study_data[, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Study_Hours"</span>, <span class="st" style="color: #20794D;">"Extracurricular_Hours"</span>, <span class="st" style="color: #20794D;">"Stress_Level"</span>)])</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;"># Install and load the necessary libraries if not already installed</span></span>
<span id="cb24-6"><span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">requireNamespace</span>(<span class="st" style="color: #20794D;">"corrplot"</span>, <span class="at" style="color: #657422;">quietly =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)) {</span>
<span id="cb24-7">  <span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"corrplot"</span>)</span>
<span id="cb24-8">}</span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="fu" style="color: #4758AB;">library</span>(corrplot)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>corrplot 0.92 loaded</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># Create a heatmap to visualize correlations</span></span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;">corrplot</span>(correlation_matrix, <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"color"</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"lower"</span>, <span class="at" style="color: #657422;">tl.col =</span> <span class="st" style="color: #20794D;">"black"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Tut1/Visualization_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="interpretation-2" class="level3">
<h3 class="anchored" data-anchor-id="interpretation-2"><strong>Interpretation</strong></h3>
<p>The resulting heatmap visually represents the correlations between academic performance and study-related factors. Here’s what we can interpret:</p>
<ul>
<li><p><strong>Color Intensity:</strong> The color intensity indicates the strength and direction of the correlation. Positive correlations are shown in blue, while negative correlations are in red. The darker the color, the stronger the correlation.</p></li>
<li><p><strong>Correlation Coefficients:</strong> The heatmap displays the actual correlation coefficients as labels in the lower triangle. These values range from -1 (perfect negative correlation) to 1 (perfect positive correlation), with 0 indicating no correlation.</p></li>
</ul>
</section>
<section id="insights-and-applications-2" class="level3">
<h3 class="anchored" data-anchor-id="insights-and-applications-2"><strong>Insights and Applications</strong></h3>
<p>By conducting advanced correlation analysis, we can:</p>
<ul>
<li><p><strong>Understand Complex Relationships:</strong> Explore intricate correlations between academic performance, study hours, extracurricular activities, and stress levels.</p></li>
<li><p><strong>Identify Key Factors:</strong> Determine which factors have the most significant impact on academic performance.</p></li>
<li><p><strong>Optimize Student Support:</strong> Use insights to provide targeted support and interventions for students.</p></li>
</ul>
<p>Advanced correlation analysis helps us uncover nuanced relationships within complex datasets.</p>
</section>
</section>
<section id="exploring-diverse-distributions-with-box-plots" class="level2">
<h2 class="anchored" data-anchor-id="exploring-diverse-distributions-with-box-plots">Exploring Diverse Distributions with Box Plots</h2>
<p>In this section, we’ll explore the versatility of box plots by working with diverse and complex datasets. We’ll create two datasets: one representing the distribution of monthly sales for multiple product categories, and the other containing information about customer demographics. These datasets will allow us to visualize various types of distributions and identify outliers.</p>
<section id="creating-complex-datasets-1" class="level3">
<h3 class="anchored" data-anchor-id="creating-complex-datasets-1"><strong>Creating Complex Datasets</strong></h3>
<p>Let’s create the two complex datasets for our box plot analysis:</p>
<p><strong>Sales Dataset and Customer Demographics Dataset:</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Create a sales dataset</span></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">789</span>)</span>
<span id="cb27-3"></span>
<span id="cb27-4">num_months <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">24</span></span>
<span id="cb27-5">product_categories <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Electronics"</span>, <span class="st" style="color: #20794D;">"Clothing"</span>, <span class="st" style="color: #20794D;">"Home Decor"</span>, <span class="st" style="color: #20794D;">"Books"</span>)</span>
<span id="cb27-6"></span>
<span id="cb27-7">sales_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb27-8">  <span class="at" style="color: #657422;">Month =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">1</span>, num_months), <span class="at" style="color: #657422;">each =</span> <span class="fu" style="color: #4758AB;">length</span>(product_categories)),</span>
<span id="cb27-9">  <span class="at" style="color: #657422;">Product_Category =</span> <span class="fu" style="color: #4758AB;">rep</span>(product_categories, <span class="at" style="color: #657422;">times =</span> num_months),</span>
<span id="cb27-10">  <span class="at" style="color: #657422;">Sales =</span> <span class="fu" style="color: #4758AB;">rpois</span>(<span class="fu" style="color: #4758AB;">length</span>(product_categories) <span class="sc" style="color: #5E5E5E;">*</span> num_months, <span class="at" style="color: #657422;">lambda =</span> <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb27-11">)</span>
<span id="cb27-12"></span>
<span id="cb27-13"><span class="co" style="color: #5E5E5E;"># Create a customer demographics dataset</span></span>
<span id="cb27-14"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">101</span>)</span>
<span id="cb27-15"></span>
<span id="cb27-16">num_customers <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">300</span></span>
<span id="cb27-17"></span>
<span id="cb27-18">demographics_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb27-19">  <span class="at" style="color: #657422;">Customer_ID =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_customers,</span>
<span id="cb27-20">  <span class="at" style="color: #657422;">Age =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(num_customers, <span class="at" style="color: #657422;">mean =</span> <span class="dv" style="color: #AD0000;">30</span>, <span class="at" style="color: #657422;">sd =</span> <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb27-21">  <span class="at" style="color: #657422;">Income =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(num_customers, <span class="at" style="color: #657422;">mean =</span> <span class="dv" style="color: #AD0000;">50000</span>, <span class="at" style="color: #657422;">sd =</span> <span class="dv" style="color: #AD0000;">15000</span>),</span>
<span id="cb27-22">  <span class="at" style="color: #657422;">Education_Level =</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"High School"</span>, <span class="st" style="color: #20794D;">"Bachelor's"</span>, <span class="st" style="color: #20794D;">"Master's"</span>, <span class="st" style="color: #20794D;">"Ph.D."</span>), </span>
<span id="cb27-23">                           <span class="at" style="color: #657422;">size =</span> num_customers, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb27-24">)</span>
<span id="cb27-25"></span>
<span id="cb27-26"><span class="co" style="color: #5E5E5E;"># Create a box plot to visualize sales distributions by product category</span></span>
<span id="cb27-27">p5 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(sales_data, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Product_Category, <span class="at" style="color: #657422;">y =</span> Sales, <span class="at" style="color: #657422;">fill =</span> Product_Category)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb27-28">     <span class="fu" style="color: #4758AB;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb27-29">     <span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb27-30">     <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Sales Distribution by Product Category"</span>,</span>
<span id="cb27-31">          <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Product Category"</span>,</span>
<span id="cb27-32">          <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Sales"</span>)</span>
<span id="cb27-33"></span>
<span id="cb27-34"><span class="co" style="color: #5E5E5E;"># Display the box plot</span></span>
<span id="cb27-35">p5</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Tut1/Visualization_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># Create a box plot to visualize the distribution of customer ages</span></span>
<span id="cb28-2">p6 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(demographics_data, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y =</span> Age, <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Age"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb28-3">     <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"lightblue"</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"black"</span>, <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb28-4">     <span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb28-5">     <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Customer Age Distribution (Box Plot)"</span>,</span>
<span id="cb28-6">          <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">""</span>,</span>
<span id="cb28-7">          <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Age"</span>)</span>
<span id="cb28-8"></span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;"># Display the box plot</span></span>
<span id="cb28-10">p6</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Tut1/Visualization_files/figure-html/unnamed-chunk-14-2.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="interpretation-3" class="level3">
<h3 class="anchored" data-anchor-id="interpretation-3"><strong>Interpretation</strong></h3>
<p>These box plots help us gain insights into diverse distributions:</p>
<ul>
<li><p><strong>Sales Distribution:</strong> We can observe how sales are distributed across different product categories, identifying variations and potential outliers.</p></li>
<li><p><strong>Customer Age Distribution:</strong> The box plot displays the spread of customer ages, highlighting the central tendency and any potential outliers.</p></li>
</ul>
</section>
<section id="insights-and-applications-3" class="level3">
<h3 class="anchored" data-anchor-id="insights-and-applications-3"><strong>Insights and Applications</strong></h3>
<p>By using box plots with complex datasets, we can:</p>
<ul>
<li><p><strong>Analyze Diverse Distributions:</strong> Visualize and compare distributions of sales for multiple product categories and customer age distributions.</p></li>
<li><p><strong>Outlier Detection:</strong> Identify potential outliers in both sales data and customer demographics.</p></li>
<li><p><strong>Segmentation Insights:</strong> Understand how sales vary across product categories and the age distribution of customers.</p></li>
</ul>
<p>Box plots are versatile tools for exploring various types of data distributions and making data-driven decisions.</p>
</section>
</section>
<section id="interactive-data-visualization-with-plotly" class="level2">
<h2 class="anchored" data-anchor-id="interactive-data-visualization-with-plotly">Interactive Data Visualization with Plotly</h2>
<section id="creating-an-interactive-time-series-plot" class="level3">
<h3 class="anchored" data-anchor-id="creating-an-interactive-time-series-plot"><strong>Creating an Interactive Time Series Plot</strong></h3>
<p>Suppose we have a dataset containing monthly stock prices for three companies: Company A, Company B, and Company C. We want to create an interactive time series plot that allows users to:</p>
<ul>
<li><p>Select the company they want to visualize.</p></li>
<li><p>Zoom in and out to explore specific time periods.</p></li>
<li><p>Hover over data points to view detailed information.</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">requireNamespace</span>(<span class="st" style="color: #20794D;">"plotly"</span>, <span class="at" style="color: #657422;">quietly =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)) {</span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"plotly"</span>)</span>
<span id="cb29-3">}</span>
<span id="cb29-4"></span>
<span id="cb29-5"><span class="fu" style="color: #4758AB;">library</span>(plotly)</span>
<span id="cb29-6"></span>
<span id="cb29-7"><span class="co" style="color: #5E5E5E;"># Create a sample time series dataset</span></span>
<span id="cb29-8"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">789</span>)</span>
<span id="cb29-9"></span>
<span id="cb29-10">num_months <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">24</span></span>
<span id="cb29-11"></span>
<span id="cb29-12">time_series_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb29-13">  <span class="at" style="color: #657422;">Date =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"2022-01-01"</span>), <span class="at" style="color: #657422;">by =</span> <span class="st" style="color: #20794D;">"months"</span>, <span class="at" style="color: #657422;">length.out =</span> num_months),</span>
<span id="cb29-14">  <span class="at" style="color: #657422;">Company_A =</span> <span class="fu" style="color: #4758AB;">cumsum</span>(<span class="fu" style="color: #4758AB;">rnorm</span>(num_months, <span class="at" style="color: #657422;">mean =</span> <span class="fl" style="color: #AD0000;">0.02</span>, <span class="at" style="color: #657422;">sd =</span> <span class="fl" style="color: #AD0000;">0.05</span>)),</span>
<span id="cb29-15">  <span class="at" style="color: #657422;">Company_B =</span> <span class="fu" style="color: #4758AB;">cumsum</span>(<span class="fu" style="color: #4758AB;">rnorm</span>(num_months, <span class="at" style="color: #657422;">mean =</span> <span class="fl" style="color: #AD0000;">0.03</span>, <span class="at" style="color: #657422;">sd =</span> <span class="fl" style="color: #AD0000;">0.04</span>)),</span>
<span id="cb29-16">  <span class="at" style="color: #657422;">Company_C =</span> <span class="fu" style="color: #4758AB;">cumsum</span>(<span class="fu" style="color: #4758AB;">rnorm</span>(num_months, <span class="at" style="color: #657422;">mean =</span> <span class="fl" style="color: #AD0000;">0.01</span>, <span class="at" style="color: #657422;">sd =</span> <span class="fl" style="color: #AD0000;">0.03</span>))</span>
<span id="cb29-17">)</span>
<span id="cb29-18"></span>
<span id="cb29-19"><span class="co" style="color: #5E5E5E;"># Create an interactive time series plot with Plotly</span></span>
<span id="cb29-20">interactive_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">plot_ly</span>(<span class="at" style="color: #657422;">data =</span> time_series_data, <span class="at" style="color: #657422;">x =</span> <span class="sc" style="color: #5E5E5E;">~</span>Date) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb29-21">  <span class="fu" style="color: #4758AB;">add_trace</span>(<span class="at" style="color: #657422;">y =</span> <span class="sc" style="color: #5E5E5E;">~</span>Company_A, <span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Company A"</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"scatter"</span>, <span class="at" style="color: #657422;">mode =</span> <span class="st" style="color: #20794D;">"lines"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb29-22">  <span class="fu" style="color: #4758AB;">add_trace</span>(<span class="at" style="color: #657422;">y =</span> <span class="sc" style="color: #5E5E5E;">~</span>Company_B, <span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Company B"</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"scatter"</span>, <span class="at" style="color: #657422;">mode =</span> <span class="st" style="color: #20794D;">"lines"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb29-23">  <span class="fu" style="color: #4758AB;">add_trace</span>(<span class="at" style="color: #657422;">y =</span> <span class="sc" style="color: #5E5E5E;">~</span>Company_C, <span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Company C"</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"scatter"</span>, <span class="at" style="color: #657422;">mode =</span> <span class="st" style="color: #20794D;">"lines"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb29-24">  <span class="fu" style="color: #4758AB;">layout</span>(</span>
<span id="cb29-25">    <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Monthly Stock Prices"</span>,</span>
<span id="cb29-26">    <span class="at" style="color: #657422;">xaxis =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Date"</span>),</span>
<span id="cb29-27">    <span class="at" style="color: #657422;">yaxis =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Price"</span>),</span>
<span id="cb29-28">    <span class="at" style="color: #657422;">showlegend =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb29-29">  )</span>
<span id="cb29-30"></span>
<span id="cb29-31"><span class="co" style="color: #5E5E5E;"># Display the interactive plot</span></span>
<span id="cb29-32">interactive_plot</span></code></pre></div>
<div class="cell-output-display">
<div class="plotly html-widget html-fill-item" id="htmlwidget-a11835576ffe2bb7c4f5" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-a11835576ffe2bb7c4f5">{"x":{"visdat":{"2d9845b45162":["function () ","plotlyVisDat"]},"cur_data":"2d9845b45162","attrs":{"2d9845b45162":{"x":{},"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"y":{},"name":"Company A","type":"scatter","mode":"lines","inherit":true},"2d9845b45162.1":{"x":{},"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"y":{},"name":"Company B","type":"scatter","mode":"lines","inherit":true},"2d9845b45162.2":{"x":{},"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"y":{},"name":"Company C","type":"scatter","mode":"lines","inherit":true}},"layout":{"margin":{"b":40,"l":60,"t":25,"r":10},"title":"Monthly Stock Prices","xaxis":{"domain":[0,1],"automargin":true,"title":"Date"},"yaxis":{"domain":[0,1],"automargin":true,"title":"Price"},"showlegend":true,"hovermode":"closest"},"source":"A","config":{"modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"data":[{"x":["2022-01-01","2022-02-01","2022-03-01","2022-04-01","2022-05-01","2022-06-01","2022-07-01","2022-08-01","2022-09-01","2022-10-01","2022-11-01","2022-12-01","2023-01-01","2023-02-01","2023-03-01","2023-04-01","2023-05-01","2023-06-01","2023-07-01","2023-08-01","2023-09-01","2023-10-01","2023-11-01","2023-12-01"],"y":[0.046204835538150052,-0.046833558673031447,-0.027817544577457769,0.0013394501033616169,0.0032718760168962413,-0.00095232359006236847,-0.014267970924264531,-0.0029914348721218984,-0.033539418239082429,0.023445384590774533,0.023330569256389308,-0.0068084469788469455,0.0043055926404506999,-8.9385550313323542e-05,0.066305983967015675,0.047584722725290615,0.088728278956121745,0.078380109514852705,0.10884885835147544,0.089981998848093853,0.074879492850780993,0.12905295144858156,0.10616857280750057,0.14455661462589947],"name":"Company A","type":"scatter","mode":"lines","marker":{"color":"rgba(31,119,180,1)","line":{"color":"rgba(31,119,180,1)"}},"error_y":{"color":"rgba(31,119,180,1)"},"error_x":{"color":"rgba(31,119,180,1)"},"line":{"color":"rgba(31,119,180,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":["2022-01-01","2022-02-01","2022-03-01","2022-04-01","2022-05-01","2022-06-01","2022-07-01","2022-08-01","2022-09-01","2022-10-01","2022-11-01","2022-12-01","2023-01-01","2023-02-01","2023-03-01","2023-04-01","2023-05-01","2023-06-01","2023-07-01","2023-08-01","2023-09-01","2023-10-01","2023-11-01","2023-12-01"],"y":[-0.027187681179006301,-0.01768067408169742,0.0015949109911152538,0.023625626096874512,0.087888596397790841,0.11121702191294472,0.12619015928976712,0.11079108436734014,0.16516367452388911,0.21779788718828563,0.21835594368109573,0.20601386780463959,0.18329929685006183,0.20512370539825289,0.21106814788942821,0.26749225252513392,0.29090465940040561,0.39128590064236923,0.48576777040344066,0.54789571455664787,0.62850512378225598,0.67894411535922272,0.58543931138891958,0.63440847622410645],"name":"Company B","type":"scatter","mode":"lines","marker":{"color":"rgba(255,127,14,1)","line":{"color":"rgba(255,127,14,1)"}},"error_y":{"color":"rgba(255,127,14,1)"},"error_x":{"color":"rgba(255,127,14,1)"},"line":{"color":"rgba(255,127,14,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":["2022-01-01","2022-02-01","2022-03-01","2022-04-01","2022-05-01","2022-06-01","2022-07-01","2022-08-01","2022-09-01","2022-10-01","2022-11-01","2022-12-01","2023-01-01","2023-02-01","2023-03-01","2023-04-01","2023-05-01","2023-06-01","2023-07-01","2023-08-01","2023-09-01","2023-10-01","2023-11-01","2023-12-01"],"y":[0.028776819804481685,0.068212118981550163,0.076780823169275536,0.041192378201714577,0.075040471340510256,0.080713496039849786,0.069518558738990904,0.097839932901593679,0.14039178205088826,0.12905130464943942,0.1737399460130496,0.22080682988705827,0.22113317059446011,0.25311643266435707,0.25449056783271201,0.3349459662434297,0.35537588691647681,0.35501066232273182,0.33793205901011325,0.33611639068636495,0.31720262649914488,0.35028188096643104,0.37662246794543192,0.4181140736939562],"name":"Company C","type":"scatter","mode":"lines","marker":{"color":"rgba(44,160,44,1)","line":{"color":"rgba(44,160,44,1)"}},"error_y":{"color":"rgba(44,160,44,1)"},"error_x":{"color":"rgba(44,160,44,1)"},"line":{"color":"rgba(44,160,44,1)"},"xaxis":"x","yaxis":"y","frame":null}],"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.20000000000000001,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
</section>
<section id="interaction-features" class="level3">
<h3 class="anchored" data-anchor-id="interaction-features"><strong>Interaction Features</strong></h3>
<p>The interactive time series plot created with Plotly offers the following interaction features:</p>
<ul>
<li><p><strong>Selection:</strong> Users can click on the legend to select/deselect specific companies for visualization.</p></li>
<li><p><strong>Zoom:</strong> Users can click and drag to zoom in on a specific time period.</p></li>
<li><p><strong>Hover Information:</strong> Hovering the mouse pointer over data points displays detailed information about the selected data point.</p></li>
</ul>
</section>
<section id="insights-and-applications-4" class="level3">
<h3 class="anchored" data-anchor-id="insights-and-applications-4"><strong>Insights and Applications</strong></h3>
<p>Interactive visualizations with Plotly are valuable for:</p>
<ul>
<li><p><strong>Exploration:</strong> Users can interactively explore complex datasets and focus on specific aspects of the data.</p></li>
<li><p><strong>Data Communication:</strong> Presenting data in an interactive format enhances communication and engagement.</p></li>
<li><p><strong>Decision Support:</strong> Interactive plots can be used in decision-making processes where users need to explore data dynamics.</p></li>
</ul>
<p>Interactive data visualizations are a powerful tool for EDA and data presentation. In the next section, we’ll explore another advanced visualization technique: time series decomposition.</p>
</section>
<section id="interaction-features-1" class="level3">
<h3 class="anchored" data-anchor-id="interaction-features-1"><strong>Interaction Features</strong></h3>
<p>The interactive time series plot created with Plotly offers the following interaction features:</p>
<ul>
<li><p><strong>Selection:</strong> Users can click on the legend to select/deselect specific companies for visualization.</p></li>
<li><p><strong>Zoom:</strong> Users can click and drag to zoom in on a specific time period.</p></li>
<li><p><strong>Hover Information:</strong> Hovering the mouse pointer over data points displays detailed information about the selected data point.</p></li>
</ul>
</section>
<section id="insights-and-applications-5" class="level3">
<h3 class="anchored" data-anchor-id="insights-and-applications-5"><strong>Insights and Applications</strong></h3>
<p>Interactive visualizations with Plotly are valuable for:</p>
<ul>
<li><p><strong>Exploration:</strong> Users can interactively explore complex datasets and focus on specific aspects of the data.</p></li>
<li><p><strong>Data Communication:</strong> Presenting data in an interactive format enhances communication and engagement.</p></li>
<li><p><strong>Decision Support:</strong> Interactive plots can be used in decision-making processes where users need to explore data dynamics.</p></li>
</ul>
<p>[<span class="citation" data-cites="ggplot2">Wickham (2016)</span>]<span class="citation" data-cites="GGally">(Schloerke et al. 2021)</span></p>



</section>
</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-GGally" class="csl-entry">
Schloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2021. <span>“GGally: Extension to ’Ggplot2’.”</span> <a href="https://CRAN.R-project.org/package=GGally">https://CRAN.R-project.org/package=GGally</a>.
</div>
<div id="ref-ggplot2" class="csl-entry">
Wickham, Hadley. 2016. <span>“Ggplot2: Elegant Graphics for Data Analysis.”</span> <a href="https://ggplot2.tidyverse.org">https://ggplot2.tidyverse.org</a>.
</div>
</div></section></div> ]]></description>
  <category>R</category>
  <category>tutorials</category>
  <category>ggplot</category>
  <category>visualization</category>
  <category>recipes</category>
  <guid>https://giorgioluciano.github.io/posts/Tut1/Visualization.html</guid>
  <pubDate>Fri, 15 Sep 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Namespaces in shiny: Why you need them</title>
  <dc:creator>Giorgio Luciano and ChatGPT</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Snip05/Using Shiny Modules with Namespaces.html</link>
  <description><![CDATA[ 




<p><em>This is the first in a series of tips/tutorials that would have been incredibly helpful to me before writing certain R scripts. Thanks to CHATGPT and the minimal time it takes to organize and transform them into blog posts, I’ve decided to save and write them in this format to keep them on record</em></p>
<p>In Shiny, when you create modules, it’s essential to use namespaces (<code>NS</code>) to ensure that each module instance has unique IDs for its input and output elements. This prevents conflicts and unexpected behavior when working with multiple module instances.</p>
<section id="without-using-namespaces-not-recommended" class="level2">
<h2 class="anchored" data-anchor-id="without-using-namespaces-not-recommended">Without Using Namespaces (Not Recommended)</h2>
<p>Let’s start with an example where we create two instances of the same module without using namespaces:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"></span>
<span id="cb1-3">my_module <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(id) {</span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;">tagList</span>(</span>
<span id="cb1-5">    <span class="fu" style="color: #4758AB;">textInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"text_input"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Enter text:"</span>),</span>
<span id="cb1-6">    <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"action_button"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Click me"</span>)</span>
<span id="cb1-7">  )</span>
<span id="cb1-8">}</span>
<span id="cb1-9"></span>
<span id="cb1-10">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;">my_module</span>(<span class="st" style="color: #20794D;">"module_1"</span>),</span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;">my_module</span>(<span class="st" style="color: #20794D;">"module_2"</span>)</span>
<span id="cb1-13">)</span></code></pre></div>
</div>
<p>In this example, both module_1 and module_2 share the same IDs for input elements (text_input and action_button). If we interact with one module, it will affect the other module as well, leading to unexpected behavior.</p>
</section>
<section id="using-namespaces-recommended" class="level2">
<h2 class="anchored" data-anchor-id="using-namespaces-recommended">Using Namespaces (Recommended)</h2>
<p>Now, let’s use namespaces to create unique IDs for each module instance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb2-2"></span>
<span id="cb2-3">my_module <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(id) {</span>
<span id="cb2-4">  ns <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">NS</span>(id)</span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;">tagList</span>(</span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;">textInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="fu" style="color: #4758AB;">ns</span>(<span class="st" style="color: #20794D;">"text_input"</span>), <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Enter text:"</span>),</span>
<span id="cb2-7">    <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="fu" style="color: #4758AB;">ns</span>(<span class="st" style="color: #20794D;">"action_button"</span>), <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Click me"</span>)</span>
<span id="cb2-8">  )</span>
<span id="cb2-9">}</span>
<span id="cb2-10"></span>
<span id="cb2-11">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb2-12">  <span class="fu" style="color: #4758AB;">my_module</span>(<span class="st" style="color: #20794D;">"module_1"</span>),</span>
<span id="cb2-13">  <span class="fu" style="color: #4758AB;">my_module</span>(<span class="st" style="color: #20794D;">"module_2"</span>)</span>
<span id="cb2-14">)</span></code></pre></div>
</div>
<p>In this example, we use NS to generate unique namespaces for each module instance (module_1 and module_2). As a result, the input element IDs are unique between instances, ensuring that interactions within one module do not affect the other module.</p>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<p>When creating Shiny modules, it’s highly recommended to use namespaces (NS) to prevent ID conflicts between module instances. This practice ensures that each module operates independently and avoids unexpected behavior when working with multiple modules in your Shiny app.</p>


</section>
</section>

 ]]></description>
  <category>R</category>
  <category>tutorials</category>
  <category>ggplot</category>
  <category>shiny</category>
  <category>tutorials</category>
  <guid>https://giorgioluciano.github.io/posts/Snip05/Using Shiny Modules with Namespaces.html</guid>
  <pubDate>Fri, 15 Sep 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title>The Birthday Paradox: When Probability Plays Tricks</title>
  <dc:creator>Giorgio Luciano and ChatGPT 3.5</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Fun06/index.html</link>
  <description><![CDATA[ 




<ol type="1">
<li><p>The article delves into the “Birthday Paradox,” a counterintuitive aspect of probability. It utilizes the R programming language to simulate and visualize the paradox, emphasizing how probability can defy expectations</p></li>
<li><p>The Birthday Paradox involves the likelihood of two people in a group sharing the same birthday, with the actual probability higher than initially perceived. The paradox arises from the multitude of possible combinations of birthdays within a group.</p></li>
<li><p>R code for simulating the Birthday Paradox is provided, illustrating how probabilities change with increasing group size. The simulation involves checking for shared birthdays through multiple iterations to calculate the overall probability.</p></li>
<li><p>Despite intuition, the Birthday Paradox illustrates that the probability of two people sharing a birthday is higher than anticipated.</p></li>
</ol>
<p>In the realm of probability, there exist situations that are surprising and counterintuitive, and the “Birthday Paradox” is one of the most well-known examples. In this article, we will explore this intriguing paradox and use R to simulate and visualize its application. The Birthday Paradox is a classic demonstration of how probability can defy our expectations.</p>
<p>The Birthday Paradox is a probabilistic problem concerning the likelihood that two people in a group share the same birthday. At first glance, it might seem like the probability is very low, but in reality, it’s higher than you might think.</p>
<p>The paradox is based on the fact that there are many possible combinations of people’s birthdays within a group. While it might appear that there is only a small chance that two people share a birthday, things change when we consider the entire group.</p>
<p>Let’s dive into action and use the R programming language to simulate the Birthday Paradox. We will see how the probabilities change as the group size increases.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Number of simulations</span></span>
<span id="cb1-2">num_simulations <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">10000</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># Function to check if there are shared birthdays in a group</span></span>
<span id="cb1-5">check_shared_birthday <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(group_size) {</span>
<span id="cb1-6">  birthdays <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">365</span>, group_size, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-7">  <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(birthdays) <span class="sc" style="color: #5E5E5E;">==</span> <span class="fu" style="color: #4758AB;">length</span>(<span class="fu" style="color: #4758AB;">unique</span>(birthdays))) {</span>
<span id="cb1-8">    <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">FALSE</span>)  <span class="co" style="color: #5E5E5E;"># No shared birthdays</span></span>
<span id="cb1-9">  } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">TRUE</span>)   <span class="co" style="color: #5E5E5E;"># Shared birthdays</span></span>
<span id="cb1-11">  }</span>
<span id="cb1-12">}</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;"># Simulate the Birthday Paradox</span></span>
<span id="cb1-15">simulate_birthday_paradox <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(group_size) {</span>
<span id="cb1-16">  shared_birthday_count <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-17">  <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_simulations) {</span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">check_shared_birthday</span>(group_size)) {</span>
<span id="cb1-19">      shared_birthday_count <span class="ot" style="color: #003B4F;">&lt;-</span> shared_birthday_count <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-20">    }</span>
<span id="cb1-21">  }</span>
<span id="cb1-22">  <span class="fu" style="color: #4758AB;">return</span>(shared_birthday_count <span class="sc" style="color: #5E5E5E;">/</span> num_simulations)</span>
<span id="cb1-23">}</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;"># Test the Birthday Paradox simulation for different group sizes</span></span>
<span id="cb1-26">group_sizes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb1-27">results <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">numeric</span>(<span class="fu" style="color: #4758AB;">length</span>(group_sizes))</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(group_sizes)) {</span>
<span id="cb1-30">  results[i] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simulate_birthday_paradox</span>(group_sizes[i])</span>
<span id="cb1-31">}</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="co" style="color: #5E5E5E;"># Plot the results</span></span>
<span id="cb1-34"><span class="fu" style="color: #4758AB;">plot</span>(group_sizes, results, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"l"</span>, <span class="at" style="color: #657422;">xlab =</span> <span class="st" style="color: #20794D;">"Group Size"</span>, <span class="at" style="color: #657422;">ylab =</span> <span class="st" style="color: #20794D;">"Probability of Shared Birthday"</span>, <span class="at" style="color: #657422;">main =</span> <span class="st" style="color: #20794D;">"Birthday Paradox Simulation"</span>)</span>
<span id="cb1-35"><span class="fu" style="color: #4758AB;">abline</span>(<span class="at" style="color: #657422;">h =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"red"</span>, <span class="at" style="color: #657422;">lty =</span> <span class="dv" style="color: #AD0000;">2</span>)  <span class="co" style="color: #5E5E5E;"># Add a line at 0.5 for reference</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Fun06/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The Birthday Paradox is a captivating example of how probability can be counterintuitive. Despite our intuitions, the probability of finding two people with the same birthday is higher than it seems. This paradox is an opportunity to explore the laws of probability and how they can surprise us.</p>



 ]]></description>
  <category>R</category>
  <category>Fun</category>
  <guid>https://giorgioluciano.github.io/posts/Fun06/index.html</guid>
  <pubDate>Fri, 15 Sep 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title></title>
  <dc:creator>Giorgio Luciano</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Packages Review 2022/index.html</link>
  <description><![CDATA[ undefined ]]></description>
  <category>R</category>
  <category>packages</category>
  <guid>https://giorgioluciano.github.io/posts/Packages Review 2022/index.html</guid>
  <pubDate>Wed, 22 Mar 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Snippet #4: boxplots and scatterplots: simple recipes</title>
  <dc:creator>Giorgio Luciano</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Snip04/index.html</link>
  <description><![CDATA[ 




<ol type="1">
<li>Simulate data, check and assign <em>data types</em></li>
<li>Create a scatterplot with <code>ggplot</code></li>
<li>Create violin plot with <code>ggstatsplot</code></li>
</ol>
<p>Example 1: We want to visualize the difference between two groups of patients that follow two different diets. <em>Group A</em> has an average of total cholesterol of <em>180</em> with a standard deviation of <em>20</em> while <em>Group B</em> and average of <em>200</em> with a standard deviation of 40</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(MASS)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(data.table)</span>
<span id="cb1-4"></span>
<span id="cb1-5"></span>
<span id="cb1-6">npatientsA <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">500</span></span>
<span id="cb1-7">npatientsB <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">520</span></span>
<span id="cb1-8">cholA <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">mvrnorm</span>(<span class="at" style="color: #657422;">n=</span>npatientsA, <span class="at" style="color: #657422;">mu=</span><span class="dv" style="color: #AD0000;">180</span>, <span class="at" style="color: #657422;">Sigma=</span><span class="dv" style="color: #AD0000;">20</span>, <span class="at" style="color: #657422;">empirical=</span>T)</span>
<span id="cb1-9">cholB <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">mvrnorm</span>(<span class="at" style="color: #657422;">n=</span>npatientsB, <span class="at" style="color: #657422;">mu=</span><span class="dv" style="color: #AD0000;">200</span>, <span class="at" style="color: #657422;">Sigma=</span><span class="dv" style="color: #AD0000;">40</span>, <span class="at" style="color: #657422;">empirical=</span>T)</span>
<span id="cb1-10"></span>
<span id="cb1-11">dataA <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cbind</span>(cholA,<span class="fu" style="color: #4758AB;">rep</span>(<span class="st" style="color: #20794D;">"A"</span>,npatientsA))  </span>
<span id="cb1-12">dataB <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cbind</span>(cholB,<span class="fu" style="color: #4758AB;">rep</span>(<span class="st" style="color: #20794D;">"B"</span>,npatientsB))  </span>
<span id="cb1-13"></span>
<span id="cb1-14">data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">rbind</span>(dataA,dataB))</span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Cholesterol"</span>,<span class="st" style="color: #20794D;">"group"</span>)</span>
<span id="cb1-16">data<span class="sc" style="color: #5E5E5E;">$</span>Cholesterol <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(data<span class="sc" style="color: #5E5E5E;">$</span>Cholesterol)</span>
<span id="cb1-17"></span>
<span id="cb1-18">p1 <span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">ggplot</span>(data, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> group, <span class="at" style="color: #657422;">y =</span> Cholesterol)) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.05</span>) </span>
<span id="cb1-19"></span>
<span id="cb1-20">p1</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Snip04/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>A few observations on the code. First of all, we need to input the data in a <code>data.frame</code> otherwise ggplot will give us an error. The second observation is that since we put <code>chr</code> labels on our groups we needed to define Cholesterol <code>as.numeric</code> in order to avoid unwanted resultsstrange results. Try to comment the line <code>data$Cholesterol &lt;- as.numeric(data$Cholesterol)</code> and you can see by yourself what will happen. (hint: a “labelstorm!”)</p>
<p>Jiiter plots is one of my favorite way to represent data. data and immediately understand the distribution of your data and also avoid the pitfall of boxplot (see <span class="citation" data-cites="matejka2017">(Matejka and Fitzmaurice 2017)</span>)</p>
<p>If you need inferential statistics on your data another resource is <span class="citation" data-cites="ggstatsplot">(Patil 2021)</span>. See the following example with our data. <strong>NOTE</strong> that we nee to transform the group label <em>as.factor</em></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(ggstatsplot)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>You can cite this package as:
     Patil, I. (2021). Visualizations with statistical details: The 'ggstatsplot' approach.
     Journal of Open Source Software, 6(61), 3167, doi:10.21105/joss.03167</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">data<span class="sc" style="color: #5E5E5E;">$</span>group <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.factor</span>(data<span class="sc" style="color: #5E5E5E;">$</span>group)</span>
<span id="cb4-2"></span>
<span id="cb4-3">pstack  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggbetweenstats</span>(data,group,Cholesterol)</span>
<span id="cb4-4">                          </span>
<span id="cb4-5">pstack    </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Snip04/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>




<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-matejka2017" class="csl-entry">
Matejka, Justin, and George Fitzmaurice. 2017. <span>“Same Stats, Different Graphs.”</span> <em>Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems</em>, May. <a href="https://doi.org/10.1145/3025453.3025912">https://doi.org/10.1145/3025453.3025912</a>.
</div>
<div id="ref-ggstatsplot" class="csl-entry">
Patil, Indrajeet. 2021. <span>“<span></span>Visualizations with Statistical Details: The <span></span>’Ggstatsplot’<span></span> Approach<span></span>”</span> 6: 3167. <a href="https://doi.org/10.21105/joss.03167">https://doi.org/10.21105/joss.03167</a>.
</div>
</div></section></div> ]]></description>
  <category>R</category>
  <category>tutorials</category>
  <category>ggplot</category>
  <category>visualization</category>
  <category>recipes</category>
  <guid>https://giorgioluciano.github.io/posts/Snip04/index.html</guid>
  <pubDate>Fri, 10 Mar 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Snippet #3: Functions for simulating data</title>
  <dc:creator>Giorgio Luciano</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Snip03/index.html</link>
  <description><![CDATA[ 




<ol type="1">
<li>Example of creating variables using <code>runif</code> and <code>rnorm</code></li>
<li>Writing a function that wraps all</li>
</ol>
<p>First of all we use the <code>runif</code> and <code>rnorm</code> to have a look how they work.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(data.table)</span>
<span id="cb1-2">x_min   <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-3">x_max   <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">10</span>   </span>
<span id="cb1-4">x_step  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.01</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">y_mean  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb1-7">y_sd    <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.25</span></span>
<span id="cb1-8">y_min   <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-9">y_max   <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span>   </span>
<span id="cb1-10"></span>
<span id="cb1-11">x       <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(x_min,x_max,x_step)</span>
<span id="cb1-12">var_random  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">runif</span>(x,y_min,y_max)</span>
<span id="cb1-13">var_norm    <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(x,y_mean,y_sd) </span>
<span id="cb1-14"></span>
<span id="cb1-15">df  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span> (x,var_random,var_norm)</span>
<span id="cb1-16">dt  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.table</span>(df)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">simpleDataset <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(number_of_rows,means,sds)</span>
<span id="cb2-2">{</span>
<span id="cb2-3">l <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(means)</span>
<span id="cb2-4">res <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>l),<span class="cf" style="color: #003B4F;">function</span>(x) </span>
<span id="cb2-5">       <span class="fu" style="color: #4758AB;">eval</span>(</span>
<span id="cb2-6">       <span class="fu" style="color: #4758AB;">parse</span>(</span>
<span id="cb2-7">       <span class="at" style="color: #657422;">text=</span><span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"rnorm("</span>,number_of_rows,<span class="st" style="color: #20794D;">","</span>,means[x],<span class="st" style="color: #20794D;">","</span>,sds[x],<span class="st" style="color: #20794D;">")"</span>,<span class="at" style="color: #657422;">sep=</span><span class="st" style="color: #20794D;">""</span>))</span>
<span id="cb2-8">       )</span>
<span id="cb2-9">       ) </span>
<span id="cb2-10">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>((<span class="fu" style="color: #4758AB;">sapply</span>(res,c)))</span>
<span id="cb2-11">id <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rownames</span>(dat)</span>
<span id="cb2-12">dat <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">cbind</span>(<span class="at" style="color: #657422;">id=</span>id,dat)</span>
<span id="cb2-13">dt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.table</span>(dat)</span>
<span id="cb2-14"><span class="fu" style="color: #4758AB;">return</span>(dt)</span>
<span id="cb2-15">}</span></code></pre></div>
</div>
<p>Example 1: We simulate the values of the LDL cholesterol of <em>2</em> patients in <em>3</em> different times. The first one patient (X1) has an average value of <em>200</em> of LDL with a standard variation of <em>2</em> while the second (X2) has an average of <em>150</em> with a standard deviation of <em>10. Note: All values are expressed in mg/dL</em></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">dataset1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simpleDataset</span>(<span class="dv" style="color: #AD0000;">3</span>,<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">200</span>,<span class="dv" style="color: #AD0000;">180</span>),<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb3-2">dataset1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   id       X1       X2
1:  1 203.6588 171.4630
2:  2 204.2282 183.8984
3:  3 196.4866 166.2477</code></pre>
</div>
</div>
<p>Example 2: this time we combine <code>runif</code> and <code>simpleDataset</code>. We simulate the values of the LDL cholesterol of <em>5</em> patients in <em>7</em> different times. The values for each patient are between a <em>min = 100</em> and a <em>max = 150</em> with a standard deviation between a min sd = 10 and max sd = 40. We also simulate two time that presents outliers values between a <em>min = 180</em> and <em>max = 200</em> and an <em>min sd = 10</em> and <em>max sd = 40 .</em> We merge the values for each patient (<em>7</em> times + <em>2</em> outliers times) and finally we use the function melt to reshape the dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">dat1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simpleDataset</span>(<span class="at" style="color: #657422;">number_of_rows=</span><span class="dv" style="color: #AD0000;">7</span>,</span>
<span id="cb5-2">                      <span class="at" style="color: #657422;">means=</span><span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">100</span>,<span class="dv" style="color: #AD0000;">150</span>),</span>
<span id="cb5-3">                      <span class="at" style="color: #657422;">sds=</span><span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">40</span>))</span>
<span id="cb5-4">outliers <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simpleDataset</span>(<span class="at" style="color: #657422;">number_of_rows=</span><span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb5-5">                      <span class="at" style="color: #657422;">means=</span><span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">180</span>,<span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb5-6">                      <span class="at" style="color: #657422;">sds=</span><span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">40</span>))                 </span>
<span id="cb5-7"></span>
<span id="cb5-8">dat1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   id        X1        X2       X3       X4        X5
1:  1  71.84936  98.36598 141.2255 113.2426  85.93507
2:  2  89.98873 107.55437 113.9083 128.7742 118.49871
3:  3 134.42350 118.33060 123.1944 131.7786 113.95603
4:  4 143.12526  90.45479 133.3862 119.5926  82.27963
5:  5 119.89442  86.61020 133.3819 127.7598  97.79946
6:  6 166.94995 150.24227 144.0762 140.2474 105.02831
7:  7 108.50989  71.80047 135.3942 151.2846 107.16426</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">outliers</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   id       X1       X2       X3       X4       X5
1:  1 186.5589 223.7572 189.4940 215.1073 191.5749
2:  2 184.9729 214.7796 201.4495 158.0832 177.9497</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">dato     <span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">rbind</span>(dat1,outliers) </span>
<span id="cb9-2">dt.melt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">melt</span>(dat1, <span class="at" style="color: #657422;">id.vars=</span><span class="st" style="color: #20794D;">"id"</span>)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;">colnames</span>(dt.melt) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"id"</span>,<span class="st" style="color: #20794D;">"category"</span>,<span class="st" style="color: #20794D;">"var1"</span>)</span>
<span id="cb9-4">dt.melt<span class="sc" style="color: #5E5E5E;">$</span>ncat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(dt.melt<span class="sc" style="color: #5E5E5E;">$</span>category)</span>
<span id="cb9-5"></span>
<span id="cb9-6">dt.melt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    id category      var1 ncat
 1:  1       X1  71.84936    1
 2:  2       X1  89.98873    1
 3:  3       X1 134.42350    1
 4:  4       X1 143.12526    1
 5:  5       X1 119.89442    1
 6:  6       X1 166.94995    1
 7:  7       X1 108.50989    1
 8:  1       X2  98.36598    2
 9:  2       X2 107.55437    2
10:  3       X2 118.33060    2
11:  4       X2  90.45479    2
12:  5       X2  86.61020    2
13:  6       X2 150.24227    2
14:  7       X2  71.80047    2
15:  1       X3 141.22552    3
16:  2       X3 113.90832    3
17:  3       X3 123.19443    3
18:  4       X3 133.38618    3
19:  5       X3 133.38188    3
20:  6       X3 144.07624    3
21:  7       X3 135.39417    3
22:  1       X4 113.24255    4
23:  2       X4 128.77417    4
24:  3       X4 131.77862    4
25:  4       X4 119.59255    4
26:  5       X4 127.75984    4
27:  6       X4 140.24743    4
28:  7       X4 151.28465    4
29:  1       X5  85.93507    5
30:  2       X5 118.49871    5
31:  3       X5 113.95603    5
32:  4       X5  82.27963    5
33:  5       X5  97.79946    5
34:  6       X5 105.02831    5
35:  7       X5 107.16426    5
    id category      var1 ncat</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">str</span>(dt.melt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Classes 'data.table' and 'data.frame':  35 obs. of  4 variables:
 $ id      : chr  "1" "2" "3" "4" ...
 $ category: Factor w/ 5 levels "X1","X2","X3",..: 1 1 1 1 1 1 1 2 2 2 ...
 $ var1    : num  71.8 90 134.4 143.1 119.9 ...
 $ ncat    : num  1 1 1 1 1 1 1 2 2 2 ...
 - attr(*, ".internal.selfref")=&lt;externalptr&gt; </code></pre>
</div>
</div>



 ]]></description>
  <category>R</category>
  <category>tutorials</category>
  <guid>https://giorgioluciano.github.io/posts/Snip03/index.html</guid>
  <pubDate>Fri, 03 Mar 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Snippet #1: ggplot loops</title>
  <dc:creator>Giorgio Luciano</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Snip01/index.html</link>
  <description><![CDATA[ 




<ol type="1">
<li>Create an empty list</li>
<li>Populate your list with objects (ggplots)</li>
<li>Create iteratively names for the objects</li>
<li>Rename the objects inside the list using the name list generated previously</li>
<li>Show all plots using <code>wrap_plots</code></li>
</ol>
<p>Instead of using boring plots we will use our private art collections and items.</p>
<p>One great package to create your art in R is <a href="https://CRAN.R-project.org/package=aRtsy">aRtsy</a> Let’s fire it up</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">require</span>(aRtsy)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: aRtsy</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">require</span>(patchwork)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: patchwork</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">#before starting for having a look at the palette </span></span>
<span id="cb5-2">?colorPalette</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>starting httpd help server ... done</code></pre>
</div>
</div>
<p>Create a Mondrian and save it</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">34</span>)</span>
<span id="cb7-2">Composition_10 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">canvas_squares</span>(<span class="at" style="color: #657422;">colors =</span> <span class="fu" style="color: #4758AB;">colorPalette</span>(<span class="st" style="color: #20794D;">"boogy2"</span>))</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;">saveCanvas</span>(Composition_10 , <span class="at" style="color: #657422;">filename =</span> <span class="st" style="color: #20794D;">"Mondrian.png"</span>)</span>
<span id="cb7-4">Composition_10 </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Snip01/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="192"></p>
</div>
</div>
<p>and another one</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb8-2">aspect_ratio <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb8-3">height <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb8-4">Composition_1 <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">canvas_segments</span>(<span class="at" style="color: #657422;">colors =</span> <span class="fu" style="color: #4758AB;">colorPalette</span>(<span class="st" style="color: #20794D;">"blackwhite"</span>))</span>
<span id="cb8-5">Composition_1 </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Snip01/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="192"></p>
</div>
</div>
<p>or if you want to create a lots of them, create names automatically and then take a look at just one of your artistic composition in your collection use the following code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">n_items <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb9-2">collection <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>()</span>
<span id="cb9-3">name_of_Composition  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>()</span>
<span id="cb9-4"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n_items) {</span>
<span id="cb9-5">  seed <span class="ot" style="color: #003B4F;">&lt;-</span>  (<span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">100000</span>,<span class="dv" style="color: #AD0000;">1</span>)) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb9-6">  name_of_Composition[[i]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"Composition_"</span>, i)</span>
<span id="cb9-7">  collection[[i]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">canvas_squares</span>(<span class="at" style="color: #657422;">colors =</span> <span class="fu" style="color: #4758AB;">colorPalette</span>(<span class="st" style="color: #20794D;">"boogy2"</span>))</span>
<span id="cb9-8">  </span>
<span id="cb9-9">}</span>
<span id="cb9-10"><span class="fu" style="color: #4758AB;">names</span>(collection) <span class="ot" style="color: #003B4F;">&lt;-</span> name_of_Composition</span>
<span id="cb9-11"></span>
<span id="cb9-12">collection</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Composition_1</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Snip01/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="192"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
$Composition_2</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Snip01/index_files/figure-html/unnamed-chunk-5-2.png" class="img-fluid" width="192"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
$Composition_3</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Snip01/index_files/figure-html/unnamed-chunk-5-3.png" class="img-fluid" width="192"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">#as you can notice the setting for figure output in this chunk was changed in order to showplots with a rato of 3:1</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">wrap_plots</span>(collection)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://giorgioluciano.github.io/posts/Snip01/index_files/figure-html/r-1.png" class="img-fluid" width="576"></p>
</div>
</div>
<p>[<span class="citation" data-cites="ggplot2">Wickham (2016)</span>]<span class="citation" data-cites="aRtsy">(Derks 2022)</span><span class="citation" data-cites="patchwork">(Pedersen 2022)</span></p>




<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-aRtsy" class="csl-entry">
Derks, Koen. 2022. <span>“aRtsy: Generative Art with ’Ggplot2’.”</span> <a href="https://CRAN.R-project.org/package=aRtsy">https://CRAN.R-project.org/package=aRtsy</a>.
</div>
<div id="ref-patchwork" class="csl-entry">
Pedersen, Thomas Lin. 2022. <span>“Patchwork: The Composer of Plots.”</span> <a href="https://CRAN.R-project.org/package=patchwork">https://CRAN.R-project.org/package=patchwork</a>.
</div>
<div id="ref-ggplot2" class="csl-entry">
Wickham, Hadley. 2016. <span>“Ggplot2: Elegant Graphics for Data Analysis.”</span> <a href="https://ggplot2.tidyverse.org">https://ggplot2.tidyverse.org</a>.
</div>
</div></section></div> ]]></description>
  <category>R</category>
  <category>tutorials</category>
  <guid>https://giorgioluciano.github.io/posts/Snip01/index.html</guid>
  <pubDate>Sat, 18 Feb 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Snippet #2: Cleaning column names of an imported csv</title>
  <dc:creator>Giorgio Luciano</dc:creator>
  <link>https://giorgioluciano.github.io/posts/Snip02/index.html</link>
  <description><![CDATA[ 




<ol type="1">
<li>Import data from a csv file</li>
<li>Use the function <code>clean_names</code> from <span class="citation" data-cites="janitor">(Firke 2023)</span>j R function</li>
<li>Write a function in base using <code>gsub</code> and <code>regex</code> to tackle specific issues</li>
<li>You’re done</li>
</ol>
<p>First of all we import the csv using the library <span class="citation" data-cites="here">(Müller 2020)</span><code>here</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(here)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>here() starts at I:/giorgioluciano.github.io/Blog</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">file_in <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"FakeData.csv"</span></span>
<span id="cb3-2">path_in <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"posts/Snip02/"</span></span>
<span id="cb3-3">data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(<span class="fu" style="color: #4758AB;">here</span>(path_in,file_in), <span class="at" style="color: #657422;">head=</span>T, <span class="at" style="color: #657422;">check.names=</span>F, <span class="at" style="color: #657422;">encoding=</span><span class="st" style="color: #20794D;">"latin1"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(janitor)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'janitor'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    chisq.test, fisher.test</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">data_fixed <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">clean_names</span>(data)</span></code></pre></div>
</div>
<p>And now the <a href="https://drdoane.com/clean-consistent-column-names/">function</a> written by <a href="https://drdoane.com/">William Doane</a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">clinical_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(.data, <span class="at" style="color: #657422;">unique =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) {</span>
<span id="cb8-2">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.data.frame</span>(.data)) <span class="fu" style="color: #4758AB;">colnames</span>(.data) <span class="cf" style="color: #003B4F;">else</span> .data</span>
<span id="cb8-3">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"cvrisk"</span>, <span class="st" style="color: #20794D;">"CVrisk"</span>, n , <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-4">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"hbo"</span>, <span class="st" style="color: #20794D;">"HBO"</span>, n , <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-5">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"ft4"</span>, <span class="st" style="color: #20794D;">"fT4"</span>, n , <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-6">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"f_t4"</span>, <span class="st" style="color: #20794D;">"fT4"</span>, n , <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-7">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"ft3"</span>, <span class="st" style="color: #20794D;">"fT3"</span>, n , <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-8">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"f_t3"</span>, <span class="st" style="color: #20794D;">"fT3"</span>, n , <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-9">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"ldl"</span>, <span class="st" style="color: #20794D;">"LDL"</span>, n , <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-10">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"hdl"</span>, <span class="st" style="color: #20794D;">"HDL"</span>, n , <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-11">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"hba1c"</span>, <span class="st" style="color: #20794D;">"HbA1C"</span>, n, <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-12">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"hbac1"</span>, <span class="st" style="color: #20794D;">"HbA1C"</span>, n, <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-13">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"hb_ac1"</span>, <span class="st" style="color: #20794D;">"HbA1C"</span>,n,<span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-14">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">igf</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">b"</span>, <span class="st" style="color: #20794D;">"IGF"</span>, n , <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-15">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"tsh"</span>, <span class="st" style="color: #20794D;">"TSH"</span>, n , <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-16">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"acth"</span>, <span class="st" style="color: #20794D;">"ACTH"</span>, n, <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-17">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">Na</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">b"</span>, <span class="st" style="color: #20794D;">"Sodio"</span>, n)</span>
<span id="cb8-18">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">K</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">b"</span>,  <span class="st" style="color: #20794D;">"Potassio"</span>, n)</span>
<span id="cb8-19">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">P</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">b"</span>,  <span class="st" style="color: #20794D;">"Fosforo"</span>, n)</span>
<span id="cb8-20">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">pas</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">b"</span>, <span class="st" style="color: #20794D;">"PAS"</span>, n, <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-21">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">pad</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">b"</span>, <span class="st" style="color: #20794D;">"PAD"</span>, n, <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-22">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">pth</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">b"</span>, <span class="st" style="color: #20794D;">"PTH"</span>, n, <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-23">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">clu</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">b"</span>, <span class="st" style="color: #20794D;">"CLU"</span>, n, <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-24">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">tg</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">b"</span>, <span class="st" style="color: #20794D;">"TG"</span>, n, <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-25">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">glic</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">b"</span>, <span class="st" style="color: #20794D;">"glicemia"</span>, n, <span class="at" style="color: #657422;">ignore.case=</span>T)</span>
<span id="cb8-26">  <span class="cf" style="color: #003B4F;">if</span> (unique) n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">make.unique</span>(n, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb8-27">  <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.data.frame</span>(.data)) {</span>
<span id="cb8-28">    <span class="fu" style="color: #4758AB;">colnames</span>(.data) <span class="ot" style="color: #003B4F;">&lt;-</span> n</span>
<span id="cb8-29">    .data</span>
<span id="cb8-30">  } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb8-31">    n</span>
<span id="cb8-32">  }</span>
<span id="cb8-33">}</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">data_clean <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">clinical_names</span>(data_fixed)</span>
<span id="cb9-2"></span>
<span id="cb9-3">comparison <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cbind</span>(<span class="fu" style="color: #4758AB;">data.frame</span>((<span class="fu" style="color: #4758AB;">colnames</span>(data))),</span>
<span id="cb9-4">                        <span class="fu" style="color: #4758AB;">data.frame</span>((<span class="fu" style="color: #4758AB;">colnames</span>(data_fixed))),</span>
<span id="cb9-5">                        <span class="fu" style="color: #4758AB;">data.frame</span>((<span class="fu" style="color: #4758AB;">colnames</span>(data_clean))))</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="fu" style="color: #4758AB;">colnames</span>(comparison) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"original"</span>,<span class="st" style="color: #20794D;">"fixed"</span>,<span class="st" style="color: #20794D;">"clean"</span>) </span>
<span id="cb9-8"></span>
<span id="cb9-9">comparison</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           original             fixed             clean
1          paziente          paziente          paziente
2               età               eta               eta
3               SEX               sex               sex
4          diagnosi          diagnosi          diagnosi
5           terapia           terapia           terapia
6             tempo             tempo             tempo
7            Cvrisk            cvrisk            CVrisk
8              peso              peso              peso
9        delta Peso        delta_peso        delta_peso
10              BMI               bmi               bmi
11         deltaBMI         delta_bmi         delta_bmi
12              PAS               pas               PAS
13         deltaPas         delta_pas         delta_PAS
14              pad               pad               PAD
15         deltaPad         delta_pad         delta_PAD
16              HBO               hbo               HBO
17           neutro            neutro            neutro
18            linfo             linfo             linfo
19             glic              glic          glicemia
20    deltaglicemia     deltaglicemia     deltaglicemia
21            HBAC1             hbac1             HbA1C
22       deltaHbAc1      delta_hb_ac1       delta_HbA1C
23            sodio             sodio             sodio
24         potassio          potassio          potassio
25           calcio            calcio            calcio
26          fosforo           fosforo           fosforo
27      colesterolo       colesterolo       colesterolo
28 deltaColesterolo delta_colesterolo delta_colesterolo
29              HDL               hdl               HDL
30         deltaHDL         delta_hdl         delta_HDL
31              ldl               ldl               LDL
32         deltaLDL         delta_ldl         delta_LDL
33               TG                tg                tg
34          deltaTG          delta_tg          delta_tg
35             ACTH              acth              ACTH
36        cortisolo         cortisolo         cortisolo
37              CLU               clu               CLU
38              IGF               igf               IGF
39              TSH               tsh               TSH
40              fT4              f_t4               fT4
41              PTH               pth               PTH
42       Vitamina D        vitamina_d        vitamina_d
43          dose_CA           dose_ca           dose_ca
44          dose_HC           dose_hc           dose_hc
45          dose_PL           dose_pl           dose_pl
46 dose equivalente  dose_equivalente  dose_equivalente</code></pre>
</div>
</div>




<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-janitor" class="csl-entry">
Firke, Sam. 2023. <span>“Janitor: Simple Tools for Examining and Cleaning Dirty Data.”</span> <a href="https://CRAN.R-project.org/package=janitor">https://CRAN.R-project.org/package=janitor</a>.
</div>
<div id="ref-here" class="csl-entry">
Müller, Kirill. 2020. <span>“Here: A Simpler Way to Find Your Files.”</span> <a href="https://CRAN.R-project.org/package=here">https://CRAN.R-project.org/package=here</a>.
</div>
</div></section></div> ]]></description>
  <category>R</category>
  <category>tutorials</category>
  <guid>https://giorgioluciano.github.io/posts/Snip02/index.html</guid>
  <pubDate>Sat, 18 Feb 2023 23:00:00 GMT</pubDate>
</item>
</channel>
</rss>
